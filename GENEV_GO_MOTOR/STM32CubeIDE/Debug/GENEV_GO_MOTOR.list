
GENEV_GO_MOTOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e54  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08006fec  08006fec  00016fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072d4  080072d4  00020580  2**0
                  CONTENTS
  4 .ARM          00000008  080072d4  080072d4  000172d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072dc  080072dc  00020580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072dc  080072dc  000172dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072e0  080072e0  000172e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000580  20000000  080072e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  20000580  08007864  00020580  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200009b0  08007864  000209b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020580  2**0
                  CONTENTS, READONLY
 12 .debug_line   000327a3  00000000  00000000  000205b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0003e075  00000000  00000000  00052d53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006a6d  00000000  00000000  00090dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001638  00000000  00000000  00097838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000a72eb  00000000  00000000  00098e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000034b0  00000000  00000000  00140160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0001ce6a  00000000  00000000  00143610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001eb7d  00000000  00000000  0016047a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000cf  00000000  00000000  0017eff7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f60  00000000  00000000  0017f0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000580 	.word	0x20000580
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006fd4 	.word	0x08006fd4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000584 	.word	0x20000584
 80001d4:	08006fd4 	.word	0x08006fd4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000514 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004e0:	480d      	ldr	r0, [pc, #52]	; (8000518 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004e2:	490e      	ldr	r1, [pc, #56]	; (800051c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004e4:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f6:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004f8:	4c0b      	ldr	r4, [pc, #44]	; (8000528 <LoopFillZerobss+0x26>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000506:	f002 fd25 	bl	8002f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050a:	f006 fd37 	bl	8006f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800050e:	f000 f933 	bl	8000778 <main>
  bx  lr    
 8000512:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000514:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	20000580 	.word	0x20000580
  ldr r2, =_sidata
 8000520:	080072e4 	.word	0x080072e4
  ldr r2, =_sbss
 8000524:	20000580 	.word	0x20000580
  ldr r4, =_ebss
 8000528:	200009b0 	.word	0x200009b0

0800052c <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800052c:	e7fe      	b.n	800052c <BusFault_Handler>
	...

08000530 <HAL_TIM_PeriodElapsedCallback>:
}

//It's much more better for user to input the torque elastically through uart1
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim == &htim3)
 8000530:	4b50      	ldr	r3, [pc, #320]	; (8000674 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000532:	4298      	cmp	r0, r3
{
 8000534:	b510      	push	{r4, lr}
	if(htim == &htim3)
 8000536:	d012      	beq.n	800055e <HAL_TIM_PeriodElapsedCallback+0x2e>
		//Show the fault
		HAL_UART_Transmit(&huart1, (unsigned char* )"Faults: ", sizeof("Faults: "),HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart1, (uint8_t*)&fault, 2, HAL_MAX_DELAY);
		HAL_UART_Transmit(&huart1, (unsigned char*)"\r\n",sizeof("\r\n"),HAL_MAX_DELAY);
	}
	else if (htim == &htim4)
 8000538:	4b4f      	ldr	r3, [pc, #316]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800053a:	4298      	cmp	r0, r3
 800053c:	d000      	beq.n	8000540 <HAL_TIM_PeriodElapsedCallback+0x10>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
		count ++;
	}
}
 800053e:	bd10      	pop	{r4, pc}
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000540:	484e      	ldr	r0, [pc, #312]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000546:	f003 f961 	bl	800380c <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800054a:	484c      	ldr	r0, [pc, #304]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800054c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000550:	f003 f95c 	bl	800380c <HAL_GPIO_TogglePin>
		count ++;
 8000554:	4a4a      	ldr	r2, [pc, #296]	; (8000680 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000556:	7813      	ldrb	r3, [r2, #0]
 8000558:	3301      	adds	r3, #1
 800055a:	7013      	strb	r3, [r2, #0]
}
 800055c:	bd10      	pop	{r4, pc}
		rpm   = (int32_t)((MC_GetMecSpeedAverageMotor1() * _RPM)/SPEED_UNIT);
 800055e:	f000 fb65 	bl	8000c2c <MC_GetMecSpeedAverageMotor1>
 8000562:	4c48      	ldr	r4, [pc, #288]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000564:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000568:	0040      	lsls	r0, r0, #1
 800056a:	6020      	str	r0, [r4, #0]
		voltage = (int32_t)(MC_GetPhaseVoltageAmplitudeMotor1());
 800056c:	f000 fb6a 	bl	8000c44 <MC_GetPhaseVoltageAmplitudeMotor1>
 8000570:	4b45      	ldr	r3, [pc, #276]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000572:	6018      	str	r0, [r3, #0]
		current = (int32_t)(MC_GetPhaseCurrentAmplitudeMotor1());
 8000574:	f000 fb60 	bl	8000c38 <MC_GetPhaseCurrentAmplitudeMotor1>
 8000578:	4b44      	ldr	r3, [pc, #272]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800057a:	6018      	str	r0, [r3, #0]
		sensor_feedback = MC_GetPhaseCurrentAmplitudeMotor1();
 800057c:	f000 fb5c 	bl	8000c38 <MC_GetPhaseCurrentAmplitudeMotor1>
 8000580:	4b43      	ldr	r3, [pc, #268]	; (8000690 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000582:	3800      	subs	r0, #0
 8000584:	bf18      	it	ne
 8000586:	2001      	movne	r0, #1
 8000588:	7018      	strb	r0, [r3, #0]
		fault   =  MC_GetCurrentFaultsMotor1();
 800058a:	f000 fb61 	bl	8000c50 <MC_GetCurrentFaultsMotor1>
		if (rpm >= 70)
 800058e:	6823      	ldr	r3, [r4, #0]
		fault   =  MC_GetCurrentFaultsMotor1();
 8000590:	4a40      	ldr	r2, [pc, #256]	; (8000694 <HAL_TIM_PeriodElapsedCallback+0x164>)
		if (rpm >= 70)
 8000592:	2b45      	cmp	r3, #69	; 0x45
		fault   =  MC_GetCurrentFaultsMotor1();
 8000594:	8010      	strh	r0, [r2, #0]
		if (rpm >= 70)
 8000596:	dd5e      	ble.n	8000656 <HAL_TIM_PeriodElapsedCallback+0x126>
			if(throttle == 0)
 8000598:	4a3f      	ldr	r2, [pc, #252]	; (8000698 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800059a:	7811      	ldrb	r1, [r2, #0]
 800059c:	2900      	cmp	r1, #0
 800059e:	d062      	beq.n	8000666 <HAL_TIM_PeriodElapsedCallback+0x136>
		if(rpm == 700)
 80005a0:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80005a4:	d101      	bne.n	80005aa <HAL_TIM_PeriodElapsedCallback+0x7a>
            if(throttle == 1)
 80005a6:	2901      	cmp	r1, #1
 80005a8:	d05a      	beq.n	8000660 <HAL_TIM_PeriodElapsedCallback+0x130>
		HAL_UART_Transmit(&huart1, (unsigned char*)"Speed: ",sizeof("Speed: "),HAL_MAX_DELAY);
 80005aa:	493c      	ldr	r1, [pc, #240]	; (800069c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80005ac:	483c      	ldr	r0, [pc, #240]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
 80005b2:	2208      	movs	r2, #8
 80005b4:	f004 fa4e 	bl	8004a54 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)&rpm,4,HAL_MAX_DELAY);
 80005b8:	4932      	ldr	r1, [pc, #200]	; (8000684 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80005ba:	4839      	ldr	r0, [pc, #228]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	2204      	movs	r2, #4
 80005c2:	f004 fa47 	bl	8004a54 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (unsigned char*)"\r\n",sizeof("\r\n"),HAL_MAX_DELAY);
 80005c6:	4937      	ldr	r1, [pc, #220]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80005c8:	4835      	ldr	r0, [pc, #212]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
 80005ce:	2203      	movs	r2, #3
 80005d0:	f004 fa40 	bl	8004a54 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (unsigned char*)"Phase Voltage: ",sizeof("Phase Voltage: "),HAL_MAX_DELAY);
 80005d4:	4934      	ldr	r1, [pc, #208]	; (80006a8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80005d6:	4832      	ldr	r0, [pc, #200]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295
 80005dc:	2210      	movs	r2, #16
 80005de:	f004 fa39 	bl	8004a54 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)&voltage,4,HAL_MAX_DELAY);
 80005e2:	4929      	ldr	r1, [pc, #164]	; (8000688 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80005e4:	482e      	ldr	r0, [pc, #184]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	2204      	movs	r2, #4
 80005ec:	f004 fa32 	bl	8004a54 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (unsigned char*)"\r\n",sizeof("\r\n"),HAL_MAX_DELAY);
 80005f0:	492c      	ldr	r1, [pc, #176]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80005f2:	482b      	ldr	r0, [pc, #172]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80005f4:	f04f 33ff 	mov.w	r3, #4294967295
 80005f8:	2203      	movs	r2, #3
 80005fa:	f004 fa2b 	bl	8004a54 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (unsigned char*)"Phase Current: ",sizeof("Phase Current: "),HAL_MAX_DELAY);
 80005fe:	492b      	ldr	r1, [pc, #172]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000600:	4827      	ldr	r0, [pc, #156]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	2210      	movs	r2, #16
 8000608:	f004 fa24 	bl	8004a54 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)&current,4,HAL_MAX_DELAY);
 800060c:	491f      	ldr	r1, [pc, #124]	; (800068c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800060e:	4824      	ldr	r0, [pc, #144]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	2204      	movs	r2, #4
 8000616:	f004 fa1d 	bl	8004a54 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (unsigned char*)"\r\n",sizeof("\r\n"),HAL_MAX_DELAY);
 800061a:	4922      	ldr	r1, [pc, #136]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800061c:	4820      	ldr	r0, [pc, #128]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	2203      	movs	r2, #3
 8000624:	f004 fa16 	bl	8004a54 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (unsigned char* )"Faults: ", sizeof("Faults: "),HAL_MAX_DELAY);
 8000628:	4921      	ldr	r1, [pc, #132]	; (80006b0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800062a:	481d      	ldr	r0, [pc, #116]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	2209      	movs	r2, #9
 8000632:	f004 fa0f 	bl	8004a54 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, (uint8_t*)&fault, 2, HAL_MAX_DELAY);
 8000636:	4917      	ldr	r1, [pc, #92]	; (8000694 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000638:	4819      	ldr	r0, [pc, #100]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800063a:	f04f 33ff 	mov.w	r3, #4294967295
 800063e:	2202      	movs	r2, #2
 8000640:	f004 fa08 	bl	8004a54 <HAL_UART_Transmit>
}
 8000644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Transmit(&huart1, (unsigned char*)"\r\n",sizeof("\r\n"),HAL_MAX_DELAY);
 8000648:	4916      	ldr	r1, [pc, #88]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800064a:	4815      	ldr	r0, [pc, #84]	; (80006a0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	2203      	movs	r2, #3
 8000652:	f004 b9ff 	b.w	8004a54 <HAL_UART_Transmit>
			if(motor_move == 0)
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1a5      	bne.n	80005aa <HAL_TIM_PeriodElapsedCallback+0x7a>
 800065e:	4a0e      	ldr	r2, [pc, #56]	; (8000698 <HAL_TIM_PeriodElapsedCallback+0x168>)
				throttle = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	7013      	strb	r3, [r2, #0]
 8000664:	e7a1      	b.n	80005aa <HAL_TIM_PeriodElapsedCallback+0x7a>
				throttle = 1;
 8000666:	2101      	movs	r1, #1
		if(rpm == 700)
 8000668:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
				throttle = 1;
 800066c:	7011      	strb	r1, [r2, #0]
		if(rpm == 700)
 800066e:	d19c      	bne.n	80005aa <HAL_TIM_PeriodElapsedCallback+0x7a>
 8000670:	e7f6      	b.n	8000660 <HAL_TIM_PeriodElapsedCallback+0x130>
 8000672:	bf00      	nop
 8000674:	20000688 	.word	0x20000688
 8000678:	200006d0 	.word	0x200006d0
 800067c:	40020400 	.word	0x40020400
 8000680:	200005a0 	.word	0x200005a0
 8000684:	200007a4 	.word	0x200007a4
 8000688:	200007ac 	.word	0x200007ac
 800068c:	200005a4 	.word	0x200005a4
 8000690:	20000000 	.word	0x20000000
 8000694:	200005a8 	.word	0x200005a8
 8000698:	200007a8 	.word	0x200007a8
 800069c:	08006fec 	.word	0x08006fec
 80006a0:	20000718 	.word	0x20000718
 80006a4:	08006ff4 	.word	0x08006ff4
 80006a8:	08006ff8 	.word	0x08006ff8
 80006ac:	08007008 	.word	0x08007008
 80006b0:	08007018 	.word	0x08007018
 80006b4:	200007a0 	.word	0x200007a0

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	2300      	movs	r3, #0
{
 80006bc:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80006c2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80006ca:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	4928      	ldr	r1, [pc, #160]	; (8000770 <SystemClock_Config+0xb8>)
 80006d0:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d2:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006d6:	4a27      	ldr	r2, [pc, #156]	; (8000774 <SystemClock_Config+0xbc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 80006dc:	6408      	str	r0, [r1, #64]	; 0x40
 80006de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80006e0:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80006e4:	9100      	str	r1, [sp, #0]
 80006e6:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006e8:	9301      	str	r3, [sp, #4]
 80006ea:	6813      	ldr	r3, [r2, #0]
 80006ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006f4:	6013      	str	r3, [r2, #0]
 80006f6:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f8:	ed9f 7b17 	vldr	d7, [pc, #92]	; 8000758 <SystemClock_Config+0xa0>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000700:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000702:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000706:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000708:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 84;
 800070e:	2254      	movs	r2, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000710:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000714:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000718:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	e9cd 2411 	strd	r2, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000720:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f003 f87d 	bl	8003820 <HAL_RCC_OscConfig>
 8000726:	b108      	cbz	r0, 800072c <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072a:	e7fe      	b.n	800072a <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000760 <SystemClock_Config+0xa8>
 8000730:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000734:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000768 <SystemClock_Config+0xb0>
 8000738:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800073a:	4621      	mov	r1, r4
 800073c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	ed8d 7b04 	vstr	d7, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000742:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000744:	f003 fa7c 	bl	8003c40 <HAL_RCC_ClockConfig>
 8000748:	b108      	cbz	r0, 800074e <SystemClock_Config+0x96>
 800074a:	b672      	cpsid	i
  while (1)
 800074c:	e7fe      	b.n	800074c <SystemClock_Config+0x94>
  HAL_RCC_EnableCSS();
 800074e:	f003 fa4b 	bl	8003be8 <HAL_RCC_EnableCSS>
}
 8000752:	b014      	add	sp, #80	; 0x50
 8000754:	bd10      	pop	{r4, pc}
 8000756:	bf00      	nop
 8000758:	00000001 	.word	0x00000001
 800075c:	00010000 	.word	0x00010000
 8000760:	0000000f 	.word	0x0000000f
 8000764:	00000002 	.word	0x00000002
 8000768:	00000000 	.word	0x00000000
 800076c:	00001000 	.word	0x00001000
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <main>:
{
 8000778:	b580      	push	{r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	2400      	movs	r4, #0
{
 800077c:	b09c      	sub	sp, #112	; 0x70
  HAL_Init();
 800077e:	f002 fc17 	bl	8002fb0 <HAL_Init>
  SystemClock_Config();
 8000782:	f7ff ff99 	bl	80006b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 800078a:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	4baf      	ldr	r3, [pc, #700]	; (8000a4c <main+0x2d4>)
 8000790:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000794:	6b19      	ldr	r1, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000796:	48ae      	ldr	r0, [pc, #696]	; (8000a50 <main+0x2d8>)
  hadc1.Instance = ADC1;
 8000798:	4dae      	ldr	r5, [pc, #696]	; (8000a54 <main+0x2dc>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800079a:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8000a68 <main+0x2f0>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80007a2:	6319      	str	r1, [r3, #48]	; 0x30
 80007a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007a6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80007aa:	9100      	str	r1, [sp, #0]
 80007ac:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	9401      	str	r4, [sp, #4]
 80007b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007b2:	f041 0104 	orr.w	r1, r1, #4
 80007b6:	6319      	str	r1, [r3, #48]	; 0x30
 80007b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007ba:	f001 0104 	and.w	r1, r1, #4
 80007be:	9101      	str	r1, [sp, #4]
 80007c0:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	9402      	str	r4, [sp, #8]
 80007c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007c6:	f041 0101 	orr.w	r1, r1, #1
 80007ca:	6319      	str	r1, [r3, #48]	; 0x30
 80007cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007ce:	f001 0101 	and.w	r1, r1, #1
 80007d2:	9102      	str	r1, [sp, #8]
 80007d4:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	9403      	str	r4, [sp, #12]
 80007d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007da:	f041 0102 	orr.w	r1, r1, #2
 80007de:	6319      	str	r1, [r3, #48]	; 0x30
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80007e6:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e8:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80007ea:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80007f0:	2600      	movs	r6, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80007f2:	f003 f807 	bl	8003804 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80007f6:	2700      	movs	r7, #0
 80007f8:	2301      	movs	r3, #1
 80007fa:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	4894      	ldr	r0, [pc, #592]	; (8000a50 <main+0x2d8>)
 8000800:	a914      	add	r1, sp, #80	; 0x50
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000802:	f04f 0820 	mov.w	r8, #32
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000806:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800080a:	e9cd 6716 	strd	r6, r7, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800080e:	f002 ff07 	bl	8003620 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000812:	4642      	mov	r2, r8
 8000814:	4621      	mov	r1, r4
 8000816:	a814      	add	r0, sp, #80	; 0x50
 8000818:	f006 fbd4 	bl	8006fc4 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800081c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000820:	e9c5 9300 	strd	r9, r3, [r5]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000824:	4a8c      	ldr	r2, [pc, #560]	; (8000a58 <main+0x2e0>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000826:	60ac      	str	r4, [r5, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000828:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800082c:	60eb      	str	r3, [r5, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800082e:	2300      	movs	r3, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000830:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000834:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000838:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800083a:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800083e:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000842:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
  hadc1.Init.ScanConvMode = ENABLE;
 8000846:	2401      	movs	r4, #1
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000848:	4628      	mov	r0, r5
  hadc1.Init.ScanConvMode = ENABLE;
 800084a:	612c      	str	r4, [r5, #16]
  hadc1.Init.NbrOfConversion = 1;
 800084c:	61ec      	str	r4, [r5, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800084e:	616c      	str	r4, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000850:	f002 fbda 	bl	8003008 <HAL_ADC_Init>
 8000854:	b108      	cbz	r0, 800085a <main+0xe2>
 8000856:	b672      	cpsid	i
  while (1)
 8000858:	e7fe      	b.n	8000858 <main+0xe0>
  sConfigInjected.InjectedNbrOfConversion = 3;
 800085a:	2303      	movs	r3, #3
  sConfigInjected.InjectedRank = 1;
 800085c:	e9cd 0414 	strd	r0, r4, [sp, #80]	; 0x50
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000860:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000862:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
  sConfigInjected.InjectedOffset = 0;
 8000866:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000868:	9318      	str	r3, [sp, #96]	; 0x60
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000870:	a914      	add	r1, sp, #80	; 0x50
 8000872:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000874:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000878:	f002 fd22 	bl	80032c0 <HAL_ADCEx_InjectedConfigChannel>
 800087c:	b108      	cbz	r0, 8000882 <main+0x10a>
 800087e:	b672      	cpsid	i
  while (1)
 8000880:	e7fe      	b.n	8000880 <main+0x108>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8000882:	220b      	movs	r2, #11
 8000884:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000886:	a914      	add	r1, sp, #80	; 0x50
 8000888:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 800088a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800088e:	f002 fd17 	bl	80032c0 <HAL_ADCEx_InjectedConfigChannel>
 8000892:	b108      	cbz	r0, 8000898 <main+0x120>
 8000894:	b672      	cpsid	i
  while (1)
 8000896:	e7fe      	b.n	8000896 <main+0x11e>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000898:	220a      	movs	r2, #10
 800089a:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800089c:	a914      	add	r1, sp, #80	; 0x50
 800089e:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 80008a0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80008a4:	f002 fd0c 	bl	80032c0 <HAL_ADCEx_InjectedConfigChannel>
 80008a8:	b108      	cbz	r0, 80008ae <main+0x136>
 80008aa:	b672      	cpsid	i
  while (1)
 80008ac:	e7fe      	b.n	80008ac <main+0x134>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ae:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 80008b0:	2201      	movs	r2, #1
 80008b2:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b4:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_1;
 80008b6:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 80008ba:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008be:	f002 fc51 	bl	8003164 <HAL_ADC_ConfigChannel>
 80008c2:	4605      	mov	r5, r0
 80008c4:	b108      	cbz	r0, 80008ca <main+0x152>
 80008c6:	b672      	cpsid	i
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <main+0x150>
  htim1.Instance = TIM1;
 80008ca:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8000a60 <main+0x2e8>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008ce:	9006      	str	r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d0:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 80008d4:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 80008d8:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008dc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80008e0:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e4:	9004      	str	r0, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e6:	9012      	str	r0, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e8:	9005      	str	r0, [sp, #20]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008ea:	4642      	mov	r2, r8
 80008ec:	4601      	mov	r1, r0
 80008ee:	a814      	add	r0, sp, #80	; 0x50
 80008f0:	f006 fb68 	bl	8006fc4 <memset>
  htim1.Instance = TIM1;
 80008f4:	4b59      	ldr	r3, [pc, #356]	; (8000a5c <main+0x2e4>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80008f6:	f8c9 8008 	str.w	r8, [r9, #8]
  htim1.Instance = TIM1;
 80008fa:	f8c9 3000 	str.w	r3, [r9]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80008fe:	f640 2841 	movw	r8, #2625	; 0xa41
 8000902:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000906:	4648      	mov	r0, r9
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000908:	e9c9 8303 	strd	r8, r3, [r9, #12]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800090c:	f8c9 4014 	str.w	r4, [r9, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000910:	f8c9 5004 	str.w	r5, [r9, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000914:	f8c9 5018 	str.w	r5, [r9, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000918:	f003 fa56 	bl	8003dc8 <HAL_TIM_Base_Init>
 800091c:	b108      	cbz	r0, 8000922 <main+0x1aa>
 800091e:	b672      	cpsid	i
  while (1)
 8000920:	e7fe      	b.n	8000920 <main+0x1a8>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000922:	4648      	mov	r0, r9
 8000924:	f003 fb04 	bl	8003f30 <HAL_TIM_PWM_Init>
 8000928:	b108      	cbz	r0, 800092e <main+0x1b6>
 800092a:	b672      	cpsid	i
  while (1)
 800092c:	e7fe      	b.n	800092c <main+0x1b4>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800092e:	2206      	movs	r2, #6
 8000930:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000932:	a906      	add	r1, sp, #24
 8000934:	4648      	mov	r0, r9
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000936:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800093a:	f003 fd2d 	bl	8004398 <HAL_TIM_SlaveConfigSynchro>
 800093e:	b108      	cbz	r0, 8000944 <main+0x1cc>
 8000940:	b672      	cpsid	i
  while (1)
 8000942:	e7fe      	b.n	8000942 <main+0x1ca>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000944:	a904      	add	r1, sp, #16
 8000946:	4648      	mov	r0, r9
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000948:	e9cd 6704 	strd	r6, r7, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800094c:	f003 ff82 	bl	8004854 <HAL_TIMEx_MasterConfigSynchronization>
 8000950:	4602      	mov	r2, r0
 8000952:	b108      	cbz	r0, 8000958 <main+0x1e0>
 8000954:	b672      	cpsid	i
  while (1)
 8000956:	e7fe      	b.n	8000956 <main+0x1de>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000958:	2460      	movs	r4, #96	; 0x60
 800095a:	2500      	movs	r5, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800095c:	4648      	mov	r0, r9
 800095e:	a90c      	add	r1, sp, #48	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000960:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8000964:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8000968:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800096c:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800096e:	f003 fb5d 	bl	800402c <HAL_TIM_PWM_ConfigChannel>
 8000972:	b108      	cbz	r0, 8000978 <main+0x200>
 8000974:	b672      	cpsid	i
  while (1)
 8000976:	e7fe      	b.n	8000976 <main+0x1fe>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000978:	4839      	ldr	r0, [pc, #228]	; (8000a60 <main+0x2e8>)
 800097a:	2204      	movs	r2, #4
 800097c:	a90c      	add	r1, sp, #48	; 0x30
 800097e:	f003 fb55 	bl	800402c <HAL_TIM_PWM_ConfigChannel>
 8000982:	b108      	cbz	r0, 8000988 <main+0x210>
 8000984:	b672      	cpsid	i
  while (1)
 8000986:	e7fe      	b.n	8000986 <main+0x20e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000988:	4835      	ldr	r0, [pc, #212]	; (8000a60 <main+0x2e8>)
 800098a:	2208      	movs	r2, #8
 800098c:	a90c      	add	r1, sp, #48	; 0x30
 800098e:	f003 fb4d 	bl	800402c <HAL_TIM_PWM_ConfigChannel>
 8000992:	b108      	cbz	r0, 8000998 <main+0x220>
 8000994:	b672      	cpsid	i
  while (1)
 8000996:	e7fe      	b.n	8000996 <main+0x21e>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000998:	2270      	movs	r2, #112	; 0x70
 800099a:	f44f 6324 	mov.w	r3, #2624	; 0xa40
 800099e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009a2:	482f      	ldr	r0, [pc, #188]	; (8000a60 <main+0x2e8>)
 80009a4:	220c      	movs	r2, #12
 80009a6:	a90c      	add	r1, sp, #48	; 0x30
 80009a8:	f003 fb40 	bl	800402c <HAL_TIM_PWM_ConfigChannel>
 80009ac:	b108      	cbz	r0, 80009b2 <main+0x23a>
 80009ae:	b672      	cpsid	i
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <main+0x238>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80009b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ba:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009be:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80009c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c4:	2321      	movs	r3, #33	; 0x21
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009c6:	4826      	ldr	r0, [pc, #152]	; (8000a60 <main+0x2e8>)
 80009c8:	a914      	add	r1, sp, #80	; 0x50
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80009ca:	2600      	movs	r6, #0
 80009cc:	2700      	movs	r7, #0
 80009ce:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80009d2:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009d6:	f003 ff75 	bl	80048c4 <HAL_TIMEx_ConfigBreakDeadTime>
 80009da:	4604      	mov	r4, r0
 80009dc:	b108      	cbz	r0, 80009e2 <main+0x26a>
 80009de:	b672      	cpsid	i
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <main+0x268>
  htim2.Instance = TIM2;
 80009e2:	4d20      	ldr	r5, [pc, #128]	; (8000a64 <main+0x2ec>)
  HAL_TIM_MspPostInit(&htim1);
 80009e4:	481e      	ldr	r0, [pc, #120]	; (8000a60 <main+0x2e8>)
 80009e6:	f001 fd27 	bl	8002438 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 80009ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009ee:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009f0:	4628      	mov	r0, r5
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 80009f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f6:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 80009fa:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  TIM_HallSensor_InitTypeDef sConfig = {0};
 80009fe:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000a02:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a06:	e9cd 4406 	strd	r4, r4, [sp, #24]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0a:	e9c5 4401 	strd	r4, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0e:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a10:	61ac      	str	r4, [r5, #24]
  htim2.Init.Period = M1_HALL_TIM_PERIOD;
 8000a12:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a14:	f003 f9d8 	bl	8003dc8 <HAL_TIM_Base_Init>
 8000a18:	b108      	cbz	r0, 8000a1e <main+0x2a6>
 8000a1a:	b672      	cpsid	i
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <main+0x2a4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a22:	a914      	add	r1, sp, #80	; 0x50
 8000a24:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a26:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a28:	f003 fc06 	bl	8004238 <HAL_TIM_ConfigClockSource>
 8000a2c:	b108      	cbz	r0, 8000a32 <main+0x2ba>
 8000a2e:	b672      	cpsid	i
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <main+0x2b8>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a32:	220b      	movs	r2, #11
 8000a34:	2300      	movs	r3, #0
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000a36:	a90c      	add	r1, sp, #48	; 0x30
 8000a38:	4628      	mov	r0, r5
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a3a:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 8000a3e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 8000a42:	f003 fea3 	bl	800478c <HAL_TIMEx_HallSensor_Init>
 8000a46:	b188      	cbz	r0, 8000a6c <main+0x2f4>
 8000a48:	b672      	cpsid	i
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <main+0x2d2>
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020400 	.word	0x40020400
 8000a54:	200005b0 	.word	0x200005b0
 8000a58:	0f000001 	.word	0x0f000001
 8000a5c:	40010000 	.word	0x40010000
 8000a60:	200005f8 	.word	0x200005f8
 8000a64:	20000640 	.word	0x20000640
 8000a68:	40012000 	.word	0x40012000
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000a6c:	2250      	movs	r2, #80	; 0x50
 8000a6e:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a70:	a906      	add	r1, sp, #24
 8000a72:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000a74:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a78:	f003 feec 	bl	8004854 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	b108      	cbz	r0, 8000a84 <main+0x30c>
 8000a80:	b672      	cpsid	i
  while (1)
 8000a82:	e7fe      	b.n	8000a82 <main+0x30a>
  huart2.Instance = USART2;
 8000a84:	485f      	ldr	r0, [pc, #380]	; (8000c04 <main+0x48c>)
  huart2.Init.BaudRate = 115200;
 8000a86:	4c60      	ldr	r4, [pc, #384]	; (8000c08 <main+0x490>)
 8000a88:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000a8c:	e9c0 4100 	strd	r4, r1, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a90:	210c      	movs	r1, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a92:	e9c0 2202 	strd	r2, r2, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a96:	e9c0 2104 	strd	r2, r1, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9a:	e9c0 2206 	strd	r2, r2, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9e:	f003 ff3f 	bl	8004920 <HAL_UART_Init>
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	b108      	cbz	r0, 8000aaa <main+0x332>
 8000aa6:	b672      	cpsid	i
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <main+0x330>
  MX_MotorControl_Init();
 8000aaa:	f001 fa6b 	bl	8001f84 <MX_MotorControl_Init>
  htim3.Instance = TIM3;
 8000aae:	4857      	ldr	r0, [pc, #348]	; (8000c0c <main+0x494>)
 8000ab0:	4b57      	ldr	r3, [pc, #348]	; (8000c10 <main+0x498>)
 8000ab2:	6003      	str	r3, [r0, #0]
  htim3.Init.Prescaler = 10000;
 8000ab4:	f242 7310 	movw	r3, #10000	; 0x2710
 8000ab8:	6043      	str	r3, [r0, #4]
  htim3.Init.Period = 2100;
 8000aba:	f640 0334 	movw	r3, #2100	; 0x834
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000abe:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8000ac2:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac6:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  htim3.Init.Period = 2100;
 8000aca:	e9c0 4302 	strd	r4, r3, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ace:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad0:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ad2:	f003 f979 	bl	8003dc8 <HAL_TIM_Base_Init>
 8000ad6:	b108      	cbz	r0, 8000adc <main+0x364>
 8000ad8:	b672      	cpsid	i
  while (1)
 8000ada:	e7fe      	b.n	8000ada <main+0x362>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000adc:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ae0:	484a      	ldr	r0, [pc, #296]	; (8000c0c <main+0x494>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae2:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ae4:	a914      	add	r1, sp, #80	; 0x50
 8000ae6:	f003 fba7 	bl	8004238 <HAL_TIM_ConfigClockSource>
 8000aea:	b108      	cbz	r0, 8000af0 <main+0x378>
 8000aec:	b672      	cpsid	i
  while (1)
 8000aee:	e7fe      	b.n	8000aee <main+0x376>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af0:	2600      	movs	r6, #0
 8000af2:	2700      	movs	r7, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000af4:	4845      	ldr	r0, [pc, #276]	; (8000c0c <main+0x494>)
 8000af6:	a90c      	add	r1, sp, #48	; 0x30
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af8:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000afc:	f003 feaa 	bl	8004854 <HAL_TIMEx_MasterConfigSynchronization>
 8000b00:	b108      	cbz	r0, 8000b06 <main+0x38e>
 8000b02:	b672      	cpsid	i
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <main+0x38c>
  htim4.Instance = TIM4;
 8000b06:	4d43      	ldr	r5, [pc, #268]	; (8000c14 <main+0x49c>)
  htim4.Init.Prescaler = 10000;
 8000b08:	4a43      	ldr	r2, [pc, #268]	; (8000c18 <main+0x4a0>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0a:	60a8      	str	r0, [r5, #8]
  htim4.Init.Prescaler = 10000;
 8000b0c:	f242 7310 	movw	r3, #10000	; 0x2710
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b10:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
 8000b14:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b18:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  htim4.Init.Prescaler = 10000;
 8000b1c:	e9c5 2300 	strd	r2, r3, [r5]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b20:	6128      	str	r0, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b22:	61a8      	str	r0, [r5, #24]
  htim4.Init.Period = 8400;
 8000b24:	f242 03d0 	movw	r3, #8400	; 0x20d0
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b28:	4628      	mov	r0, r5
  htim4.Init.Period = 8400;
 8000b2a:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b2c:	f003 f94c 	bl	8003dc8 <HAL_TIM_Base_Init>
 8000b30:	b108      	cbz	r0, 8000b36 <main+0x3be>
 8000b32:	b672      	cpsid	i
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <main+0x3bc>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b36:	a914      	add	r1, sp, #80	; 0x50
 8000b38:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3a:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b3c:	f003 fb7c 	bl	8004238 <HAL_TIM_ConfigClockSource>
 8000b40:	b108      	cbz	r0, 8000b46 <main+0x3ce>
 8000b42:	b672      	cpsid	i
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <main+0x3cc>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b46:	a90c      	add	r1, sp, #48	; 0x30
 8000b48:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4a:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b4e:	f003 fe81 	bl	8004854 <HAL_TIMEx_MasterConfigSynchronization>
 8000b52:	4603      	mov	r3, r0
 8000b54:	b108      	cbz	r0, 8000b5a <main+0x3e2>
 8000b56:	b672      	cpsid	i
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <main+0x3e0>
  huart1.Instance = USART1;
 8000b5a:	4c30      	ldr	r4, [pc, #192]	; (8000c1c <main+0x4a4>)
  huart1.Init.BaudRate = 115200;
 8000b5c:	4930      	ldr	r1, [pc, #192]	; (8000c20 <main+0x4a8>)
 8000b5e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b62:	e9c4 1200 	strd	r1, r2, [r4]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b66:	4620      	mov	r0, r4
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b68:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b6a:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b6e:	e9c4 3204 	strd	r3, r2, [r4, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b72:	e9c4 3306 	strd	r3, r3, [r4, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b76:	f003 fed3 	bl	8004920 <HAL_UART_Init>
 8000b7a:	4606      	mov	r6, r0
 8000b7c:	b108      	cbz	r0, 8000b82 <main+0x40a>
 8000b7e:	b672      	cpsid	i
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <main+0x408>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000b82:	4602      	mov	r2, r0
 8000b84:	2102      	movs	r1, #2
 8000b86:	2012      	movs	r0, #18
 8000b88:	f002 fc84 	bl	8003494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b8c:	2012      	movs	r0, #18
 8000b8e:	f002 fcbf 	bl	8003510 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000b92:	4632      	mov	r2, r6
 8000b94:	4631      	mov	r1, r6
 8000b96:	2019      	movs	r0, #25
 8000b98:	f002 fc7c 	bl	8003494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b9c:	2019      	movs	r0, #25
 8000b9e:	f002 fcb7 	bl	8003510 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8000ba2:	2104      	movs	r1, #4
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2018      	movs	r0, #24
 8000ba8:	f002 fc74 	bl	8003494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000bac:	2018      	movs	r0, #24
 8000bae:	f002 fcaf 	bl	8003510 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000bb2:	4632      	mov	r2, r6
 8000bb4:	2103      	movs	r1, #3
 8000bb6:	201c      	movs	r0, #28
 8000bb8:	f002 fc6c 	bl	8003494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bbc:	201c      	movs	r0, #28
 8000bbe:	f002 fca7 	bl	8003510 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000bc2:	2103      	movs	r1, #3
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2026      	movs	r0, #38	; 0x26
 8000bc8:	f002 fc64 	bl	8003494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bcc:	2026      	movs	r0, #38	; 0x26
 8000bce:	f002 fc9f 	bl	8003510 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim3);
 8000bd2:	480e      	ldr	r0, [pc, #56]	; (8000c0c <main+0x494>)
 8000bd4:	f003 f976 	bl	8003ec4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8000bd8:	4628      	mov	r0, r5
 8000bda:	f003 f973 	bl	8003ec4 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000bde:	4811      	ldr	r0, [pc, #68]	; (8000c24 <main+0x4ac>)
 8000be0:	4632      	mov	r2, r6
 8000be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be6:	f002 fe0d 	bl	8003804 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000bea:	480e      	ldr	r0, [pc, #56]	; (8000c24 <main+0x4ac>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bf2:	f002 fe07 	bl	8003804 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)RX_CMD_BUFFER, sizeof(RX_CMD_BUFFER));
 8000bf6:	490c      	ldr	r1, [pc, #48]	; (8000c28 <main+0x4b0>)
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	4620      	mov	r0, r4
 8000bfc:	f003 ffd8 	bl	8004bb0 <HAL_UART_Receive_IT>
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <main+0x488>
 8000c02:	bf00      	nop
 8000c04:	2000075c 	.word	0x2000075c
 8000c08:	40004400 	.word	0x40004400
 8000c0c:	20000688 	.word	0x20000688
 8000c10:	40000400 	.word	0x40000400
 8000c14:	200006d0 	.word	0x200006d0
 8000c18:	40000800 	.word	0x40000800
 8000c1c:	20000718 	.word	0x20000718
 8000c20:	40011000 	.word	0x40011000
 8000c24:	40020400 	.word	0x40020400
 8000c28:	2000059c 	.word	0x2000059c

08000c2c <MC_GetMecSpeedAverageMotor1>:
/**
 * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in the unit defined by #SPEED_UNIT
 */
__weak int16_t MC_GetMecSpeedAverageMotor1(void)
{
	return MCI_GetAvrgMecSpeedUnit( pMCI[M1] );
 8000c2c:	4b01      	ldr	r3, [pc, #4]	; (8000c34 <MC_GetMecSpeedAverageMotor1+0x8>)
 8000c2e:	6818      	ldr	r0, [r3, #0]
 8000c30:	f000 b8aa 	b.w	8000d88 <MCI_GetAvrgMecSpeedUnit>
 8000c34:	200008b8 	.word	0x200008b8

08000c38 <MC_GetPhaseCurrentAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
{
	return MCI_GetPhaseCurrentAmplitude( pMCI[M1] );
 8000c38:	4b01      	ldr	r3, [pc, #4]	; (8000c40 <MC_GetPhaseCurrentAmplitudeMotor1+0x8>)
 8000c3a:	6818      	ldr	r0, [r3, #0]
 8000c3c:	f000 b908 	b.w	8000e50 <MCI_GetPhaseCurrentAmplitude>
 8000c40:	200008b8 	.word	0x200008b8

08000c44 <MC_GetPhaseVoltageAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseVoltageAmplitudeMotor1(void)
{
	return MCI_GetPhaseVoltageAmplitude( pMCI[M1] );
 8000c44:	4b01      	ldr	r3, [pc, #4]	; (8000c4c <MC_GetPhaseVoltageAmplitudeMotor1+0x8>)
 8000c46:	6818      	ldr	r0, [r3, #0]
 8000c48:	f000 b916 	b.w	8000e78 <MCI_GetPhaseVoltageAmplitude>
 8000c4c:	200008b8 	.word	0x200008b8

08000c50 <MC_GetCurrentFaultsMotor1>:
 * See \link Fault_generation_error_codes Motor Control Faults\endlink for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetCurrentFaultsMotor1(void)
{
	return MCI_GetCurrentFaults( pMCI[M1] );
 8000c50:	4b01      	ldr	r3, [pc, #4]	; (8000c58 <MC_GetCurrentFaultsMotor1+0x8>)
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	f000 b884 	b.w	8000d60 <MCI_GetCurrentFaults>
 8000c58:	200008b8 	.word	0x200008b8

08000c5c <MCI_Init>:
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000c5c:	f04f 0c00 	mov.w	ip, #0
  pHandle->pSTC = pSTC;
 8000c60:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pFOCVars = pFOCVars;
 8000c64:	6083      	str	r3, [r0, #8]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000c66:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8000c6a:	f8c0 c00e 	str.w	ip, [r0, #14]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8000c6e:	f8a0 c016 	strh.w	ip, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000c72:	f880 c018 	strb.w	ip, [r0, #24]
}
 8000c76:	4770      	bx	lr

08000c78 <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000c78:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c7c:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000c80:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8000c84:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8000c86:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c88:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8000c8a:	4770      	bx	lr

08000c8c <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000c8c:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c90:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000c92:	f880 c00c 	strb.w	ip, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
 8000c96:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8000c98:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c9a:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000ca0:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000ca2:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000ca4:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000ca6:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.q = Iqdref.q;
 8000ca8:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cac:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000cae:	b002      	add	sp, #8
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000cb4:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000cb6:	2103      	movs	r1, #3
{
 8000cb8:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000cba:	6800      	ldr	r0, [r0, #0]
 8000cbc:	f005 ff80 	bl	8006bc0 <STM_NextState>

  if ( RetVal == true )
 8000cc0:	b108      	cbz	r0, 8000cc6 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000cc6:	bd10      	pop	{r4, pc}

08000cc8 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000cc8:	6800      	ldr	r0, [r0, #0]
 8000cca:	2107      	movs	r1, #7
 8000ccc:	f005 bf78 	b.w	8006bc0 <STM_NextState>

08000cd0 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000cd0:	6800      	ldr	r0, [r0, #0]
 8000cd2:	f005 bfeb 	b.w	8006cac <STM_FaultAcknowledged>
 8000cd6:	bf00      	nop

08000cd8 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000cd8:	6800      	ldr	r0, [r0, #0]
 8000cda:	2101      	movs	r1, #1
 8000cdc:	f005 bf70 	b.w	8006bc0 <STM_NextState>

08000ce0 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000ce0:	b178      	cbz	r0, 8000d02 <MCI_ExecBufferedCommands+0x22>
{
 8000ce2:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000ce4:	7e03      	ldrb	r3, [r0, #24]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	4604      	mov	r4, r0
 8000cea:	d000      	beq.n	8000cee <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000cec:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8000cee:	7b01      	ldrb	r1, [r0, #12]
 8000cf0:	2902      	cmp	r1, #2
 8000cf2:	d020      	beq.n	8000d36 <MCI_ExecBufferedCommands+0x56>
 8000cf4:	2903      	cmp	r1, #3
 8000cf6:	d005      	beq.n	8000d04 <MCI_ExecBufferedCommands+0x24>
 8000cf8:	2901      	cmp	r1, #1
 8000cfa:	d00c      	beq.n	8000d16 <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	7623      	strb	r3, [r4, #24]
}
 8000d00:	bd10      	pop	{r4, pc}
 8000d02:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000d04:	6882      	ldr	r2, [r0, #8]
 8000d06:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000d0a:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8000d0e:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000d10:	2302      	movs	r3, #2
 8000d12:	7623      	strb	r3, [r4, #24]
}
 8000d14:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000d16:	6883      	ldr	r3, [r0, #8]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000d1e:	6840      	ldr	r0, [r0, #4]
 8000d20:	f005 fe8a 	bl	8006a38 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000d24:	8ae2      	ldrh	r2, [r4, #22]
 8000d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d2a:	6860      	ldr	r0, [r4, #4]
 8000d2c:	f005 fe88 	bl	8006a40 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000d30:	2800      	cmp	r0, #0
 8000d32:	d0e3      	beq.n	8000cfc <MCI_ExecBufferedCommands+0x1c>
 8000d34:	e7ec      	b.n	8000d10 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000d36:	6883      	ldr	r3, [r0, #8]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000d3e:	6840      	ldr	r0, [r0, #4]
 8000d40:	f005 fe7a 	bl	8006a38 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000d44:	8ae2      	ldrh	r2, [r4, #22]
 8000d46:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8000d4a:	6860      	ldr	r0, [r4, #4]
 8000d4c:	f005 fe78 	bl	8006a40 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d0d3      	beq.n	8000cfc <MCI_ExecBufferedCommands+0x1c>
 8000d54:	e7dc      	b.n	8000d10 <MCI_ExecBufferedCommands+0x30>
 8000d56:	bf00      	nop

08000d58 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000d58:	6800      	ldr	r0, [r0, #0]
 8000d5a:	f005 bfa5 	b.w	8006ca8 <STM_GetState>
 8000d5e:	bf00      	nop

08000d60 <MCI_GetCurrentFaults>:
  * @retval uint16_t  16 bit fields with information about about currently
  *         present faults.
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults( MCI_Handle_t * pHandle )
{
 8000d60:	b508      	push	{r3, lr}
  return ( uint16_t )( STM_GetFaultState( pHandle->pSTM ) >> 16 );
 8000d62:	6800      	ldr	r0, [r0, #0]
 8000d64:	f005 ffae 	bl	8006cc4 <STM_GetFaultState>
}
 8000d68:	0c00      	lsrs	r0, r0, #16
 8000d6a:	bd08      	pop	{r3, pc}

08000d6c <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000d6c:	7e40      	ldrb	r0, [r0, #25]
 8000d6e:	4770      	bx	lr

08000d70 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000d70:	7b03      	ldrb	r3, [r0, #12]
 8000d72:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000d74:	bf0c      	ite	eq
 8000d76:	f9b0 000e 	ldrsheq.w	r0, [r0, #14]
  int16_t hRetVal = 0;
 8000d7a:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop

08000d80 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000d80:	6840      	ldr	r0, [r0, #4]
 8000d82:	f005 bea5 	b.w	8006ad0 <STC_StopRamp>
 8000d86:	bf00      	nop

08000d88 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000d88:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000d8a:	6840      	ldr	r0, [r0, #4]
 8000d8c:	f005 fe3a 	bl	8006a04 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000d90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000d94:	f005 bdd8 	b.w	8006948 <SPD_GetAvrgMecSpeedUnit>

08000d98 <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000d98:	6840      	ldr	r0, [r0, #4]
 8000d9a:	f005 be3d 	b.w	8006a18 <STC_GetMecSpeedRefUnit>
 8000d9e:	bf00      	nop

08000da0 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000da0:	6882      	ldr	r2, [r0, #8]
 8000da2:	6810      	ldr	r0, [r2, #0]
 8000da4:	2300      	movs	r3, #0
 8000da6:	b282      	uxth	r2, r0
 8000da8:	f362 030f 	bfi	r3, r2, #0, #16
 8000dac:	0c00      	lsrs	r0, r0, #16
 8000dae:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000db2:	b082      	sub	sp, #8
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	b002      	add	sp, #8
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000dbc:	6882      	ldr	r2, [r0, #8]
 8000dbe:	6850      	ldr	r0, [r2, #4]
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	b282      	uxth	r2, r0
 8000dc4:	f362 030f 	bfi	r3, r2, #0, #16
 8000dc8:	0c00      	lsrs	r0, r0, #16
 8000dca:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000dce:	b082      	sub	sp, #8
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	b002      	add	sp, #8
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000dd8:	6882      	ldr	r2, [r0, #8]
 8000dda:	68d0      	ldr	r0, [r2, #12]
 8000ddc:	2300      	movs	r3, #0
 8000dde:	b282      	uxth	r2, r0
 8000de0:	f362 030f 	bfi	r3, r2, #0, #16
 8000de4:	0c00      	lsrs	r0, r0, #16
 8000de6:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000dea:	b082      	sub	sp, #8
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	b002      	add	sp, #8
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000df4:	6882      	ldr	r2, [r0, #8]
 8000df6:	6910      	ldr	r0, [r2, #16]
 8000df8:	2300      	movs	r3, #0
 8000dfa:	b282      	uxth	r2, r0
 8000dfc:	f362 030f 	bfi	r3, r2, #0, #16
 8000e00:	0c00      	lsrs	r0, r0, #16
 8000e02:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e06:	b082      	sub	sp, #8
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	b002      	add	sp, #8
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000e10:	6882      	ldr	r2, [r0, #8]
 8000e12:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8000e16:	2300      	movs	r3, #0
 8000e18:	b282      	uxth	r2, r0
 8000e1a:	f362 030f 	bfi	r3, r2, #0, #16
 8000e1e:	0c00      	lsrs	r0, r0, #16
 8000e20:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e24:	b082      	sub	sp, #8
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	b002      	add	sp, #8
 8000e2a:	4770      	bx	lr

08000e2c <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000e2c:	6882      	ldr	r2, [r0, #8]
 8000e2e:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8000e32:	2300      	movs	r3, #0
 8000e34:	b282      	uxth	r2, r0
 8000e36:	f362 030f 	bfi	r3, r2, #0, #16
 8000e3a:	0c00      	lsrs	r0, r0, #16
 8000e3c:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e40:	b082      	sub	sp, #8
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	b002      	add	sp, #8
 8000e46:	4770      	bx	lr

08000e48 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000e48:	6883      	ldr	r3, [r0, #8]
}
 8000e4a:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000e4e:	4770      	bx	lr

08000e50 <MCI_GetPhaseCurrentAmplitude>:
__weak int16_t MCI_GetPhaseCurrentAmplitude( MCI_Handle_t * pHandle )
{
  alphabeta_t Local_Curr;
  int32_t wAux1, wAux2;

  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8000e50:	6882      	ldr	r2, [r0, #8]
{
 8000e52:	b508      	push	{r3, lr}
  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8000e54:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8000e58:	f9b2 0004 	ldrsh.w	r0, [r2, #4]
  wAux1 = ( int32_t )( Local_Curr.alpha ) * Local_Curr.alpha;
  wAux2 = ( int32_t )( Local_Curr.beta ) * Local_Curr.beta;
 8000e5c:	fb03 f303 	mul.w	r3, r3, r3

  wAux1 += wAux2;
  wAux1 = MCM_Sqrt( wAux1 );
 8000e60:	fb00 3000 	mla	r0, r0, r0, r3
 8000e64:	f000 f90a 	bl	800107c <MCM_Sqrt>
  if ( wAux1 > INT16_MAX )
  {
    wAux1 = ( int32_t ) INT16_MAX;
  }

  return ( ( int16_t )wAux1 );
 8000e68:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000e6c:	4298      	cmp	r0, r3
 8000e6e:	bfa8      	it	ge
 8000e70:	4618      	movge	r0, r3
}
 8000e72:	b200      	sxth	r0, r0
 8000e74:	bd08      	pop	{r3, pc}
 8000e76:	bf00      	nop

08000e78 <MCI_GetPhaseVoltageAmplitude>:
__weak int16_t MCI_GetPhaseVoltageAmplitude( MCI_Handle_t * pHandle )
{
  alphabeta_t Local_Voltage;
  int32_t wAux1, wAux2;

  Local_Voltage = pHandle->pFOCVars->Valphabeta;
 8000e78:	6882      	ldr	r2, [r0, #8]
{
 8000e7a:	b508      	push	{r3, lr}
  Local_Voltage = pHandle->pFOCVars->Valphabeta;
 8000e7c:	f9b2 301c 	ldrsh.w	r3, [r2, #28]
 8000e80:	f9b2 001a 	ldrsh.w	r0, [r2, #26]
  wAux1 = ( int32_t )( Local_Voltage.alpha ) * Local_Voltage.alpha;
  wAux2 = ( int32_t )( Local_Voltage.beta ) * Local_Voltage.beta;
 8000e84:	fb03 f303 	mul.w	r3, r3, r3

  wAux1 += wAux2;
  wAux1 = MCM_Sqrt( wAux1 );
 8000e88:	fb00 3000 	mla	r0, r0, r0, r3
 8000e8c:	f000 f8f6 	bl	800107c <MCM_Sqrt>
  if ( wAux1 > INT16_MAX )
  {
    wAux1 = ( int32_t ) INT16_MAX;
  }

  return ( ( int16_t ) wAux1 );
 8000e90:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000e94:	4298      	cmp	r0, r3
 8000e96:	bfa8      	it	ge
 8000e98:	4618      	movge	r0, r3
}
 8000e9a:	b200      	sxth	r0, r0
 8000e9c:	bd08      	pop	{r3, pc}
 8000e9e:	bf00      	nop

08000ea0 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	6882      	ldr	r2, [r0, #8]
 8000ea4:	f361 030f 	bfi	r3, r1, #0, #16
 8000ea8:	f361 431f 	bfi	r3, r1, #16, #16
 8000eac:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000eb4:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000eb6:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000eba:	f005 fe49 	bl	8006b50 <STC_GetDefaultIqdref>
 8000ebe:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000ec2:	8220      	strh	r0, [r4, #16]
 8000ec4:	8263      	strh	r3, [r4, #18]
}
 8000ec6:	bd10      	pop	{r4, pc}

08000ec8 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000ec8:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000ecc:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000ece:	fb13 f201 	smulbb	r2, r3, r1
{
 8000ed2:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000ed6:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000eda:	4250      	negs	r0, r2
 8000edc:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000ee0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8000ee4:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8000ee6:	da05      	bge.n	8000ef4 <MCM_Clarke+0x2c>
 8000ee8:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000eea:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8000eee:	da0c      	bge.n	8000f0a <MCM_Clarke+0x42>
 8000ef0:	4a09      	ldr	r2, [pc, #36]	; (8000f18 <MCM_Clarke+0x50>)
 8000ef2:	e001      	b.n	8000ef8 <MCM_Clarke+0x30>
 8000ef4:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	2000      	movs	r0, #0
 8000efc:	f363 000f 	bfi	r0, r3, #0, #16
 8000f00:	b293      	uxth	r3, r2
 8000f02:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000f06:	b004      	add	sp, #16
 8000f08:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000f0a:	4803      	ldr	r0, [pc, #12]	; (8000f18 <MCM_Clarke+0x50>)
 8000f0c:	b20a      	sxth	r2, r1
 8000f0e:	4282      	cmp	r2, r0
 8000f10:	bfb8      	it	lt
 8000f12:	4602      	movlt	r2, r0
 8000f14:	e7f0      	b.n	8000ef8 <MCM_Clarke+0x30>
 8000f16:	bf00      	nop
 8000f18:	ffff8001 	.word	0xffff8001

08000f1c <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8000f1c:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8000f20:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000f24:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8000f28:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 8000f2c:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000f2e:	d028      	beq.n	8000f82 <MCM_Trig_Functions+0x66>
 8000f30:	f04f 0300 	mov.w	r3, #0
 8000f34:	461a      	mov	r2, r3
 8000f36:	d816      	bhi.n	8000f66 <MCM_Trig_Functions+0x4a>
 8000f38:	b361      	cbz	r1, 8000f94 <MCM_Trig_Functions+0x78>
 8000f3a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000f3e:	d109      	bne.n	8000f54 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f40:	b2c0      	uxtb	r0, r0
 8000f42:	43c2      	mvns	r2, r0
 8000f44:	491a      	ldr	r1, [pc, #104]	; (8000fb0 <MCM_Trig_Functions+0x94>)
 8000f46:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f48:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f4c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000f50:	4252      	negs	r2, r2
 8000f52:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	2000      	movs	r0, #0
 8000f58:	f363 000f 	bfi	r0, r3, #0, #16
 8000f5c:	b292      	uxth	r2, r2
 8000f5e:	f362 401f 	bfi	r0, r2, #16, #16
}
 8000f62:	b002      	add	sp, #8
 8000f64:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000f66:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8000f6a:	d1f3      	bne.n	8000f54 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f6c:	4910      	ldr	r1, [pc, #64]	; (8000fb0 <MCM_Trig_Functions+0x94>)
 8000f6e:	b2c0      	uxtb	r0, r0
 8000f70:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f72:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f76:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f78:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f7a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f7e:	b21b      	sxth	r3, r3
      break;
 8000f80:	e7e8      	b.n	8000f54 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f82:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f84:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f86:	490a      	ldr	r1, [pc, #40]	; (8000fb0 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f88:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f8a:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f8e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 8000f92:	e7df      	b.n	8000f54 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f94:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f96:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f98:	4905      	ldr	r1, [pc, #20]	; (8000fb0 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000f9a:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000f9c:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000fa0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000fa4:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000fa6:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000fa8:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000faa:	b21b      	sxth	r3, r3
      break;
 8000fac:	e7d2      	b.n	8000f54 <MCM_Trig_Functions+0x38>
 8000fae:	bf00      	nop
 8000fb0:	08007024 	.word	0x08007024

08000fb4 <MCM_Park>:
{
 8000fb4:	b530      	push	{r4, r5, lr}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	141c      	asrs	r4, r3, #16
{
 8000fc0:	9301      	str	r3, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000fc2:	f7ff ffab 	bl	8000f1c <MCM_Trig_Functions>
 8000fc6:	b22d      	sxth	r5, r5
 8000fc8:	fa0f fc80 	sxth.w	ip, r0
 8000fcc:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000fce:	fb05 f10c 	mul.w	r1, r5, ip
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000fd2:	fb04 1113 	mls	r1, r4, r3, r1
  if ( wqd_tmp > INT16_MAX )
 8000fd6:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8000fda:	da05      	bge.n	8000fe8 <MCM_Park+0x34>
 8000fdc:	13ca      	asrs	r2, r1, #15
  else if ( wqd_tmp < ( -32768 ) )
 8000fde:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8000fe2:	da22      	bge.n	800102a <MCM_Park+0x76>
 8000fe4:	4914      	ldr	r1, [pc, #80]	; (8001038 <MCM_Park+0x84>)
 8000fe6:	e001      	b.n	8000fec <MCM_Park+0x38>
 8000fe8:	f647 71ff 	movw	r1, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000fec:	fb0c f404 	mul.w	r4, ip, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000ff0:	fb05 4403 	mla	r4, r5, r3, r4
  if ( wqd_tmp > INT16_MAX )
 8000ff4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000ff8:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 8000ffc:	da04      	bge.n	8001008 <MCM_Park+0x54>
  else if ( wqd_tmp < ( -32768 ) )
 8000ffe:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001002:	da0c      	bge.n	800101e <MCM_Park+0x6a>
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MCM_Park+0x84>)
 8001006:	e001      	b.n	800100c <MCM_Park+0x58>
 8001008:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 800100c:	b28a      	uxth	r2, r1
 800100e:	2000      	movs	r0, #0
 8001010:	f362 000f 	bfi	r0, r2, #0, #16
 8001014:	b29b      	uxth	r3, r3
 8001016:	f363 401f 	bfi	r0, r3, #16, #16
}
 800101a:	b005      	add	sp, #20
 800101c:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 800101e:	4806      	ldr	r0, [pc, #24]	; (8001038 <MCM_Park+0x84>)
 8001020:	b213      	sxth	r3, r2
 8001022:	4283      	cmp	r3, r0
 8001024:	bfb8      	it	lt
 8001026:	4603      	movlt	r3, r0
 8001028:	e7f0      	b.n	800100c <MCM_Park+0x58>
    hqd_tmp = ( int16_t )( wqd_tmp );
 800102a:	4903      	ldr	r1, [pc, #12]	; (8001038 <MCM_Park+0x84>)
 800102c:	b212      	sxth	r2, r2
 800102e:	4291      	cmp	r1, r2
 8001030:	bfb8      	it	lt
 8001032:	4611      	movlt	r1, r2
 8001034:	e7da      	b.n	8000fec <MCM_Park+0x38>
 8001036:	bf00      	nop
 8001038:	ffff8001 	.word	0xffff8001

0800103c <MCM_Rev_Park>:
{
 800103c:	b530      	push	{r4, r5, lr}
 800103e:	b085      	sub	sp, #20
 8001040:	4604      	mov	r4, r0
 8001042:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001044:	4608      	mov	r0, r1
{
 8001046:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001048:	f7ff ff68 	bl	8000f1c <MCM_Trig_Functions>
 800104c:	1424      	asrs	r4, r4, #16
 800104e:	1402      	asrs	r2, r0, #16
 8001050:	b22d      	sxth	r5, r5
 8001052:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8001054:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8001058:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 800105c:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8001060:	fb05 4412 	mls	r4, r5, r2, r4
  return ( Output );
 8001064:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001068:	2000      	movs	r0, #0
 800106a:	f363 000f 	bfi	r0, r3, #0, #16
 800106e:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001072:	f364 401f 	bfi	r0, r4, #16, #16
}
 8001076:	b005      	add	sp, #20
 8001078:	bd30      	pop	{r4, r5, pc}
 800107a:	bf00      	nop

0800107c <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt( int32_t wInput )
{
  int32_t wtemprootnew;

  if ( wInput > 0 )
 800107c:	1e03      	subs	r3, r0, #0
 800107e:	dd32      	ble.n	80010e6 <MCM_Sqrt+0x6a>
    {
      wtemproot = ( int32_t )128;
    }
    else
    {
      wtemproot = ( int32_t )8192;
 8001080:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001084:	bfd4      	ite	le
 8001086:	2080      	movle	r0, #128	; 0x80
 8001088:	f44f 5000 	movgt.w	r0, #8192	; 0x2000
    }

    do
    {
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800108c:	fb93 f2f0 	sdiv	r2, r3, r0
 8001090:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 8001092:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8001096:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 800109a:	d025      	beq.n	80010e8 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 800109c:	fb93 f2f1 	sdiv	r2, r3, r1
 80010a0:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 80010a2:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80010a6:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80010aa:	d01d      	beq.n	80010e8 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80010ac:	fb93 f2f0 	sdiv	r2, r3, r0
 80010b0:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 80010b2:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80010b6:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80010ba:	d015      	beq.n	80010e8 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80010bc:	fb93 f2f1 	sdiv	r2, r3, r1
 80010c0:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 80010c2:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80010c6:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80010ca:	d00d      	beq.n	80010e8 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80010cc:	fb93 f2f0 	sdiv	r2, r3, r0
 80010d0:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 80010d2:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80010d6:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 80010da:	d005      	beq.n	80010e8 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 80010dc:	fb93 f0f1 	sdiv	r0, r3, r1
 80010e0:	4408      	add	r0, r1
 80010e2:	1040      	asrs	r0, r0, #1
      if ( wtemprootnew == wtemproot )
 80010e4:	4770      	bx	lr
    while ( biter < 6u );

  }
  else
  {
    wtemprootnew = ( int32_t )0;
 80010e6:	2000      	movs	r0, #0
  }

  return ( wtemprootnew );
}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <FOC_Clear>:
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 80010ec:	2226      	movs	r2, #38	; 0x26
{
 80010ee:	b538      	push	{r3, r4, r5, lr}
 80010f0:	fb00 f202 	mul.w	r2, r0, r2
 80010f4:	4b15      	ldr	r3, [pc, #84]	; (800114c <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 80010f6:	2400      	movs	r4, #0
 80010f8:	509c      	str	r4, [r3, r2]
{
 80010fa:	4605      	mov	r5, r0
 80010fc:	f102 0108 	add.w	r1, r2, #8
 8001100:	1898      	adds	r0, r3, r2
 8001102:	3210      	adds	r2, #16
 8001104:	4419      	add	r1, r3
 8001106:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001108:	4a11      	ldr	r2, [pc, #68]	; (8001150 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 800110a:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800110c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001110:	604c      	str	r4, [r1, #4]
 8001112:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001114:	f8c3 4006 	str.w	r4, [r3, #6]
 8001118:	f8c3 400a 	str.w	r4, [r3, #10]
 800111c:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001120:	4621      	mov	r1, r4
 8001122:	f004 fc6b 	bl	80059fc <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <FOC_Clear+0x68>)
 8001128:	4621      	mov	r1, r4
 800112a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800112e:	f004 fc65 	bl	80059fc <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <FOC_Clear+0x6c>)
 8001134:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001138:	f005 fc66 	bl	8006a08 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <FOC_Clear+0x70>)
 800113e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001146:	f004 be73 	b.w	8005e30 <PWMC_SwitchOffPWM>
 800114a:	bf00      	nop
 800114c:	200007dc 	.word	0x200007dc
 8001150:	20000898 	.word	0x20000898
 8001154:	20000894 	.word	0x20000894
 8001158:	200008a4 	.word	0x200008a4
 800115c:	200008ac 	.word	0x200008ac

08001160 <MCboot>:
{
 8001160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 8001164:	4e5b      	ldr	r6, [pc, #364]	; (80012d4 <MCboot+0x174>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001166:	4d5c      	ldr	r5, [pc, #368]	; (80012d8 <MCboot+0x178>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001168:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8001320 <MCboot+0x1c0>
  HALL_Init (&HALL_M1);
 800116c:	4f5b      	ldr	r7, [pc, #364]	; (80012dc <MCboot+0x17c>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 800116e:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8001324 <MCboot+0x1c4>
  PID_HandleInit(&PIDIqHandle_M1);
 8001172:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8001328 <MCboot+0x1c8>
  PID_HandleInit(&PIDIdHandle_M1);
 8001176:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 800132c <MCboot+0x1cc>
{
 800117a:	b087      	sub	sp, #28
 800117c:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 800117e:	4630      	mov	r0, r6
{
 8001180:	e9cd 3101 	strd	r3, r1, [sp, #4]
  STM_Init(&STM[M1]);
 8001184:	f005 fcfa 	bl	8006b7c <STM_Init>
  bMCBootCompleted = 0;
 8001188:	4a55      	ldr	r2, [pc, #340]	; (80012e0 <MCboot+0x180>)
  pCLM[M1] = &CircleLimitationM1;
 800118a:	4b56      	ldr	r3, [pc, #344]	; (80012e4 <MCboot+0x184>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800118c:	4856      	ldr	r0, [pc, #344]	; (80012e8 <MCboot+0x188>)
 800118e:	6028      	str	r0, [r5, #0]
  bMCBootCompleted = 0;
 8001190:	2400      	movs	r4, #0
 8001192:	7014      	strb	r4, [r2, #0]
  pCLM[M1] = &CircleLimitationM1;
 8001194:	4a55      	ldr	r2, [pc, #340]	; (80012ec <MCboot+0x18c>)
 8001196:	601a      	str	r2, [r3, #0]
  R3_1_Init(&PWM_Handle_M1);
 8001198:	f005 f8d0 	bl	800633c <R3_1_Init>
  pSTC[M1] = &SpeednTorqCtrlM1;
 800119c:	4d54      	ldr	r5, [pc, #336]	; (80012f0 <MCboot+0x190>)
  startTimers();
 800119e:	f004 fcb5 	bl	8005b0c <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 80011a2:	4640      	mov	r0, r8
 80011a4:	f004 fc16 	bl	80059d4 <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 80011a8:	4b52      	ldr	r3, [pc, #328]	; (80012f4 <MCboot+0x194>)
 80011aa:	602b      	str	r3, [r5, #0]
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 80011ac:	f8c9 8000 	str.w	r8, [r9]
  HALL_Init (&HALL_M1);
 80011b0:	4638      	mov	r0, r7
 80011b2:	f003 ff89 	bl	80050c8 <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 80011b6:	463a      	mov	r2, r7
 80011b8:	f8d9 1000 	ldr.w	r1, [r9]
 80011bc:	6828      	ldr	r0, [r5, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 80011be:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8001330 <MCboot+0x1d0>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 80011c2:	f005 fc09 	bl	80069d8 <STC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 80011c6:	4658      	mov	r0, fp
 80011c8:	f004 fc04 	bl	80059d4 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 80011cc:	4650      	mov	r0, sl
 80011ce:	f004 fc01 	bl	80059d4 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 80011d2:	4949      	ldr	r1, [pc, #292]	; (80012f8 <MCboot+0x198>)
  pPIDId[M1] = &PIDIdHandle_M1;
 80011d4:	4b49      	ldr	r3, [pc, #292]	; (80012fc <MCboot+0x19c>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 80011d6:	f8c1 b000 	str.w	fp, [r1]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 80011da:	4849      	ldr	r0, [pc, #292]	; (8001300 <MCboot+0x1a0>)
  pPIDId[M1] = &PIDIdHandle_M1;
 80011dc:	f8c3 a000 	str.w	sl, [r3]
  NTC_Init(&TempSensorParamsM1);
 80011e0:	f8df b150 	ldr.w	fp, [pc, #336]	; 8001334 <MCboot+0x1d4>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 80011e4:	f8c8 0000 	str.w	r0, [r8]
  RVBS_Init(pBusSensorM1);
 80011e8:	f005 fb54 	bl	8006894 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80011ec:	4a45      	ldr	r2, [pc, #276]	; (8001304 <MCboot+0x1a4>)
 80011ee:	4b46      	ldr	r3, [pc, #280]	; (8001308 <MCboot+0x1a8>)
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 80011f0:	f8df a144 	ldr.w	sl, [pc, #324]	; 8001338 <MCboot+0x1d8>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 80011f4:	6013      	str	r3, [r2, #0]
  NTC_Init(&TempSensorParamsM1);
 80011f6:	4658      	mov	r0, fp
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 80011f8:	f8d8 2000 	ldr.w	r2, [r8]
 80011fc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001200:	f8c3 a10c 	str.w	sl, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8001204:	f004 fba2 	bl	800594c <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8001208:	4940      	ldr	r1, [pc, #256]	; (800130c <MCboot+0x1ac>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 800120a:	4b41      	ldr	r3, [pc, #260]	; (8001310 <MCboot+0x1b0>)
 800120c:	4841      	ldr	r0, [pc, #260]	; (8001314 <MCboot+0x1b4>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 800120e:	f8c1 b000 	str.w	fp, [r1]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001212:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 8001214:	f005 fb8c 	bl	8006930 <REMNG_Init>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001218:	f04f 0b01 	mov.w	fp, #1
  FOC_Clear(M1);
 800121c:	4620      	mov	r0, r4
 800121e:	f7ff ff65 	bl	80010ec <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8001222:	f88a b024 	strb.w	fp, [sl, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001226:	6828      	ldr	r0, [r5, #0]
 8001228:	f005 fc92 	bl	8006b50 <STC_GetDefaultIqdref>
 800122c:	f8ca 0010 	str.w	r0, [sl, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001230:	6828      	ldr	r0, [r5, #0]
 8001232:	f005 fc8d 	bl	8006b50 <STC_GetDefaultIqdref>
 8001236:	f3c0 400f 	ubfx	r0, r0, #16, #16
 800123a:	f8aa 0014 	strh.w	r0, [sl, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800123e:	4653      	mov	r3, sl
  oMCInterface[M1] = & Mci[M1];
 8001240:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 800133c <MCboot+0x1dc>
 8001244:	4834      	ldr	r0, [pc, #208]	; (8001318 <MCboot+0x1b8>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8001246:	682a      	ldr	r2, [r5, #0]
  oMCInterface[M1] = & Mci[M1];
 8001248:	f8ca 0000 	str.w	r0, [sl]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 800124c:	4631      	mov	r1, r6
 800124e:	f7ff fd05 	bl	8000c5c <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8001252:	f8da 3000 	ldr.w	r3, [sl]
 8001256:	6828      	ldr	r0, [r5, #0]
 8001258:	9303      	str	r3, [sp, #12]
 800125a:	f005 fc6f 	bl	8006b3c <STC_GetMecSpeedRefUnitDefault>
 800125e:	9b03      	ldr	r3, [sp, #12]
 8001260:	4601      	mov	r1, r0
 8001262:	4622      	mov	r2, r4
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fd07 	bl	8000c78 <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 800126a:	9801      	ldr	r0, [sp, #4]
 800126c:	f8da 3000 	ldr.w	r3, [sl]
 8001270:	6003      	str	r3, [r0, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <MCboot+0x178>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001274:	4820      	ldr	r0, [pc, #128]	; (80012f8 <MCboot+0x198>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001276:	6819      	ldr	r1, [r3, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001278:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 800127a:	4b22      	ldr	r3, [pc, #136]	; (8001304 <MCboot+0x1a4>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 800127c:	4d23      	ldr	r5, [pc, #140]	; (800130c <MCboot+0x1ac>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 800127e:	f8d0 c000 	ldr.w	ip, [r0]
  MCT[M1].pPIDId = pPIDId[M1];
 8001282:	481e      	ldr	r0, [pc, #120]	; (80012fc <MCboot+0x19c>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001284:	f8d9 e000 	ldr.w	lr, [r9]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001288:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 800128a:	f8d3 9000 	ldr.w	r9, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 800128e:	f8d8 8000 	ldr.w	r8, [r8]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <MCboot+0x1bc>)
  MCT[M1].pPIDId = pPIDId[M1];
 8001294:	6800      	ldr	r0, [r0, #0]
 8001296:	6098      	str	r0, [r3, #8]
  MCT[M1].pStateMachine = &STM[M1];
 8001298:	e9c3 2609 	strd	r2, r6, [r3, #36]	; 0x24
  MCT[M1].pPIDIq = pPIDIq[M1];
 800129c:	e9c3 ec00 	strd	lr, ip, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 80012a0:	e9c3 580b 	strd	r5, r8, [r3, #44]	; 0x2c
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 80012a4:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 80012a8:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 80012ac:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 80012b0:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  bMCBootCompleted = 1;
 80012b4:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <MCboot+0x180>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 80012b6:	6119      	str	r1, [r3, #16]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 80012b8:	619f      	str	r7, [r3, #24]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 80012ba:	f8c3 903c 	str.w	r9, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 80012be:	60dc      	str	r4, [r3, #12]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 80012c0:	615c      	str	r4, [r3, #20]
  MCT[M1].pOTT = MC_NULL;
 80012c2:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 80012c4:	9902      	ldr	r1, [sp, #8]
 80012c6:	600b      	str	r3, [r1, #0]
  bMCBootCompleted = 1;
 80012c8:	f882 b000 	strb.w	fp, [r2]
}
 80012cc:	b007      	add	sp, #28
 80012ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012d2:	bf00      	nop
 80012d4:	20000874 	.word	0x20000874
 80012d8:	200008ac 	.word	0x200008ac
 80012dc:	200000b8 	.word	0x200000b8
 80012e0:	2000087a 	.word	0x2000087a
 80012e4:	2000088c 	.word	0x2000088c
 80012e8:	20000318 	.word	0x20000318
 80012ec:	20000004 	.word	0x20000004
 80012f0:	200008a4 	.word	0x200008a4
 80012f4:	200003d4 	.word	0x200003d4
 80012f8:	20000898 	.word	0x20000898
 80012fc:	20000894 	.word	0x20000894
 8001300:	200003ac 	.word	0x200003ac
 8001304:	20000890 	.word	0x20000890
 8001308:	20000204 	.word	0x20000204
 800130c:	200008a8 	.word	0x200008a8
 8001310:	200008a0 	.word	0x200008a0
 8001314:	20000394 	.word	0x20000394
 8001318:	20000858 	.word	0x20000858
 800131c:	20000804 	.word	0x20000804
 8001320:	200001d8 	.word	0x200001d8
 8001324:	2000089c 	.word	0x2000089c
 8001328:	200001ac 	.word	0x200001ac
 800132c:	20000180 	.word	0x20000180
 8001330:	20000888 	.word	0x20000888
 8001334:	20000408 	.word	0x20000408
 8001338:	200007dc 	.word	0x200007dc
 800133c:	20000884 	.word	0x20000884

08001340 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop

08001344 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001344:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001346:	4c08      	ldr	r4, [pc, #32]	; (8001368 <FOC_CalcCurrRef+0x24>)
 8001348:	2326      	movs	r3, #38	; 0x26
 800134a:	fb03 4400 	mla	r4, r3, r0, r4
 800134e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001352:	b103      	cbz	r3, 8001356 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001354:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <FOC_CalcCurrRef+0x28>)
 8001358:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800135c:	f005 fbbc 	bl	8006ad8 <STC_CalcTorqueReference>
 8001360:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001362:	8220      	strh	r0, [r4, #16]
}
 8001364:	bd10      	pop	{r4, pc}
 8001366:	bf00      	nop
 8001368:	200007dc 	.word	0x200007dc
 800136c:	200008a4 	.word	0x200008a4

08001370 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001370:	4b01      	ldr	r3, [pc, #4]	; (8001378 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001372:	8018      	strh	r0, [r3, #0]
}
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	2000087c 	.word	0x2000087c

0800137c <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800137e:	8818      	ldrh	r0, [r3, #0]
 8001380:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001382:	fab0 f080 	clz	r0, r0
 8001386:	0940      	lsrs	r0, r0, #5
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	2000087c 	.word	0x2000087c

08001390 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001390:	4b01      	ldr	r3, [pc, #4]	; (8001398 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001392:	8018      	strh	r0, [r3, #0]
}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000880 	.word	0x20000880

0800139c <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800139e:	8818      	ldrh	r0, [r3, #0]
 80013a0:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80013a2:	fab0 f080 	clz	r0, r0
 80013a6:	0940      	lsrs	r0, r0, #5
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000880 	.word	0x20000880

080013b0 <TSK_MediumFrequencyTaskM1>:
{
 80013b0:	b530      	push	{r4, r5, lr}
 80013b2:	b083      	sub	sp, #12
  int16_t wAux = 0;
 80013b4:	2300      	movs	r3, #0
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 80013b6:	f10d 0106 	add.w	r1, sp, #6
 80013ba:	484d      	ldr	r0, [pc, #308]	; (80014f0 <TSK_MediumFrequencyTaskM1+0x140>)
  int16_t wAux = 0;
 80013bc:	f8ad 3006 	strh.w	r3, [sp, #6]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 80013c0:	f003 ffd8 	bl	8005374 <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 80013c4:	4d4b      	ldr	r5, [pc, #300]	; (80014f4 <TSK_MediumFrequencyTaskM1+0x144>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 80013c6:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 80013c8:	6828      	ldr	r0, [r5, #0]
 80013ca:	f004 fb69 	bl	8005aa0 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 80013ce:	484a      	ldr	r0, [pc, #296]	; (80014f8 <TSK_MediumFrequencyTaskM1+0x148>)
 80013d0:	f005 fc6a 	bl	8006ca8 <STM_GetState>
  switch ( StateM1 )
 80013d4:	1ec3      	subs	r3, r0, #3
 80013d6:	2b0f      	cmp	r3, #15
 80013d8:	d80d      	bhi.n	80013f6 <TSK_MediumFrequencyTaskM1+0x46>
 80013da:	e8df f003 	tbb	[pc, r3]
 80013de:	2b1f      	.short	0x2b1f
 80013e0:	65524330 	.word	0x65524330
 80013e4:	0c0c0c08 	.word	0x0c0c0c08
 80013e8:	6e0c0c0c 	.word	0x6e0c0c0c
 80013ec:	0e7c      	.short	0x0e7c
    STM_NextState( &STM[M1], IDLE );
 80013ee:	4842      	ldr	r0, [pc, #264]	; (80014f8 <TSK_MediumFrequencyTaskM1+0x148>)
 80013f0:	2100      	movs	r1, #0
 80013f2:	f005 fbe5 	bl	8006bc0 <STM_NextState>
}
 80013f6:	b003      	add	sp, #12
 80013f8:	bd30      	pop	{r4, r5, pc}
    HALL_Clear( &HALL_M1 );
 80013fa:	483d      	ldr	r0, [pc, #244]	; (80014f0 <TSK_MediumFrequencyTaskM1+0x140>)
 80013fc:	f003 fef2 	bl	80051e4 <HALL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8001400:	483d      	ldr	r0, [pc, #244]	; (80014f8 <TSK_MediumFrequencyTaskM1+0x148>)
 8001402:	2104      	movs	r1, #4
 8001404:	f005 fbdc 	bl	8006bc0 <STM_NextState>
 8001408:	2800      	cmp	r0, #0
 800140a:	d0f4      	beq.n	80013f6 <TSK_MediumFrequencyTaskM1+0x46>
      FOC_Clear( M1 );
 800140c:	2000      	movs	r0, #0
 800140e:	f7ff fe6d 	bl	80010ec <FOC_Clear>
      R3_1_SwitchOnPWM( pwmcHandle[M1] );
 8001412:	4b3a      	ldr	r3, [pc, #232]	; (80014fc <TSK_MediumFrequencyTaskM1+0x14c>)
 8001414:	6818      	ldr	r0, [r3, #0]
 8001416:	f004 fe6f 	bl	80060f8 <R3_1_SwitchOnPWM>
 800141a:	e7ec      	b.n	80013f6 <TSK_MediumFrequencyTaskM1+0x46>
    R3_1_TurnOnLowSides( pwmcHandle[M1] );
 800141c:	4b37      	ldr	r3, [pc, #220]	; (80014fc <TSK_MediumFrequencyTaskM1+0x14c>)
 800141e:	6818      	ldr	r0, [r3, #0]
 8001420:	f004 fe40 	bl	80060a4 <R3_1_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001424:	2014      	movs	r0, #20
 8001426:	f7ff ffa3 	bl	8001370 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 800142a:	2110      	movs	r1, #16
 800142c:	4832      	ldr	r0, [pc, #200]	; (80014f8 <TSK_MediumFrequencyTaskM1+0x148>)
 800142e:	f005 fbc7 	bl	8006bc0 <STM_NextState>
    break;
 8001432:	e7e0      	b.n	80013f6 <TSK_MediumFrequencyTaskM1+0x46>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8001434:	2105      	movs	r1, #5
 8001436:	4830      	ldr	r0, [pc, #192]	; (80014f8 <TSK_MediumFrequencyTaskM1+0x148>)
 8001438:	f005 fbc2 	bl	8006bc0 <STM_NextState>
    break;
 800143c:	e7db      	b.n	80013f6 <TSK_MediumFrequencyTaskM1+0x46>
	  FOC_InitAdditionalMethods(M1);
 800143e:	2000      	movs	r0, #0
 8001440:	f7ff ff7e 	bl	8001340 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001444:	2000      	movs	r0, #0
 8001446:	f7ff ff7d 	bl	8001344 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 800144a:	2106      	movs	r1, #6
 800144c:	482a      	ldr	r0, [pc, #168]	; (80014f8 <TSK_MediumFrequencyTaskM1+0x148>)
 800144e:	f005 fbb7 	bl	8006bc0 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001452:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <TSK_MediumFrequencyTaskM1+0x150>)
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	f005 fb89 	bl	8006b6c <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 800145a:	4b2a      	ldr	r3, [pc, #168]	; (8001504 <TSK_MediumFrequencyTaskM1+0x154>)
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	f7ff fc3f 	bl	8000ce0 <MCI_ExecBufferedCommands>
    break;
 8001462:	e7c8      	b.n	80013f6 <TSK_MediumFrequencyTaskM1+0x46>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <TSK_MediumFrequencyTaskM1+0x154>)
 8001466:	6818      	ldr	r0, [r3, #0]
 8001468:	f7ff fc3a 	bl	8000ce0 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 800146c:	2000      	movs	r0, #0
 800146e:	f7ff ff69 	bl	8001344 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8001472:	2c00      	cmp	r4, #0
 8001474:	d1bf      	bne.n	80013f6 <TSK_MediumFrequencyTaskM1+0x46>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8001476:	4622      	mov	r2, r4
 8001478:	2120      	movs	r1, #32
 800147a:	481f      	ldr	r0, [pc, #124]	; (80014f8 <TSK_MediumFrequencyTaskM1+0x148>)
 800147c:	f005 fb84 	bl	8006b88 <STM_FaultProcessing>
 8001480:	e7b9      	b.n	80013f6 <TSK_MediumFrequencyTaskM1+0x46>
    R3_1_SwitchOffPWM( pwmcHandle[M1] );
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <TSK_MediumFrequencyTaskM1+0x14c>)
 8001484:	6818      	ldr	r0, [r3, #0]
 8001486:	f004 fe81 	bl	800618c <R3_1_SwitchOffPWM>
    FOC_Clear( M1 );
 800148a:	2000      	movs	r0, #0
 800148c:	f7ff fe2e 	bl	80010ec <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001490:	6828      	ldr	r0, [r5, #0]
 8001492:	f004 fa19 	bl	80058c8 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8001496:	f44f 7048 	mov.w	r0, #800	; 0x320
 800149a:	f7ff ff79 	bl	8001390 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 800149e:	2108      	movs	r1, #8
 80014a0:	4815      	ldr	r0, [pc, #84]	; (80014f8 <TSK_MediumFrequencyTaskM1+0x148>)
 80014a2:	f005 fb8d 	bl	8006bc0 <STM_NextState>
    break;
 80014a6:	e7a6      	b.n	80013f6 <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 80014a8:	f7ff ff78 	bl	800139c <TSK_StopPermanencyTimeHasElapsedM1>
 80014ac:	2800      	cmp	r0, #0
 80014ae:	d0a2      	beq.n	80013f6 <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], STOP_IDLE );
 80014b0:	2109      	movs	r1, #9
 80014b2:	4811      	ldr	r0, [pc, #68]	; (80014f8 <TSK_MediumFrequencyTaskM1+0x148>)
 80014b4:	f005 fb84 	bl	8006bc0 <STM_NextState>
 80014b8:	e79d      	b.n	80013f6 <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80014ba:	f7ff ff5f 	bl	800137c <TSK_ChargeBootCapDelayHasElapsedM1>
 80014be:	2800      	cmp	r0, #0
 80014c0:	d099      	beq.n	80013f6 <TSK_MediumFrequencyTaskM1+0x46>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <TSK_MediumFrequencyTaskM1+0x14c>)
 80014c4:	2100      	movs	r1, #0
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	f004 fcb4 	bl	8005e34 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 80014cc:	2111      	movs	r1, #17
 80014ce:	480a      	ldr	r0, [pc, #40]	; (80014f8 <TSK_MediumFrequencyTaskM1+0x148>)
 80014d0:	f005 fb76 	bl	8006bc0 <STM_NextState>
 80014d4:	e78f      	b.n	80013f6 <TSK_MediumFrequencyTaskM1+0x46>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <TSK_MediumFrequencyTaskM1+0x14c>)
 80014d8:	2101      	movs	r1, #1
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	f004 fcaa 	bl	8005e34 <PWMC_CurrentReadingCalibr>
 80014e0:	2800      	cmp	r0, #0
 80014e2:	d088      	beq.n	80013f6 <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], CLEAR );
 80014e4:	2112      	movs	r1, #18
 80014e6:	4804      	ldr	r0, [pc, #16]	; (80014f8 <TSK_MediumFrequencyTaskM1+0x148>)
 80014e8:	f005 fb6a 	bl	8006bc0 <STM_NextState>
 80014ec:	e783      	b.n	80013f6 <TSK_MediumFrequencyTaskM1+0x46>
 80014ee:	bf00      	nop
 80014f0:	200000b8 	.word	0x200000b8
 80014f4:	20000890 	.word	0x20000890
 80014f8:	20000874 	.word	0x20000874
 80014fc:	200008ac 	.word	0x200008ac
 8001500:	200008a4 	.word	0x200008a4
 8001504:	20000884 	.word	0x20000884

08001508 <MC_Scheduler>:
{
 8001508:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <MC_Scheduler+0x48>)
 800150c:	781c      	ldrb	r4, [r3, #0]
 800150e:	2c01      	cmp	r4, #1
 8001510:	d000      	beq.n	8001514 <MC_Scheduler+0xc>
}
 8001512:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8001514:	4d0f      	ldr	r5, [pc, #60]	; (8001554 <MC_Scheduler+0x4c>)
 8001516:	882b      	ldrh	r3, [r5, #0]
 8001518:	b29b      	uxth	r3, r3
 800151a:	b1ab      	cbz	r3, 8001548 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 800151c:	882b      	ldrh	r3, [r5, #0]
 800151e:	3b01      	subs	r3, #1
 8001520:	b29b      	uxth	r3, r3
 8001522:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 8001524:	4a0c      	ldr	r2, [pc, #48]	; (8001558 <MC_Scheduler+0x50>)
 8001526:	8813      	ldrh	r3, [r2, #0]
 8001528:	b29b      	uxth	r3, r3
 800152a:	b11b      	cbz	r3, 8001534 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 800152c:	8813      	ldrh	r3, [r2, #0]
 800152e:	3b01      	subs	r3, #1
 8001530:	b29b      	uxth	r3, r3
 8001532:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 8001534:	4a09      	ldr	r2, [pc, #36]	; (800155c <MC_Scheduler+0x54>)
 8001536:	8813      	ldrh	r3, [r2, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0e9      	beq.n	8001512 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 800153e:	8813      	ldrh	r3, [r2, #0]
 8001540:	3b01      	subs	r3, #1
 8001542:	b29b      	uxth	r3, r3
 8001544:	8013      	strh	r3, [r2, #0]
}
 8001546:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8001548:	f7ff ff32 	bl	80013b0 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 800154c:	802c      	strh	r4, [r5, #0]
 800154e:	e7e9      	b.n	8001524 <MC_Scheduler+0x1c>
 8001550:	2000087a 	.word	0x2000087a
 8001554:	2000087e 	.word	0x2000087e
 8001558:	2000087c 	.word	0x2000087c
 800155c:	20000880 	.word	0x20000880

08001560 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  HALL_CalcElAngle (&HALL_M1);
 8001564:	4830      	ldr	r0, [pc, #192]	; (8001628 <TSK_HighFrequencyTask+0xc8>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001566:	4f31      	ldr	r7, [pc, #196]	; (800162c <TSK_HighFrequencyTask+0xcc>)
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001568:	4c31      	ldr	r4, [pc, #196]	; (8001630 <TSK_HighFrequencyTask+0xd0>)
{
 800156a:	b086      	sub	sp, #24
  HALL_CalcElAngle (&HALL_M1);
 800156c:	f003 fee4 	bl	8005338 <HALL_CalcElAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001570:	4b30      	ldr	r3, [pc, #192]	; (8001634 <TSK_HighFrequencyTask+0xd4>)
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	f005 fa46 	bl	8006a04 <STC_GetSpeedSensor>
 8001578:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 800157a:	f005 f9e1 	bl	8006940 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800157e:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8001580:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001582:	6838      	ldr	r0, [r7, #0]
 8001584:	f004 fb1c 	bl	8005bc0 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8001588:	9803      	ldr	r0, [sp, #12]
 800158a:	f7ff fc9d 	bl	8000ec8 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800158e:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8001590:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001592:	f7ff fd0f 	bl	8000fb4 <MCM_Park>
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001596:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800159a:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800159c:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 800159e:	1ac9      	subs	r1, r1, r3
 80015a0:	4b25      	ldr	r3, [pc, #148]	; (8001638 <TSK_HighFrequencyTask+0xd8>)
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	f004 fa36 	bl	8005a14 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80015a8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80015ac:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 80015b0:	1ac9      	subs	r1, r1, r3
 80015b2:	4b22      	ldr	r3, [pc, #136]	; (800163c <TSK_HighFrequencyTask+0xdc>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 80015b4:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	f004 fa2c 	bl	8005a14 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80015bc:	4b20      	ldr	r3, [pc, #128]	; (8001640 <TSK_HighFrequencyTask+0xe0>)
 80015be:	f8ad 8008 	strh.w	r8, [sp, #8]
 80015c2:	f8ad 000a 	strh.w	r0, [sp, #10]
 80015c6:	9902      	ldr	r1, [sp, #8]
 80015c8:	6818      	ldr	r0, [r3, #0]
 80015ca:	f003 fd23 	bl	8005014 <Circle_Limitation>
 80015ce:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80015d0:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80015d2:	fa0f f883 	sxth.w	r8, r3
 80015d6:	141d      	asrs	r5, r3, #16
 80015d8:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80015da:	f005 f9b9 	bl	8006950 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80015de:	4631      	mov	r1, r6
 80015e0:	9802      	ldr	r0, [sp, #8]
 80015e2:	f7ff fd2b 	bl	800103c <MCM_Rev_Park>
 80015e6:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80015e8:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80015ea:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80015ec:	f004 faea 	bl	8005bc4 <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80015f0:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80015f2:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 80015f4:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80015f6:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 80015f8:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 80015fa:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 80015fc:	f8a4 8016 	strh.w	r8, [r4, #22]
  if(hFOCreturn == MC_FOC_DURATION)
 8001600:	2901      	cmp	r1, #1
  FOCVars[M1].Vqd = Vqd;
 8001602:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001604:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8001606:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001608:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 800160c:	8426      	strh	r6, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 800160e:	d003      	beq.n	8001618 <TSK_HighFrequencyTask+0xb8>
}
 8001610:	2000      	movs	r0, #0
 8001612:	b006      	add	sp, #24
 8001614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	480a      	ldr	r0, [pc, #40]	; (8001644 <TSK_HighFrequencyTask+0xe4>)
 800161c:	f005 fab4 	bl	8006b88 <STM_FaultProcessing>
}
 8001620:	2000      	movs	r0, #0
 8001622:	b006      	add	sp, #24
 8001624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001628:	200000b8 	.word	0x200000b8
 800162c:	200008ac 	.word	0x200008ac
 8001630:	200007dc 	.word	0x200007dc
 8001634:	200008a4 	.word	0x200008a4
 8001638:	20000898 	.word	0x20000898
 800163c:	20000894 	.word	0x20000894
 8001640:	2000088c 	.word	0x2000088c
 8001644:	20000874 	.word	0x20000874

08001648 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <TSK_SafetyTask_PWMOFF+0x84>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800164c:	4e20      	ldr	r6, [pc, #128]	; (80016d0 <TSK_SafetyTask_PWMOFF+0x88>)
{
 800164e:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001650:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001654:	f004 f98c 	bl	8005970 <NTC_CalcAvTemp>
 8001658:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800165a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800165e:	f004 fc13 	bl	8005e88 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001662:	f025 0508 	bic.w	r5, r5, #8
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001666:	4328      	orrs	r0, r5
 8001668:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 800166a:	b334      	cbz	r4, 80016ba <TSK_SafetyTask_PWMOFF+0x72>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 800166c:	4f19      	ldr	r7, [pc, #100]	; (80016d4 <TSK_SafetyTask_PWMOFF+0x8c>)
 800166e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001672:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8001676:	43ea      	mvns	r2, r5
 8001678:	b292      	uxth	r2, r2
 800167a:	4629      	mov	r1, r5
 800167c:	4638      	mov	r0, r7
 800167e:	f005 fa83 	bl	8006b88 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8001682:	4638      	mov	r0, r7
 8001684:	f005 fb10 	bl	8006ca8 <STM_GetState>
 8001688:	280a      	cmp	r0, #10
 800168a:	d002      	beq.n	8001692 <TSK_SafetyTask_PWMOFF+0x4a>
 800168c:	280b      	cmp	r0, #11
 800168e:	d00e      	beq.n	80016ae <TSK_SafetyTask_PWMOFF+0x66>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001692:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001696:	f004 fbcb 	bl	8005e30 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 800169a:	4620      	mov	r0, r4
 800169c:	f7ff fd26 	bl	80010ec <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80016a0:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <TSK_SafetyTask_PWMOFF+0x90>)
 80016a2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 80016a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80016aa:	f004 b90d 	b.w	80058c8 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80016ae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 80016b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80016b6:	f004 bbbb 	b.w	8005e30 <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <TSK_SafetyTask_PWMOFF+0x94>)
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	f005 f901 	bl	80068c4 <RVBS_CalcAvVbus>
 80016c2:	f020 0008 	bic.w	r0, r0, #8
 80016c6:	4305      	orrs	r5, r0
 80016c8:	b2ad      	uxth	r5, r5
 80016ca:	e7cf      	b.n	800166c <TSK_SafetyTask_PWMOFF+0x24>
 80016cc:	200008a8 	.word	0x200008a8
 80016d0:	200008ac 	.word	0x200008ac
 80016d4:	20000874 	.word	0x20000874
 80016d8:	20000890 	.word	0x20000890
 80016dc:	20000888 	.word	0x20000888

080016e0 <TSK_SafetyTask>:
{
 80016e0:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <TSK_SafetyTask+0x1c>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d000      	beq.n	80016ec <TSK_SafetyTask+0xc>
}
 80016ea:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff ffab 	bl	8001648 <TSK_SafetyTask_PWMOFF>
}
 80016f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 80016f6:	f000 bd81 	b.w	80021fc <RCM_ExecUserConv>
 80016fa:	bf00      	nop
 80016fc:	2000087a 	.word	0x2000087a

08001700 <MC_RunMotorControlTasks>:
{
 8001700:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <MC_RunMotorControlTasks+0x1c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b903      	cbnz	r3, 800170a <MC_RunMotorControlTasks+0xa>
}
 8001708:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 800170a:	f7ff fefd 	bl	8001508 <MC_Scheduler>
    TSK_SafetyTask();
 800170e:	f7ff ffe7 	bl	80016e0 <TSK_SafetyTask>
}
 8001712:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 8001716:	f001 b877 	b.w	8002808 <UI_Scheduler>
 800171a:	bf00      	nop
 800171c:	2000087a 	.word	0x2000087a

08001720 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001720:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <TSK_HardwareFaultTask+0x18>)
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	f004 fd31 	bl	800618c <R3_1_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 800172a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 800172e:	4803      	ldr	r0, [pc, #12]	; (800173c <TSK_HardwareFaultTask+0x1c>)
 8001730:	2200      	movs	r2, #0
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	f005 ba28 	b.w	8006b88 <STM_FaultProcessing>
 8001738:	200008ac 	.word	0x200008ac
 800173c:	20000874 	.word	0x20000874

08001740 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001740:	b470      	push	{r4, r5, r6}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001742:	4a36      	ldr	r2, [pc, #216]	; (800181c <mc_lock_pins+0xdc>)
 8001744:	4b36      	ldr	r3, [pc, #216]	; (8001820 <mc_lock_pins+0xe0>)
 8001746:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001748:	2108      	movs	r1, #8
 800174a:	61d1      	str	r1, [r2, #28]
 800174c:	b08f      	sub	sp, #60	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800174e:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001750:	69d3      	ldr	r3, [r2, #28]
 8001752:	930d      	str	r3, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001754:	f44f 3082 	mov.w	r0, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001758:	f44f 6580 	mov.w	r5, #1024	; 0x400
  (void) temp;
 800175c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800175e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001760:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001762:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001764:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001766:	4b2f      	ldr	r3, [pc, #188]	; (8001824 <mc_lock_pins+0xe4>)
  temp = READ_REG(GPIOx->LCKR);
 8001768:	910c      	str	r1, [sp, #48]	; 0x30
  (void) temp;
 800176a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800176c:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001770:	f44f 4400 	mov.w	r4, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001774:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001776:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001778:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800177a:	69d9      	ldr	r1, [r3, #28]
 800177c:	910b      	str	r1, [sp, #44]	; 0x2c
  (void) temp;
 800177e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001780:	4929      	ldr	r1, [pc, #164]	; (8001828 <mc_lock_pins+0xe8>)
 8001782:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001784:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001788:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800178a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800178c:	69d9      	ldr	r1, [r3, #28]
 800178e:	910a      	str	r1, [sp, #40]	; 0x28
  (void) temp;
 8001790:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001792:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001796:	f44f 7400 	mov.w	r4, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800179a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800179c:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800179e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80017a0:	69d9      	ldr	r1, [r3, #28]
 80017a2:	9109      	str	r1, [sp, #36]	; 0x24
  (void) temp;
 80017a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017aa:	2401      	movs	r4, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017ac:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017ae:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017b0:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80017b2:	69d6      	ldr	r6, [r2, #28]
 80017b4:	9608      	str	r6, [sp, #32]
  (void) temp;
 80017b6:	9e08      	ldr	r6, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017b8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017ba:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017bc:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80017be:	69d8      	ldr	r0, [r3, #28]
 80017c0:	9007      	str	r0, [sp, #28]
  (void) temp;
 80017c2:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017c4:	4819      	ldr	r0, [pc, #100]	; (800182c <mc_lock_pins+0xec>)
 80017c6:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017c8:	2502      	movs	r5, #2
 80017ca:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017cc:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80017ce:	69d2      	ldr	r2, [r2, #28]
 80017d0:	9206      	str	r2, [sp, #24]
  (void) temp;
 80017d2:	9a06      	ldr	r2, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017d4:	4a16      	ldr	r2, [pc, #88]	; (8001830 <mc_lock_pins+0xf0>)
 80017d6:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017d8:	2680      	movs	r6, #128	; 0x80
 80017da:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017dc:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80017de:	69da      	ldr	r2, [r3, #28]
 80017e0:	9205      	str	r2, [sp, #20]
  (void) temp;
 80017e2:	9a05      	ldr	r2, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017e4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017e6:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017e8:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80017ea:	69da      	ldr	r2, [r3, #28]
 80017ec:	9204      	str	r2, [sp, #16]
  (void) temp;
 80017ee:	9a04      	ldr	r2, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017f0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80017f2:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017f4:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	9303      	str	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <mc_lock_pins+0xf4>)
  (void) temp;
 80017fc:	9a03      	ldr	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80017fe:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001800:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001802:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	9202      	str	r2, [sp, #8]
  (void) temp;
 8001808:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800180a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800180c:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800180e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001814:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
}
 8001816:	b00f      	add	sp, #60	; 0x3c
 8001818:	bc70      	pop	{r4, r5, r6}
 800181a:	4770      	bx	lr
 800181c:	40020400 	.word	0x40020400
 8001820:	00010008 	.word	0x00010008
 8001824:	40020000 	.word	0x40020000
 8001828:	00010100 	.word	0x00010100
 800182c:	00010002 	.word	0x00010002
 8001830:	00010080 	.word	0x00010080
 8001834:	40020800 	.word	0x40020800

08001838 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183a:	460c      	mov	r4, r1
 800183c:	b08d      	sub	sp, #52	; 0x34
 800183e:	4616      	mov	r6, r2
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 8001840:	2100      	movs	r1, #0
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 8001842:	0962      	lsrs	r2, r4, #5
{
 8001844:	4605      	mov	r5, r0
 8001846:	461f      	mov	r7, r3
  bool bNoError = false; // Default is error
 8001848:	f88d 1009 	strb.w	r1, [sp, #9]
  if (bMotorSelection != 0)
 800184c:	d122      	bne.n	8001894 <MCP_ReceivedFrame+0x5c>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 800184e:	2c12      	cmp	r4, #18
 8001850:	d814      	bhi.n	800187c <MCP_ReceivedFrame+0x44>
 8001852:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001856:	0016      	.short	0x0016
 8001858:	00de0205 	.word	0x00de0205
 800185c:	001301f9 	.word	0x001301f9
 8001860:	004c0013 	.word	0x004c0013
 8001864:	008b0076 	.word	0x008b0076
 8001868:	029700bc 	.word	0x029700bc
 800186c:	02cf02a8 	.word	0x02cf02a8
 8001870:	001302bf 	.word	0x001302bf
 8001874:	00130013 	.word	0x00130013
 8001878:	00160013 	.word	0x00160013
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 800187c:	2301      	movs	r3, #1
 800187e:	f88d 300e 	strb.w	r3, [sp, #14]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 8001882:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001886:	2301      	movs	r3, #1
 8001888:	f10d 020e 	add.w	r2, sp, #14
 800188c:	21ff      	movs	r1, #255	; 0xff
 800188e:	47a0      	blx	r4
    }
  }
}
 8001890:	b00d      	add	sp, #52	; 0x34
 8001892:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 8001894:	3a01      	subs	r2, #1
 8001896:	f000 fff7 	bl	8002888 <UI_SetReg>
 800189a:	b1c8      	cbz	r0, 80018d0 <MCP_ReceivedFrame+0x98>
  switch (Code)
 800189c:	f004 041f 	and.w	r4, r4, #31
 80018a0:	2c12      	cmp	r4, #18
 80018a2:	f200 82da 	bhi.w	8001e5a <MCP_ReceivedFrame+0x622>
 80018a6:	e8df f014 	tbh	[pc, r4, lsl #1]
 80018aa:	008f      	.short	0x008f
 80018ac:	00b401db 	.word	0x00b401db
 80018b0:	02d801cf 	.word	0x02d801cf
 80018b4:	002202d8 	.word	0x002202d8
 80018b8:	0061004c 	.word	0x0061004c
 80018bc:	026d0092 	.word	0x026d0092
 80018c0:	02a5027e 	.word	0x02a5027e
 80018c4:	02d80295 	.word	0x02d80295
 80018c8:	02d802d8 	.word	0x02d802d8
 80018cc:	008f02d8 	.word	0x008f02d8
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80018d0:	230b      	movs	r3, #11
    if (bNoError)
 80018d2:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80018d6:	f88d 300e 	strb.w	r3, [sp, #14]
    if (bNoError)
 80018da:	2800      	cmp	r0, #0
 80018dc:	d0d1      	beq.n	8001882 <MCP_ReceivedFrame+0x4a>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 80018de:	2300      	movs	r3, #0
 80018e0:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 80018e4:	461a      	mov	r2, r3
 80018e6:	21f0      	movs	r1, #240	; 0xf0
 80018e8:	47a0      	blx	r4
}
 80018ea:	b00d      	add	sp, #52	; 0x34
 80018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        outBuff[i] = 0;
 80018ee:	ac04      	add	r4, sp, #16
 80018f0:	2100      	movs	r1, #0
 80018f2:	2220      	movs	r2, #32
 80018f4:	4620      	mov	r0, r4
 80018f6:	f005 fb65 	bl	8006fc4 <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 80018fa:	f8d5 70a8 	ldr.w	r7, [r5, #168]	; 0xa8
 80018fe:	f10d 0012 	add.w	r0, sp, #18
 8001902:	1e79      	subs	r1, r7, #1
 8001904:	2300      	movs	r3, #0
 8001906:	e004      	b.n	8001912 <MCP_ReceivedFrame+0xda>
 8001908:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 800190a:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 800190e:	f000 82fd 	beq.w	8001f0c <MCP_ReceivedFrame+0x6d4>
 8001912:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001916:	2a09      	cmp	r2, #9
 8001918:	b2de      	uxtb	r6, r3
 800191a:	f103 0301 	add.w	r3, r3, #1
 800191e:	d1f3      	bne.n	8001908 <MCP_ReceivedFrame+0xd0>
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001920:	1d72      	adds	r2, r6, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001922:	1df3      	adds	r3, r6, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001924:	3609      	adds	r6, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001926:	b2d2      	uxtb	r2, r2
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001928:	b2db      	uxtb	r3, r3
      outBuff[2] = pHandle->s_fwVer[i+9];
 800192a:	b2f6      	uxtb	r6, r6
      outBuff[0] = pHandle->s_fwVer[i+5];
 800192c:	5cba      	ldrb	r2, [r7, r2]
 800192e:	f88d 2010 	strb.w	r2, [sp, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001932:	5cfb      	ldrb	r3, [r7, r3]
 8001934:	f88d 3011 	strb.w	r3, [sp, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001938:	5dbb      	ldrb	r3, [r7, r6]
 800193a:	f88d 3012 	strb.w	r3, [sp, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 800193e:	69ee      	ldr	r6, [r5, #28]
 8001940:	e270      	b.n	8001e24 <MCP_ReceivedFrame+0x5ec>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001942:	7871      	ldrb	r1, [r6, #1]
 8001944:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001946:	7970      	ldrb	r0, [r6, #5]
 8001948:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 800194a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800194e:	78b1      	ldrb	r1, [r6, #2]
 8001950:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8001954:	78f1      	ldrb	r1, [r6, #3]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001956:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 800195a:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 800195e:	b292      	uxth	r2, r2
 8001960:	4628      	mov	r0, r5
 8001962:	f001 fa91 	bl	8002e88 <UI_ExecSpeedRamp>
 8001966:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 800196a:	e7b6      	b.n	80018da <MCP_ReceivedFrame+0xa2>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 800196c:	f10d 000e 	add.w	r0, sp, #14
 8001970:	7831      	ldrb	r1, [r6, #0]
 8001972:	9000      	str	r0, [sp, #0]
 8001974:	ab03      	add	r3, sp, #12
 8001976:	f10d 020a 	add.w	r2, sp, #10
 800197a:	4628      	mov	r0, r5
 800197c:	f001 faa0 	bl	8002ec0 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001980:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001984:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
      outBuff[6] = (uint8_t)(Durationms);
 8001988:	f8bd 200a 	ldrh.w	r2, [sp, #10]
      outBuff[4] = (uint8_t)(FinalTorque);
 800198c:	f88d 1014 	strb.w	r1, [sp, #20]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001990:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001994:	005b      	lsls	r3, r3, #1
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001996:	1218      	asrs	r0, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 8001998:	f88d 3010 	strb.w	r3, [sp, #16]
      outBuff[1] = (uint8_t)(rpm >> 8);
 800199c:	f88d 0011 	strb.w	r0, [sp, #17]
      outBuff[2] = (uint8_t)(rpm >> 16);
 80019a0:	1418      	asrs	r0, r3, #16
      outBuff[3] = (uint8_t)(rpm >> 24);
 80019a2:	161b      	asrs	r3, r3, #24
      outBuff[2] = (uint8_t)(rpm >> 16);
 80019a4:	f88d 0012 	strb.w	r0, [sp, #18]
      outBuff[3] = (uint8_t)(rpm >> 24);
 80019a8:	f88d 3013 	strb.w	r3, [sp, #19]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 80019ac:	1208      	asrs	r0, r1, #8
      outBuff[7] = (uint8_t)(Durationms >> 8);
 80019ae:	0a13      	lsrs	r3, r2, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 80019b0:	f88d 0015 	strb.w	r0, [sp, #21]
      outBuff[6] = (uint8_t)(Durationms);
 80019b4:	f88d 2016 	strb.w	r2, [sp, #22]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 80019b8:	f88d 3017 	strb.w	r3, [sp, #23]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 80019bc:	69ec      	ldr	r4, [r5, #28]
 80019be:	69a8      	ldr	r0, [r5, #24]
 80019c0:	2308      	movs	r3, #8
 80019c2:	aa04      	add	r2, sp, #16
 80019c4:	21f0      	movs	r1, #240	; 0xf0
 80019c6:	47a0      	blx	r4
    if (bNoError)
 80019c8:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80019cc:	e785      	b.n	80018da <MCP_ReceivedFrame+0xa2>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80019ce:	78b1      	ldrb	r1, [r6, #2]
 80019d0:	7873      	ldrb	r3, [r6, #1]
 80019d2:	78f2      	ldrb	r2, [r6, #3]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80019d4:	7970      	ldrb	r0, [r6, #5]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80019d6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80019da:	7931      	ldrb	r1, [r6, #4]
 80019dc:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80019e0:	4a9e      	ldr	r2, [pc, #632]	; (8001c5c <MCP_ReceivedFrame+0x424>)
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80019e2:	eb03 6301 	add.w	r3, r3, r1, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80019e6:	fb82 1203 	smull	r1, r2, r2, r3
 80019ea:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      hDurationms = buffer[7] + (buffer[8] << 8);
 80019ee:	7a31      	ldrb	r1, [r6, #8]
 80019f0:	79f2      	ldrb	r2, [r6, #7]
 80019f2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80019f6:	79b1      	ldrb	r1, [r6, #6]
 80019f8:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80019fc:	b200      	sxth	r0, r0
 80019fe:	7831      	ldrb	r1, [r6, #0]
 8001a00:	9000      	str	r0, [sp, #0]
 8001a02:	b21b      	sxth	r3, r3
 8001a04:	b292      	uxth	r2, r2
 8001a06:	4628      	mov	r0, r5
 8001a08:	f001 fa78 	bl	8002efc <UI_SetRevupData>
 8001a0c:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001a10:	e763      	b.n	80018da <MCP_ReceivedFrame+0xa2>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001a12:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8001a14:	2303      	movs	r3, #3
 8001a16:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001a1a:	2988      	cmp	r1, #136	; 0x88
 8001a1c:	d8d4      	bhi.n	80019c8 <MCP_ReceivedFrame+0x190>
 8001a1e:	a301      	add	r3, pc, #4	; (adr r3, 8001a24 <MCP_ReceivedFrame+0x1ec>)
 8001a20:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8001a24:	08001ecb 	.word	0x08001ecb
 8001a28:	08001e87 	.word	0x08001e87
 8001a2c:	08001ecb 	.word	0x08001ecb
 8001a30:	08001ecb 	.word	0x08001ecb
 8001a34:	08001e87 	.word	0x08001e87
 8001a38:	08001e37 	.word	0x08001e37
 8001a3c:	08001e37 	.word	0x08001e37
 8001a40:	08001e37 	.word	0x08001e37
 8001a44:	08001e37 	.word	0x08001e37
 8001a48:	08001e37 	.word	0x08001e37
 8001a4c:	08001e37 	.word	0x08001e37
 8001a50:	08001e37 	.word	0x08001e37
 8001a54:	08001e37 	.word	0x08001e37
 8001a58:	08001e37 	.word	0x08001e37
 8001a5c:	08001e37 	.word	0x08001e37
 8001a60:	08001e37 	.word	0x08001e37
 8001a64:	08001e37 	.word	0x08001e37
 8001a68:	08001e37 	.word	0x08001e37
 8001a6c:	08001e37 	.word	0x08001e37
 8001a70:	08001e37 	.word	0x08001e37
 8001a74:	08001e37 	.word	0x08001e37
 8001a78:	08001e37 	.word	0x08001e37
 8001a7c:	08001e37 	.word	0x08001e37
 8001a80:	08001e37 	.word	0x08001e37
 8001a84:	08001e37 	.word	0x08001e37
 8001a88:	08001e37 	.word	0x08001e37
 8001a8c:	08001e37 	.word	0x08001e37
 8001a90:	08001e37 	.word	0x08001e37
 8001a94:	080019c9 	.word	0x080019c9
 8001a98:	080019c9 	.word	0x080019c9
 8001a9c:	08001e87 	.word	0x08001e87
 8001aa0:	08001e37 	.word	0x08001e37
 8001aa4:	08001e37 	.word	0x08001e37
 8001aa8:	08001e37 	.word	0x08001e37
 8001aac:	08001ecb 	.word	0x08001ecb
 8001ab0:	080019c9 	.word	0x080019c9
 8001ab4:	080019c9 	.word	0x080019c9
 8001ab8:	080019c9 	.word	0x080019c9
 8001abc:	080019c9 	.word	0x080019c9
 8001ac0:	080019c9 	.word	0x080019c9
 8001ac4:	080019c9 	.word	0x080019c9
 8001ac8:	080019c9 	.word	0x080019c9
 8001acc:	080019c9 	.word	0x080019c9
 8001ad0:	080019c9 	.word	0x080019c9
 8001ad4:	080019c9 	.word	0x080019c9
 8001ad8:	080019c9 	.word	0x080019c9
 8001adc:	080019c9 	.word	0x080019c9
 8001ae0:	080019c9 	.word	0x080019c9
 8001ae4:	080019c9 	.word	0x080019c9
 8001ae8:	080019c9 	.word	0x080019c9
 8001aec:	080019c9 	.word	0x080019c9
 8001af0:	080019c9 	.word	0x080019c9
 8001af4:	080019c9 	.word	0x080019c9
 8001af8:	080019c9 	.word	0x080019c9
 8001afc:	080019c9 	.word	0x080019c9
 8001b00:	080019c9 	.word	0x080019c9
 8001b04:	080019c9 	.word	0x080019c9
 8001b08:	080019c9 	.word	0x080019c9
 8001b0c:	080019c9 	.word	0x080019c9
 8001b10:	080019c9 	.word	0x080019c9
 8001b14:	080019c9 	.word	0x080019c9
 8001b18:	080019c9 	.word	0x080019c9
 8001b1c:	080019c9 	.word	0x080019c9
 8001b20:	080019c9 	.word	0x080019c9
 8001b24:	080019c9 	.word	0x080019c9
 8001b28:	08001e37 	.word	0x08001e37
 8001b2c:	080019c9 	.word	0x080019c9
 8001b30:	080019c9 	.word	0x080019c9
 8001b34:	080019c9 	.word	0x080019c9
 8001b38:	080019c9 	.word	0x080019c9
 8001b3c:	08001e87 	.word	0x08001e87
 8001b40:	08001e87 	.word	0x08001e87
 8001b44:	08001e87 	.word	0x08001e87
 8001b48:	08001e37 	.word	0x08001e37
 8001b4c:	08001e37 	.word	0x08001e37
 8001b50:	08001e37 	.word	0x08001e37
 8001b54:	08001e37 	.word	0x08001e37
 8001b58:	08001ecb 	.word	0x08001ecb
 8001b5c:	08001e87 	.word	0x08001e87
 8001b60:	08001e37 	.word	0x08001e37
 8001b64:	08001e37 	.word	0x08001e37
 8001b68:	08001e37 	.word	0x08001e37
 8001b6c:	08001e37 	.word	0x08001e37
 8001b70:	08001e37 	.word	0x08001e37
 8001b74:	08001e37 	.word	0x08001e37
 8001b78:	08001e37 	.word	0x08001e37
 8001b7c:	08001e37 	.word	0x08001e37
 8001b80:	08001e37 	.word	0x08001e37
 8001b84:	08001e37 	.word	0x08001e37
 8001b88:	08001e37 	.word	0x08001e37
 8001b8c:	08001ecb 	.word	0x08001ecb
 8001b90:	08001e87 	.word	0x08001e87
 8001b94:	080019c9 	.word	0x080019c9
 8001b98:	08001e37 	.word	0x08001e37
 8001b9c:	08001e37 	.word	0x08001e37
 8001ba0:	08001e37 	.word	0x08001e37
 8001ba4:	08001e37 	.word	0x08001e37
 8001ba8:	08001e37 	.word	0x08001e37
 8001bac:	080019c9 	.word	0x080019c9
 8001bb0:	080019c9 	.word	0x080019c9
 8001bb4:	08001e37 	.word	0x08001e37
 8001bb8:	08001e37 	.word	0x08001e37
 8001bbc:	08001ecb 	.word	0x08001ecb
 8001bc0:	08001ecb 	.word	0x08001ecb
 8001bc4:	08001e87 	.word	0x08001e87
 8001bc8:	08001e87 	.word	0x08001e87
 8001bcc:	08001e87 	.word	0x08001e87
 8001bd0:	08001e87 	.word	0x08001e87
 8001bd4:	08001e87 	.word	0x08001e87
 8001bd8:	08001ecb 	.word	0x08001ecb
 8001bdc:	08001e37 	.word	0x08001e37
 8001be0:	08001e37 	.word	0x08001e37
 8001be4:	08001e87 	.word	0x08001e87
 8001be8:	080019c9 	.word	0x080019c9
 8001bec:	08001e37 	.word	0x08001e37
 8001bf0:	08001e37 	.word	0x08001e37
 8001bf4:	08001ecb 	.word	0x08001ecb
 8001bf8:	08001e87 	.word	0x08001e87
 8001bfc:	08001e87 	.word	0x08001e87
 8001c00:	08001e87 	.word	0x08001e87
 8001c04:	08001e87 	.word	0x08001e87
 8001c08:	08001e87 	.word	0x08001e87
 8001c0c:	08001e87 	.word	0x08001e87
 8001c10:	08001e87 	.word	0x08001e87
 8001c14:	08001e87 	.word	0x08001e87
 8001c18:	08001e87 	.word	0x08001e87
 8001c1c:	08001e87 	.word	0x08001e87
 8001c20:	08001e87 	.word	0x08001e87
 8001c24:	08001ecb 	.word	0x08001ecb
 8001c28:	080019c9 	.word	0x080019c9
 8001c2c:	08001ecb 	.word	0x08001ecb
 8001c30:	08001e87 	.word	0x08001e87
 8001c34:	08001e87 	.word	0x08001e87
 8001c38:	08001e87 	.word	0x08001e87
 8001c3c:	08001e37 	.word	0x08001e37
 8001c40:	08001e37 	.word	0x08001e37
 8001c44:	08001e37 	.word	0x08001e37
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001c48:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001c4a:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001c4c:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001c50:	4628      	mov	r0, r5
 8001c52:	f001 f8dd 	bl	8002e10 <UI_ExecCmd>
 8001c56:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001c5a:	e63e      	b.n	80018da <MCP_ReceivedFrame+0xa2>
 8001c5c:	2aaaaaab 	.word	0x2aaaaaab
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001c60:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001c62:	2305      	movs	r3, #5
 8001c64:	f88d 300e 	strb.w	r3, [sp, #14]
      switch (bRegID)
 8001c68:	2988      	cmp	r1, #136	; 0x88
 8001c6a:	f200 80fc 	bhi.w	8001e66 <MCP_ReceivedFrame+0x62e>
 8001c6e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8001c72:	0145      	.short	0x0145
 8001c74:	00fa00fa 	.word	0x00fa00fa
 8001c78:	00fa013e 	.word	0x00fa013e
 8001c7c:	01000100 	.word	0x01000100
 8001c80:	01000100 	.word	0x01000100
 8001c84:	01000100 	.word	0x01000100
 8001c88:	01000100 	.word	0x01000100
 8001c8c:	01000100 	.word	0x01000100
 8001c90:	011c0100 	.word	0x011c0100
 8001c94:	00fa011c 	.word	0x00fa011c
 8001c98:	010000fa 	.word	0x010000fa
 8001c9c:	01000100 	.word	0x01000100
 8001ca0:	01000100 	.word	0x01000100
 8001ca4:	00fa00fa 	.word	0x00fa00fa
 8001ca8:	00de00fa 	.word	0x00de00fa
 8001cac:	00fa00de 	.word	0x00fa00de
 8001cb0:	00fa00fa 	.word	0x00fa00fa
 8001cb4:	00fa00fa 	.word	0x00fa00fa
 8001cb8:	00fa00fa 	.word	0x00fa00fa
 8001cbc:	00fa00fa 	.word	0x00fa00fa
 8001cc0:	00fa00fa 	.word	0x00fa00fa
 8001cc4:	00fa00fa 	.word	0x00fa00fa
 8001cc8:	00fa00fa 	.word	0x00fa00fa
 8001ccc:	00fa00fa 	.word	0x00fa00fa
 8001cd0:	00fa00fa 	.word	0x00fa00fa
 8001cd4:	00fa00fa 	.word	0x00fa00fa
 8001cd8:	00fa00fa 	.word	0x00fa00fa
 8001cdc:	00fa00fa 	.word	0x00fa00fa
 8001ce0:	00fa00fa 	.word	0x00fa00fa
 8001ce4:	00fa00fa 	.word	0x00fa00fa
 8001ce8:	00fa00fa 	.word	0x00fa00fa
 8001cec:	00fa00fa 	.word	0x00fa00fa
 8001cf0:	00fa00fa 	.word	0x00fa00fa
 8001cf4:	00fa0100 	.word	0x00fa0100
 8001cf8:	00fa00fa 	.word	0x00fa00fa
 8001cfc:	011c00fa 	.word	0x011c00fa
 8001d00:	011c011c 	.word	0x011c011c
 8001d04:	00fa00fa 	.word	0x00fa00fa
 8001d08:	00fa00fa 	.word	0x00fa00fa
 8001d0c:	00fa00fa 	.word	0x00fa00fa
 8001d10:	00fa0100 	.word	0x00fa0100
 8001d14:	00fa00fa 	.word	0x00fa00fa
 8001d18:	01000100 	.word	0x01000100
 8001d1c:	01000100 	.word	0x01000100
 8001d20:	01000100 	.word	0x01000100
 8001d24:	00fa0100 	.word	0x00fa0100
 8001d28:	00fa011c 	.word	0x00fa011c
 8001d2c:	00fa00fa 	.word	0x00fa00fa
 8001d30:	00fa00fa 	.word	0x00fa00fa
 8001d34:	00fa0100 	.word	0x00fa0100
 8001d38:	010000fa 	.word	0x010000fa
 8001d3c:	00fa0100 	.word	0x00fa0100
 8001d40:	00fa00fa 	.word	0x00fa00fa
 8001d44:	00fa00fa 	.word	0x00fa00fa
 8001d48:	00fa00fa 	.word	0x00fa00fa
 8001d4c:	00fa00fa 	.word	0x00fa00fa
 8001d50:	00fa00fa 	.word	0x00fa00fa
 8001d54:	00fa00fa 	.word	0x00fa00fa
 8001d58:	013e00fa 	.word	0x013e00fa
 8001d5c:	011c011c 	.word	0x011c011c
 8001d60:	011c011c 	.word	0x011c011c
 8001d64:	00fa011c 	.word	0x00fa011c
 8001d68:	00fa00fa 	.word	0x00fa00fa
 8001d6c:	011c011c 	.word	0x011c011c
 8001d70:	00fa00fa 	.word	0x00fa00fa
 8001d74:	00fa00fa 	.word	0x00fa00fa
 8001d78:	00fa00fa 	.word	0x00fa00fa
 8001d7c:	010000fa 	.word	0x010000fa
 8001d80:	01000100 	.word	0x01000100
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001d84:	78f3      	ldrb	r3, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001d86:	7870      	ldrb	r0, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001d88:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001d8a:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001d8c:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001d90:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001d94:	b212      	sxth	r2, r2
 8001d96:	b209      	sxth	r1, r1
 8001d98:	4628      	mov	r0, r5
 8001d9a:	f001 f8cb 	bl	8002f34 <UI_SetCurrentReferences>
      bNoError = true;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001da4:	e59b      	b.n	80018de <MCP_ReceivedFrame+0xa6>
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001da6:	4c5b      	ldr	r4, [pc, #364]	; (8001f14 <MCP_ReceivedFrame+0x6dc>)
      stepList.data = buffer;
 8001da8:	9604      	str	r6, [sp, #16]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001daa:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001dac:	4621      	mov	r1, r4
 8001dae:	a804      	add	r0, sp, #16
      stepList.len = Size;
 8001db0:	f88d 7014 	strb.w	r7, [sp, #20]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001db4:	f88d 300e 	strb.w	r3, [sp, #14]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001db8:	f001 f8ca 	bl	8002f50 <UI_GetMPInfo>
 8001dbc:	f88d 0009 	strb.w	r0, [sp, #9]
      if (bNoError)
 8001dc0:	2800      	cmp	r0, #0
 8001dc2:	f43f ad5e 	beq.w	8001882 <MCP_ReceivedFrame+0x4a>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001dc6:	69ee      	ldr	r6, [r5, #28]
 8001dc8:	7923      	ldrb	r3, [r4, #4]
 8001dca:	6822      	ldr	r2, [r4, #0]
 8001dcc:	69a8      	ldr	r0, [r5, #24]
 8001dce:	21f0      	movs	r1, #240	; 0xf0
 8001dd0:	47b0      	blx	r6
  if (RequireAck)
 8001dd2:	e55d      	b.n	8001890 <MCP_ReceivedFrame+0x58>
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001dd4:	7870      	ldrb	r0, [r6, #1]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001dd6:	7973      	ldrb	r3, [r6, #5]
 8001dd8:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001dda:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001ddc:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001de0:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001de4:	b292      	uxth	r2, r2
 8001de6:	b209      	sxth	r1, r1
 8001de8:	4628      	mov	r0, r5
 8001dea:	f001 f85f 	bl	8002eac <UI_ExecTorqueRamp>
 8001dee:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001df2:	e572      	b.n	80018da <MCP_ReceivedFrame+0xa2>
 8001df4:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8001df8:	ac04      	add	r4, sp, #16
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001dfe:	2000      	movs	r0, #0
 8001e00:	e004      	b.n	8001e0c <MCP_ReceivedFrame+0x5d4>
 8001e02:	3001      	adds	r0, #1
 8001e04:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8001e06:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001e0a:	d00a      	beq.n	8001e22 <MCP_ReceivedFrame+0x5ea>
 8001e0c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001e10:	b2c6      	uxtb	r6, r0
 8001e12:	2900      	cmp	r1, #0
 8001e14:	d1f5      	bne.n	8001e02 <MCP_ReceivedFrame+0x5ca>
        outBuff[i] = 0;
 8001e16:	f1c6 0220 	rsb	r2, r6, #32
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	4420      	add	r0, r4
 8001e1e:	f005 f8d1 	bl	8006fc4 <memset>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001e22:	69ee      	ldr	r6, [r5, #28]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001e24:	69a8      	ldr	r0, [r5, #24]
 8001e26:	2320      	movs	r3, #32
 8001e28:	4622      	mov	r2, r4
 8001e2a:	21f0      	movs	r1, #240	; 0xf0
 8001e2c:	47b0      	blx	r6
      bNoError = true;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	f88d 3009 	strb.w	r3, [sp, #9]
  if (RequireAck)
 8001e34:	e553      	b.n	80018de <MCP_ReceivedFrame+0xa6>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001e36:	f10d 0209 	add.w	r2, sp, #9
 8001e3a:	4628      	mov	r0, r5
 8001e3c:	f000 fde4 	bl	8002a08 <UI_GetReg>
          if ( bNoError == true )
 8001e40:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001e44:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f43f ad1b 	beq.w	8001882 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001e4c:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001e50:	2302      	movs	r3, #2
 8001e52:	aa04      	add	r2, sp, #16
 8001e54:	21f0      	movs	r1, #240	; 0xf0
 8001e56:	47a0      	blx	r4
  if (RequireAck)
 8001e58:	e51a      	b.n	8001890 <MCP_ReceivedFrame+0x58>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001e5a:	2301      	movs	r3, #1
    if (bNoError)
 8001e5c:	f89d 0009 	ldrb.w	r0, [sp, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001e60:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8001e64:	e539      	b.n	80018da <MCP_ReceivedFrame+0xa2>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001e66:	2302      	movs	r3, #2
    if (bNoError)
 8001e68:	f89d 0009 	ldrb.w	r0, [sp, #9]
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001e6c:	f88d 300e 	strb.w	r3, [sp, #14]
  if (RequireAck)
 8001e70:	e533      	b.n	80018da <MCP_ReceivedFrame+0xa2>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001e72:	78b2      	ldrb	r2, [r6, #2]
 8001e74:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001e76:	4628      	mov	r0, r5
 8001e78:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001e7c:	f000 fd04 	bl	8002888 <UI_SetReg>
 8001e80:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001e84:	e529      	b.n	80018da <MCP_ReceivedFrame+0xa2>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001e86:	f10d 0209 	add.w	r2, sp, #9
 8001e8a:	4628      	mov	r0, r5
 8001e8c:	f000 fdbc 	bl	8002a08 <UI_GetReg>
          if ( bNoError == true )
 8001e90:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001e94:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f43f acf3 	beq.w	8001882 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001e9c:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	aa04      	add	r2, sp, #16
 8001ea4:	21f0      	movs	r1, #240	; 0xf0
 8001ea6:	47a0      	blx	r4
  if (RequireAck)
 8001ea8:	e4f2      	b.n	8001890 <MCP_ReceivedFrame+0x58>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001eaa:	78b2      	ldrb	r2, [r6, #2]
 8001eac:	7873      	ldrb	r3, [r6, #1]
 8001eae:	78f0      	ldrb	r0, [r6, #3]
 8001eb0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001eb4:	7932      	ldrb	r2, [r6, #4]
 8001eb6:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001eba:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	f000 fce2 	bl	8002888 <UI_SetReg>
 8001ec4:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001ec8:	e507      	b.n	80018da <MCP_ReceivedFrame+0xa2>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001eca:	f10d 0209 	add.w	r2, sp, #9
 8001ece:	4628      	mov	r0, r5
 8001ed0:	f000 fd9a 	bl	8002a08 <UI_GetReg>
           if ( bNoError == true )
 8001ed4:	f89d 3009 	ldrb.w	r3, [sp, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001ed8:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f43f acd1 	beq.w	8001882 <MCP_ReceivedFrame+0x4a>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001ee0:	e9d5 0406 	ldrd	r0, r4, [r5, #24]
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	aa04      	add	r2, sp, #16
 8001ee8:	21f0      	movs	r1, #240	; 0xf0
 8001eea:	47a0      	blx	r4
  if (RequireAck)
 8001eec:	e4d0      	b.n	8001890 <MCP_ReceivedFrame+0x58>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001eee:	7872      	ldrb	r2, [r6, #1]
 8001ef0:	4628      	mov	r0, r5
 8001ef2:	f000 fcc9 	bl	8002888 <UI_SetReg>
 8001ef6:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001efa:	e4ee      	b.n	80018da <MCP_ReceivedFrame+0xa2>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001efc:	7872      	ldrb	r2, [r6, #1]
 8001efe:	2100      	movs	r1, #0
 8001f00:	4628      	mov	r0, r5
 8001f02:	f000 fcc1 	bl	8002888 <UI_SetReg>
 8001f06:	f88d 0009 	strb.w	r0, [sp, #9]
  if (RequireAck)
 8001f0a:	e4e6      	b.n	80018da <MCP_ReceivedFrame+0xa2>
 8001f0c:	2626      	movs	r6, #38	; 0x26
 8001f0e:	2324      	movs	r3, #36	; 0x24
 8001f10:	2222      	movs	r2, #34	; 0x22
 8001f12:	e50b      	b.n	800192c <MCP_ReceivedFrame+0xf4>
 8001f14:	200008b0 	.word	0x200008b0

08001f18 <MCP_WaitNextFrame>:
{
 8001f18:	b510      	push	{r4, lr}
 8001f1a:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 8001f1c:	6980      	ldr	r0, [r0, #24]
 8001f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f20:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8001f22:	2280      	movs	r2, #128	; 0x80
 8001f24:	f884 20ac 	strb.w	r2, [r4, #172]	; 0xac
  pHandle->fFcpReceive(pHandle->pFCP);
 8001f28:	6a23      	ldr	r3, [r4, #32]
 8001f2a:	69a0      	ldr	r0, [r4, #24]
}
 8001f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 8001f30:	4718      	bx	r3
 8001f32:	bf00      	nop

08001f34 <MCP_Init>:
{
 8001f34:	b570      	push	{r4, r5, r6, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	4604      	mov	r4, r0
 8001f3a:	461d      	mov	r5, r3
 8001f3c:	9b07      	ldr	r3, [sp, #28]
  pHandle->s_fwVer = s_fwVer;
 8001f3e:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
  FCP_SetClient( pFCP, pHandle,
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <MCP_Init+0x34>)
  pHandle->pFCP = pFCP;
 8001f44:	61a1      	str	r1, [r4, #24]
{
 8001f46:	4608      	mov	r0, r1
 8001f48:	4616      	mov	r6, r2
  FCP_SetClient( pFCP, pHandle,
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <MCP_Init+0x38>)
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <MCP_Init+0x3c>)
 8001f50:	4621      	mov	r1, r4
 8001f52:	f003 f89b 	bl	800508c <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001f56:	9b06      	ldr	r3, [sp, #24]
 8001f58:	6263      	str	r3, [r4, #36]	; 0x24
  pHandle->fFcpReceive = fFcpReceive;
 8001f5a:	e9c4 6507 	strd	r6, r5, [r4, #28]
  MCP_WaitNextFrame(pHandle);
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f7ff ffda 	bl	8001f18 <MCP_WaitNextFrame>
}
 8001f64:	b002      	add	sp, #8
 8001f66:	bd70      	pop	{r4, r5, r6, pc}
 8001f68:	08001f75 	.word	0x08001f75
 8001f6c:	08001f7d 	.word	0x08001f7d
 8001f70:	08001839 	.word	0x08001839

08001f74 <MCP_OnTimeOut>:
{
 8001f74:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 8001f76:	f7ff ffcf 	bl	8001f18 <MCP_WaitNextFrame>
}
 8001f7a:	bd08      	pop	{r3, pc}

08001f7c <MCP_SentFrame>:
{
 8001f7c:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8001f7e:	f7ff ffcb 	bl	8001f18 <MCP_WaitNextFrame>
}
 8001f82:	bd08      	pop	{r3, pc}

08001f84 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001f84:	b530      	push	{r4, r5, lr}
 8001f86:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001f88:	f001 fef8 	bl	8003d7c <HAL_RCC_GetHCLKFreq>
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001f8e:	4d0c      	ldr	r5, [pc, #48]	; (8001fc0 <MX_MotorControl_Init+0x3c>)
 8001f90:	4c0c      	ldr	r4, [pc, #48]	; (8001fc4 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001f92:	fba3 3000 	umull	r3, r0, r3, r0
 8001f96:	09c0      	lsrs	r0, r0, #7
 8001f98:	f001 fac8 	bl	800352c <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	f7ff f8de 	bl	8001160 <MCboot>
  mc_lock_pins();
 8001fa4:	f7ff fbcc 	bl	8001740 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001fa8:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <MX_MotorControl_Init+0x44>)
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	4807      	ldr	r0, [pc, #28]	; (8001fcc <MX_MotorControl_Init+0x48>)
 8001fae:	462b      	mov	r3, r5
 8001fb0:	4622      	mov	r2, r4
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	f000 fbe6 	bl	8002784 <UI_TaskInit>
}
 8001fb8:	b003      	add	sp, #12
 8001fba:	bd30      	pop	{r4, r5, pc}
 8001fbc:	10624dd3 	.word	0x10624dd3
 8001fc0:	200008bc 	.word	0x200008bc
 8001fc4:	200008b8 	.word	0x200008b8
 8001fc8:	08007294 	.word	0x08007294
 8001fcc:	2000056c 	.word	0x2000056c

08001fd0 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001fd0:	4b6b      	ldr	r3, [pc, #428]	; (8002180 <RCM_RegisterRegConv+0x1b0>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
{
 8001fd4:	b570      	push	{r4, r5, r6, lr}
 8001fd6:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001fd8:	2a00      	cmp	r2, #0
 8001fda:	d02f      	beq.n	800203c <RCM_RegisterRegConv+0x6c>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001fdc:	f890 c004 	ldrb.w	ip, [r0, #4]
 8001fe0:	7910      	ldrb	r0, [r2, #4]
 8001fe2:	4584      	cmp	ip, r0
 8001fe4:	d01d      	beq.n	8002022 <RCM_RegisterRegConv+0x52>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001fe6:	685c      	ldr	r4, [r3, #4]
 8001fe8:	2c00      	cmp	r4, #0
 8001fea:	f000 80ac 	beq.w	8002146 <RCM_RegisterRegConv+0x176>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001fee:	7922      	ldrb	r2, [r4, #4]
 8001ff0:	4562      	cmp	r2, ip
  uint8_t handle=255;
 8001ff2:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001ff6:	d02b      	beq.n	8002050 <RCM_RegisterRegConv+0x80>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001ff8:	689c      	ldr	r4, [r3, #8]
 8001ffa:	2c00      	cmp	r4, #0
 8001ffc:	f000 808f 	beq.w	800211e <RCM_RegisterRegConv+0x14e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002000:	7922      	ldrb	r2, [r4, #4]
 8002002:	4562      	cmp	r2, ip
 8002004:	d02a      	beq.n	800205c <RCM_RegisterRegConv+0x8c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002006:	68dc      	ldr	r4, [r3, #12]
 8002008:	2c00      	cmp	r4, #0
 800200a:	f000 8091 	beq.w	8002130 <RCM_RegisterRegConv+0x160>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800200e:	7922      	ldrb	r2, [r4, #4]
 8002010:	4562      	cmp	r2, ip
 8002012:	f000 8092 	beq.w	800213a <RCM_RegisterRegConv+0x16a>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8002016:	2803      	cmp	r0, #3
 8002018:	bf88      	it	hi
 800201a:	20ff      	movhi	r0, #255	; 0xff
 800201c:	f240 80a1 	bls.w	8002162 <RCM_RegisterRegConv+0x192>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8002020:	bd70      	pop	{r4, r5, r6, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002022:	6810      	ldr	r0, [r2, #0]
 8002024:	680a      	ldr	r2, [r1, #0]
 8002026:	4290      	cmp	r0, r2
 8002028:	d01e      	beq.n	8002068 <RCM_RegisterRegConv+0x98>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800202a:	685c      	ldr	r4, [r3, #4]
 800202c:	2c00      	cmp	r4, #0
 800202e:	d1de      	bne.n	8001fee <RCM_RegisterRegConv+0x1e>
 8002030:	689c      	ldr	r4, [r3, #8]
 8002032:	2c00      	cmp	r4, #0
 8002034:	f000 809a 	beq.w	800216c <RCM_RegisterRegConv+0x19c>
      i++;
 8002038:	2001      	movs	r0, #1
 800203a:	e7e1      	b.n	8002000 <RCM_RegisterRegConv+0x30>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800203c:	685c      	ldr	r4, [r3, #4]
 800203e:	2c00      	cmp	r4, #0
 8002040:	f000 808d 	beq.w	800215e <RCM_RegisterRegConv+0x18e>
 8002044:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 8002048:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800204a:	7922      	ldrb	r2, [r4, #4]
 800204c:	4562      	cmp	r2, ip
 800204e:	d1d3      	bne.n	8001ff8 <RCM_RegisterRegConv+0x28>
 8002050:	6824      	ldr	r4, [r4, #0]
 8002052:	680a      	ldr	r2, [r1, #0]
 8002054:	4294      	cmp	r4, r2
 8002056:	d1cf      	bne.n	8001ff8 <RCM_RegisterRegConv+0x28>
      i++;
 8002058:	2001      	movs	r0, #1
    if (handle < RCM_MAX_CONV )
 800205a:	e006      	b.n	800206a <RCM_RegisterRegConv+0x9a>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800205c:	6824      	ldr	r4, [r4, #0]
 800205e:	680a      	ldr	r2, [r1, #0]
 8002060:	4294      	cmp	r4, r2
 8002062:	d1d0      	bne.n	8002006 <RCM_RegisterRegConv+0x36>
      i++;
 8002064:	2002      	movs	r0, #2
 8002066:	e000      	b.n	800206a <RCM_RegisterRegConv+0x9a>
  uint8_t i=0;
 8002068:	2000      	movs	r0, #0
      RCM_handle_array [handle] = regConv;
 800206a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800206e:	6893      	ldr	r3, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002070:	4c44      	ldr	r4, [pc, #272]	; (8002184 <RCM_RegisterRegConv+0x1b4>)
 8002072:	2500      	movs	r5, #0
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8002074:	07db      	lsls	r3, r3, #31
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002076:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 800207a:	d411      	bmi.n	80020a0 <RCM_RegisterRegConv+0xd0>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800207c:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 800207e:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8002082:	f023 0320 	bic.w	r3, r3, #32
 8002086:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8002088:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800208a:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800208c:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8002090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002094:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002096:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8002098:	6893      	ldr	r3, [r2, #8]
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80020a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80020a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80020a6:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80020a8:	790b      	ldrb	r3, [r1, #4]
 80020aa:	2b09      	cmp	r3, #9
 80020ac:	d82d      	bhi.n	800210a <RCM_RegisterRegConv+0x13a>
 80020ae:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 80020b2:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 80020b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020ba:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020be:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80020c2:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80020c6:	fab4 f484 	clz	r4, r4
 80020ca:	fa2e fe04 	lsr.w	lr, lr, r4
 80020ce:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 80020d0:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 80020d4:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 80020d8:	f04f 7cf8 	mov.w	ip, #32505856	; 0x1f00000
 80020dc:	fa9c f5ac 	rbit	r5, ip
 80020e0:	fab5 f585 	clz	r5, r5
 80020e4:	fa9c fcac 	rbit	ip, ip
 80020e8:	688e      	ldr	r6, [r1, #8]
 80020ea:	fabc fc8c 	clz	ip, ip
 80020ee:	fa23 f105 	lsr.w	r1, r3, r5
 80020f2:	fa23 f30c 	lsr.w	r3, r3, ip
 80020f6:	fa06 f503 	lsl.w	r5, r6, r3
 80020fa:	2307      	movs	r3, #7
 80020fc:	408b      	lsls	r3, r1
 80020fe:	ea24 0303 	bic.w	r3, r4, r3
 8002102:	432b      	orrs	r3, r5
 8002104:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
}
 8002108:	bd70      	pop	{r4, r5, r6, pc}
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 800210a:	2403      	movs	r4, #3
 800210c:	f06f 051d 	mvn.w	r5, #29
 8002110:	fb14 5403 	smlabb	r4, r4, r3, r5
 8002114:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8002118:	f003 7e00 	and.w	lr, r3, #33554432	; 0x2000000
 800211c:	e7cf      	b.n	80020be <RCM_RegisterRegConv+0xee>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800211e:	2804      	cmp	r0, #4
 8002120:	d917      	bls.n	8002152 <RCM_RegisterRegConv+0x182>
 8002122:	68dc      	ldr	r4, [r3, #12]
 8002124:	b114      	cbz	r4, 800212c <RCM_RegisterRegConv+0x15c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002126:	7922      	ldrb	r2, [r4, #4]
 8002128:	4562      	cmp	r2, ip
 800212a:	d01c      	beq.n	8002166 <RCM_RegisterRegConv+0x196>
 800212c:	680a      	ldr	r2, [r1, #0]
 800212e:	e799      	b.n	8002064 <RCM_RegisterRegConv+0x94>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002130:	2804      	cmp	r0, #4
 8002132:	680a      	ldr	r2, [r1, #0]
 8002134:	d999      	bls.n	800206a <RCM_RegisterRegConv+0x9a>
      i++;
 8002136:	2003      	movs	r0, #3
 8002138:	e797      	b.n	800206a <RCM_RegisterRegConv+0x9a>
 800213a:	680a      	ldr	r2, [r1, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800213c:	6824      	ldr	r4, [r4, #0]
 800213e:	4294      	cmp	r4, r2
 8002140:	f47f af69 	bne.w	8002016 <RCM_RegisterRegConv+0x46>
 8002144:	e7f7      	b.n	8002136 <RCM_RegisterRegConv+0x166>
      i++;
 8002146:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002148:	689c      	ldr	r4, [r3, #8]
 800214a:	b11c      	cbz	r4, 8002154 <RCM_RegisterRegConv+0x184>
 800214c:	f891 c004 	ldrb.w	ip, [r1, #4]
 8002150:	e756      	b.n	8002000 <RCM_RegisterRegConv+0x30>
 8002152:	4620      	mov	r0, r4
 8002154:	68dc      	ldr	r4, [r3, #12]
 8002156:	b124      	cbz	r4, 8002162 <RCM_RegisterRegConv+0x192>
 8002158:	f891 c004 	ldrb.w	ip, [r1, #4]
 800215c:	e757      	b.n	800200e <RCM_RegisterRegConv+0x3e>
  uint8_t i=0;
 800215e:	4620      	mov	r0, r4
 8002160:	e7f2      	b.n	8002148 <RCM_RegisterRegConv+0x178>
 8002162:	680a      	ldr	r2, [r1, #0]
 8002164:	e781      	b.n	800206a <RCM_RegisterRegConv+0x9a>
 8002166:	680a      	ldr	r2, [r1, #0]
      i++;
 8002168:	2002      	movs	r0, #2
 800216a:	e7e7      	b.n	800213c <RCM_RegisterRegConv+0x16c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800216c:	68dc      	ldr	r4, [r3, #12]
 800216e:	2c00      	cmp	r4, #0
 8002170:	f43f af72 	beq.w	8002058 <RCM_RegisterRegConv+0x88>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002174:	7920      	ldrb	r0, [r4, #4]
 8002176:	4560      	cmp	r0, ip
 8002178:	f47f af6e 	bne.w	8002058 <RCM_RegisterRegConv+0x88>
      i++;
 800217c:	2001      	movs	r0, #1
 800217e:	e7dd      	b.n	800213c <RCM_RegisterRegConv+0x16c>
 8002180:	200008e4 	.word	0x200008e4
 8002184:	200008c0 	.word	0x200008c0

08002188 <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <RCM_ExecRegularConv+0x70>)
 800218a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800218e:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	2b09      	cmp	r3, #9
 8002194:	d827      	bhi.n	80021e6 <RCM_ExecRegularConv+0x5e>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002196:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800219a:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800219e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021a2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80021a6:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80021aa:	f44f 7c00 	mov.w	ip, #512	; 0x200
 80021ae:	fab1 f181 	clz	r1, r1
 80021b2:	f102 002c 	add.w	r0, r2, #44	; 0x2c
 80021b6:	fa2c fc01 	lsr.w	ip, ip, r1
  MODIFY_REG(*preg,
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
 80021c2:	f021 011f 	bic.w	r1, r1, #31
 80021c6:	430b      	orrs	r3, r1

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET ( &RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos );
 80021c8:	0151      	lsls	r1, r2, #5
 80021ca:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
 80021ce:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 80021d2:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80021d4:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 80021d6:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 80021da:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOCS( RCM_handle_array[handle]->regADC ) == 0u ) {}
 80021dc:	079b      	lsls	r3, r3, #30
 80021de:	d5fc      	bpl.n	80021da <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80021e0:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 80021e2:	b280      	uxth	r0, r0
 80021e4:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80021e6:	2103      	movs	r1, #3
 80021e8:	f06f 001d 	mvn.w	r0, #29
 80021ec:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80021f0:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 80021f4:	e7d5      	b.n	80021a2 <RCM_ExecRegularConv+0x1a>
 80021f6:	bf00      	nop
 80021f8:	200008e4 	.word	0x200008e4

080021fc <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 80021fc:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 80021fe:	4c0f      	ldr	r4, [pc, #60]	; (800223c <RCM_ExecUserConv+0x40>)
 8002200:	7823      	ldrb	r3, [r4, #0]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d000      	beq.n	8002208 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8002206:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002208:	4d0d      	ldr	r5, [pc, #52]	; (8002240 <RCM_ExecUserConv+0x44>)
 800220a:	7828      	ldrb	r0, [r5, #0]
 800220c:	f7ff ffbc 	bl	8002188 <RCM_ExecRegularConv>
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002210:	f895 c000 	ldrb.w	ip, [r5]
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <RCM_ExecUserConv+0x48>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002216:	4a0c      	ldr	r2, [pc, #48]	; (8002248 <RCM_ExecUserConv+0x4c>)
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002218:	f853 503c 	ldr.w	r5, [r3, ip, lsl #3]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 800221c:	8010      	strh	r0, [r2, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 800221e:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8002220:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 8002222:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8002224:	2d00      	cmp	r5, #0
 8002226:	d0ee      	beq.n	8002206 <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002228:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800222c:	4660      	mov	r0, ip
 800222e:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8002230:	2300      	movs	r3, #0
 8002232:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002234:	462b      	mov	r3, r5
}
 8002236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800223a:	4718      	bx	r3
 800223c:	200008e1 	.word	0x200008e1
 8002240:	200008e0 	.word	0x200008e0
 8002244:	200008c0 	.word	0x200008c0
 8002248:	200008e2 	.word	0x200008e2

0800224c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800224c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HAL_MspInit+0x38>)
 8002250:	2100      	movs	r1, #0
 8002252:	9100      	str	r1, [sp, #0]
 8002254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800225a:	645a      	str	r2, [r3, #68]	; 0x44
 800225c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800225e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002262:	9200      	str	r2, [sp, #0]
 8002264:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	9101      	str	r1, [sp, #4]
 8002268:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800226a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800226e:	641a      	str	r2, [r3, #64]	; 0x40
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002276:	9301      	str	r3, [sp, #4]
 8002278:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800227a:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800227c:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800227e:	f001 b8f7 	b.w	8003470 <HAL_NVIC_SetPriorityGrouping>
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800

08002288 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002288:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800228a:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <HAL_ADC_MspInit+0x80>)
 800228c:	6802      	ldr	r2, [r0, #0]
{
 800228e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8002292:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002298:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800229c:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 800229e:	d001      	beq.n	80022a4 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022a0:	b00a      	add	sp, #40	; 0x28
 80022a2:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022a4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80022a8:	9401      	str	r4, [sp, #4]
 80022aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ac:	4817      	ldr	r0, [pc, #92]	; (800230c <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022b2:	645a      	str	r2, [r3, #68]	; 0x44
 80022b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022b6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80022ba:	9201      	str	r2, [sp, #4]
 80022bc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022be:	9402      	str	r4, [sp, #8]
 80022c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022c2:	f042 0204 	orr.w	r2, r2, #4
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
 80022c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ca:	f002 0204 	and.w	r2, r2, #4
 80022ce:	9202      	str	r2, [sp, #8]
 80022d0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	9403      	str	r4, [sp, #12]
 80022d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	631a      	str	r2, [r3, #48]	; 0x30
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 80022e4:	2603      	movs	r6, #3
 80022e6:	2703      	movs	r7, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e8:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ea:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin;
 80022ec:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f0:	f001 f996 	bl	8003620 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f4:	4806      	ldr	r0, [pc, #24]	; (8002310 <HAL_ADC_MspInit+0x88>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 80022fa:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fe:	f001 f98f 	bl	8003620 <HAL_GPIO_Init>
}
 8002302:	b00a      	add	sp, #40	; 0x28
 8002304:	bdd0      	pop	{r4, r6, r7, pc}
 8002306:	bf00      	nop
 8002308:	40012000 	.word	0x40012000
 800230c:	40020800 	.word	0x40020800
 8002310:	40020000 	.word	0x40020000

08002314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002314:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8002316:	6803      	ldr	r3, [r0, #0]
 8002318:	4941      	ldr	r1, [pc, #260]	; (8002420 <HAL_TIM_Base_MspInit+0x10c>)
{
 800231a:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	2200      	movs	r2, #0
  if(htim_base->Instance==TIM1)
 800231e:	428b      	cmp	r3, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	e9cd 2206 	strd	r2, r2, [sp, #24]
 8002324:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8002328:	920a      	str	r2, [sp, #40]	; 0x28
  if(htim_base->Instance==TIM1)
 800232a:	d00a      	beq.n	8002342 <HAL_TIM_Base_MspInit+0x2e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800232c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002330:	d028      	beq.n	8002384 <HAL_TIM_Base_MspInit+0x70>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8002332:	493c      	ldr	r1, [pc, #240]	; (8002424 <HAL_TIM_Base_MspInit+0x110>)
 8002334:	428b      	cmp	r3, r1
 8002336:	d011      	beq.n	800235c <HAL_TIM_Base_MspInit+0x48>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8002338:	493b      	ldr	r1, [pc, #236]	; (8002428 <HAL_TIM_Base_MspInit+0x114>)
 800233a:	428b      	cmp	r3, r1
 800233c:	d05d      	beq.n	80023fa <HAL_TIM_Base_MspInit+0xe6>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800233e:	b00c      	add	sp, #48	; 0x30
 8002340:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002342:	4b3a      	ldr	r3, [pc, #232]	; (800242c <HAL_TIM_Base_MspInit+0x118>)
 8002344:	9200      	str	r2, [sp, #0]
 8002346:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002348:	f042 0201 	orr.w	r2, r2, #1
 800234c:	645a      	str	r2, [r3, #68]	; 0x44
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	9b00      	ldr	r3, [sp, #0]
}
 8002358:	b00c      	add	sp, #48	; 0x30
 800235a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800235c:	4b33      	ldr	r3, [pc, #204]	; (800242c <HAL_TIM_Base_MspInit+0x118>)
 800235e:	9204      	str	r2, [sp, #16]
 8002360:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002362:	f041 0102 	orr.w	r1, r1, #2
 8002366:	6419      	str	r1, [r3, #64]	; 0x40
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	f003 0302 	and.w	r3, r3, #2
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800236e:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002370:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002372:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002374:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002376:	f001 f88d 	bl	8003494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800237a:	201d      	movs	r0, #29
 800237c:	f001 f8c8 	bl	8003510 <HAL_NVIC_EnableIRQ>
}
 8002380:	b00c      	add	sp, #48	; 0x30
 8002382:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002384:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8002388:	9201      	str	r2, [sp, #4]
 800238a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238c:	4828      	ldr	r0, [pc, #160]	; (8002430 <HAL_TIM_Base_MspInit+0x11c>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 800238e:	f041 0101 	orr.w	r1, r1, #1
 8002392:	6419      	str	r1, [r3, #64]	; 0x40
 8002394:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002396:	f001 0101 	and.w	r1, r1, #1
 800239a:	9101      	str	r1, [sp, #4]
 800239c:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239e:	9202      	str	r2, [sp, #8]
 80023a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023a2:	f041 0102 	orr.w	r1, r1, #2
 80023a6:	6319      	str	r1, [r3, #48]	; 0x30
 80023a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023aa:	f001 0102 	and.w	r1, r1, #2
 80023ae:	9102      	str	r1, [sp, #8]
 80023b0:	9902      	ldr	r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b2:	9203      	str	r2, [sp, #12]
 80023b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023b6:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b8:	4322      	orrs	r2, r4
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4023      	ands	r3, r4
 80023c0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H2_Pin;
 80023c2:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80023c6:	2302      	movs	r3, #2
 80023c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023cc:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ce:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023d0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d4:	9a03      	ldr	r2, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d6:	f001 f923 	bl	8003620 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 80023da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80023de:	2302      	movs	r3, #2
 80023e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 80023e4:	4813      	ldr	r0, [pc, #76]	; (8002434 <HAL_TIM_Base_MspInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023e6:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 80023e8:	2200      	movs	r2, #0
 80023ea:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 80023ec:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_HALL_H1_Pin;
 80023ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(M1_HALL_H1_GPIO_Port, &GPIO_InitStruct);
 80023f2:	f001 f915 	bl	8003620 <HAL_GPIO_Init>
}
 80023f6:	b00c      	add	sp, #48	; 0x30
 80023f8:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023fa:	4b0c      	ldr	r3, [pc, #48]	; (800242c <HAL_TIM_Base_MspInit+0x118>)
 80023fc:	9205      	str	r2, [sp, #20]
 80023fe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002400:	f041 0104 	orr.w	r1, r1, #4
 8002404:	6419      	str	r1, [r3, #64]	; 0x40
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800240e:	201e      	movs	r0, #30
 8002410:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002412:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002414:	f001 f83e 	bl	8003494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002418:	201e      	movs	r0, #30
 800241a:	f001 f879 	bl	8003510 <HAL_NVIC_EnableIRQ>
}
 800241e:	e78e      	b.n	800233e <HAL_TIM_Base_MspInit+0x2a>
 8002420:	40010000 	.word	0x40010000
 8002424:	40000400 	.word	0x40000400
 8002428:	40000800 	.word	0x40000800
 800242c:	40023800 	.word	0x40023800
 8002430:	40020400 	.word	0x40020400
 8002434:	40020000 	.word	0x40020000

08002438 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002438:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800243a:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <HAL_TIM_MspPostInit+0x80>)
 800243c:	6801      	ldr	r1, [r0, #0]
{
 800243e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002440:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8002442:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002448:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800244c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 800244e:	d001      	beq.n	8002454 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002450:	b008      	add	sp, #32
 8002452:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002454:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	6b11      	ldr	r1, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245c:	4817      	ldr	r0, [pc, #92]	; (80024bc <HAL_TIM_MspPostInit+0x84>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	f041 0101 	orr.w	r1, r1, #1
 8002462:	6311      	str	r1, [r2, #48]	; 0x30
 8002464:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002466:	f001 0101 	and.w	r1, r1, #1
 800246a:	9100      	str	r1, [sp, #0]
 800246c:	9900      	ldr	r1, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	6313      	str	r3, [r2, #48]	; 0x30
 8002478:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002482:	2401      	movs	r4, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002484:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002486:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 800248a:	2302      	movs	r3, #2
 800248c:	2602      	movs	r6, #2
 800248e:	2702      	movs	r7, #2
 8002490:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002494:	e9cd 6704 	strd	r6, r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002498:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249a:	f001 f8c1 	bl	8003620 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800249e:	2203      	movs	r2, #3
 80024a0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a2:	4807      	ldr	r0, [pc, #28]	; (80024c0 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024a4:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 80024a8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80024ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b0:	f001 f8b6 	bl	8003620 <HAL_GPIO_Init>
}
 80024b4:	b008      	add	sp, #32
 80024b6:	bdd0      	pop	{r4, r6, r7, pc}
 80024b8:	40010000 	.word	0x40010000
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40020400 	.word	0x40020400
 80024c4:	00000000 	.word	0x00000000

080024c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024c8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 80024ca:	6803      	ldr	r3, [r0, #0]
 80024cc:	4a30      	ldr	r2, [pc, #192]	; (8002590 <HAL_UART_MspInit+0xc8>)
{
 80024ce:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 80024d2:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80024d8:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80024dc:	9408      	str	r4, [sp, #32]
  if(huart->Instance==USART1)
 80024de:	d004      	beq.n	80024ea <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80024e0:	4a2c      	ldr	r2, [pc, #176]	; (8002594 <HAL_UART_MspInit+0xcc>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d02c      	beq.n	8002540 <HAL_UART_MspInit+0x78>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024e6:	b00b      	add	sp, #44	; 0x2c
 80024e8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ea:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <HAL_UART_MspInit+0xd0>)
 80024ec:	9400      	str	r4, [sp, #0]
 80024ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024f0:	482a      	ldr	r0, [pc, #168]	; (800259c <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80024f2:	f042 0210 	orr.w	r2, r2, #16
 80024f6:	645a      	str	r2, [r3, #68]	; 0x44
 80024f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024fa:	f002 0210 	and.w	r2, r2, #16
 80024fe:	9200      	str	r2, [sp, #0]
 8002500:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002502:	9401      	str	r4, [sp, #4]
 8002504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002506:	f042 0202 	orr.w	r2, r2, #2
 800250a:	631a      	str	r2, [r3, #48]	; 0x30
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002514:	22c0      	movs	r2, #192	; 0xc0
 8002516:	2302      	movs	r3, #2
 8002518:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800251e:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002522:	e9cd 2307 	strd	r2, r3, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002526:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002528:	f001 f87a 	bl	8003620 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800252c:	4622      	mov	r2, r4
 800252e:	4621      	mov	r1, r4
 8002530:	2025      	movs	r0, #37	; 0x25
 8002532:	f000 ffaf 	bl	8003494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002536:	2025      	movs	r0, #37	; 0x25
 8002538:	f000 ffea 	bl	8003510 <HAL_NVIC_EnableIRQ>
}
 800253c:	b00b      	add	sp, #44	; 0x2c
 800253e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002540:	4b15      	ldr	r3, [pc, #84]	; (8002598 <HAL_UART_MspInit+0xd0>)
 8002542:	9402      	str	r4, [sp, #8]
 8002544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	4816      	ldr	r0, [pc, #88]	; (80025a0 <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002548:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800254c:	641a      	str	r2, [r3, #64]	; 0x40
 800254e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002550:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002554:	9202      	str	r2, [sp, #8]
 8002556:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002558:	9403      	str	r4, [sp, #12]
 800255a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	631a      	str	r2, [r3, #48]	; 0x30
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002564:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8002588 <HAL_UART_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002570:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002572:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002576:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002578:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257a:	f001 f851 	bl	8003620 <HAL_GPIO_Init>
}
 800257e:	b00b      	add	sp, #44	; 0x2c
 8002580:	bd30      	pop	{r4, r5, pc}
 8002582:	bf00      	nop
 8002584:	f3af 8000 	nop.w
 8002588:	0000000c 	.word	0x0000000c
 800258c:	00000002 	.word	0x00000002
 8002590:	40011000 	.word	0x40011000
 8002594:	40004400 	.word	0x40004400
 8002598:	40023800 	.word	0x40023800
 800259c:	40020400 	.word	0x40020400
 80025a0:	40020000 	.word	0x40020000

080025a4 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025a4:	4801      	ldr	r0, [pc, #4]	; (80025ac <TIM3_IRQHandler+0x8>)
 80025a6:	f001 bf8b 	b.w	80044c0 <HAL_TIM_IRQHandler>
 80025aa:	bf00      	nop
 80025ac:	20000688 	.word	0x20000688

080025b0 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025b0:	4801      	ldr	r0, [pc, #4]	; (80025b8 <TIM4_IRQHandler+0x8>)
 80025b2:	f001 bf85 	b.w	80044c0 <HAL_TIM_IRQHandler>
 80025b6:	bf00      	nop
 80025b8:	200006d0 	.word	0x200006d0

080025bc <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025bc:	4801      	ldr	r0, [pc, #4]	; (80025c4 <USART1_IRQHandler+0x8>)
 80025be:	f002 bb99 	b.w	8004cf4 <HAL_UART_IRQHandler>
 80025c2:	bf00      	nop
 80025c4:	20000718 	.word	0x20000718

080025c8 <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <ADC_IRQHandler+0x18>)
 80025ca:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 80025cc:	0752      	lsls	r2, r2, #29
 80025ce:	d400      	bmi.n	80025d2 <ADC_IRQHandler+0xa>
  }
#endif
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80025d0:	4770      	bx	lr
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	f022 020c 	bic.w	r2, r2, #12
 80025d8:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 80025da:	f7fe bfc1 	b.w	8001560 <TSK_HighFrequencyTask>
 80025de:	bf00      	nop
 80025e0:	40012000 	.word	0x40012000

080025e4 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 80025e4:	4803      	ldr	r0, [pc, #12]	; (80025f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80025e6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80025e8:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80025ea:	f06f 0201 	mvn.w	r2, #1
 80025ee:	611a      	str	r2, [r3, #16]
  R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80025f0:	f003 bfd0 	b.w	8006594 <R3_1_TIMx_UP_IRQHandler>
 80025f4:	20000318 	.word	0x20000318

080025f8 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 80025f8:	4807      	ldr	r0, [pc, #28]	; (8002618 <TIM1_BRK_TIM9_IRQHandler+0x20>)
{
 80025fa:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 80025fc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80025fe:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	0612      	lsls	r2, r2, #24
 8002604:	d504      	bpl.n	8002610 <TIM1_BRK_TIM9_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002606:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800260a:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);
 800260c:	f003 ffe0 	bl	80065d0 <R3_1_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8002610:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8002614:	f7fe bf78 	b.w	8001508 <MC_Scheduler>
 8002618:	20000318 	.word	0x20000318

0800261c <TIM2_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 800261c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 800261e:	4c0c      	ldr	r4, [pc, #48]	; (8002650 <TIM2_IRQHandler+0x34>)
 8002620:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	07d1      	lsls	r1, r2, #31
 8002626:	d40b      	bmi.n	8002640 <TIM2_IRQHandler+0x24>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8002628:	691a      	ldr	r2, [r3, #16]
 800262a:	0792      	lsls	r2, r2, #30
 800262c:	d507      	bpl.n	800263e <TIM2_IRQHandler+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800262e:	f06f 0202 	mvn.w	r2, #2
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8002632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8002636:	4806      	ldr	r0, [pc, #24]	; (8002650 <TIM2_IRQHandler+0x34>)
 8002638:	611a      	str	r2, [r3, #16]
 800263a:	f002 bee5 	b.w	8005408 <HALL_TIMx_CC_IRQHandler>
}
 800263e:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002640:	f06f 0201 	mvn.w	r2, #1
 8002644:	611a      	str	r2, [r3, #16]
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 8002646:	4620      	mov	r0, r4
 8002648:	f003 f884 	bl	8005754 <HALL_TIMx_UP_IRQHandler>
  if (LL_TIM_IsActiveFlag_CC1 (HALL_M1.TIMx))
 800264c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800264e:	e7eb      	b.n	8002628 <TIM2_IRQHandler+0xc>
 8002650:	200000b8 	.word	0x200000b8

08002654 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8002654:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002656:	4c1f      	ldr	r4, [pc, #124]	; (80026d4 <USART2_IRQHandler+0x80>)
 8002658:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	0691      	lsls	r1, r2, #26
{
 8002660:	b082      	sub	sp, #8
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002662:	d407      	bmi.n	8002674 <USART2_IRQHandler+0x20>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002664:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002666:	0612      	lsls	r2, r2, #24
 8002668:	d413      	bmi.n	8002692 <USART2_IRQHandler+0x3e>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800266a:	681b      	ldr	r3, [r3, #0]
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800266c:	071b      	lsls	r3, r3, #28
 800266e:	d418      	bmi.n	80026a2 <USART2_IRQHandler+0x4e>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8002670:	b002      	add	sp, #8
 8002672:	bd10      	pop	{r4, pc}
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002674:	6859      	ldr	r1, [r3, #4]
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8002676:	4620      	mov	r0, r4
 8002678:	b2c9      	uxtb	r1, r1
 800267a:	f004 fbd3 	bl	8006e24 <UFCP_RX_IRQ_Handler>
 800267e:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8002680:	2b01      	cmp	r3, #1
 8002682:	d021      	beq.n	80026c8 <USART2_IRQHandler+0x74>
    if (retVal == 2)
 8002684:	2b02      	cmp	r3, #2
 8002686:	d01c      	beq.n	80026c2 <USART2_IRQHandler+0x6e>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002688:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	0612      	lsls	r2, r2, #24
 8002690:	d5eb      	bpl.n	800266a <USART2_IRQHandler+0x16>
    UFCP_TX_IRQ_Handler(&pUSART);
 8002692:	4810      	ldr	r0, [pc, #64]	; (80026d4 <USART2_IRQHandler+0x80>)
 8002694:	f004 fb1e 	bl	8006cd4 <UFCP_TX_IRQ_Handler>
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002698:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	071b      	lsls	r3, r3, #28
 80026a0:	d5e6      	bpl.n	8002670 <USART2_IRQHandler+0x1c>
    UFCP_OVR_IRQ_Handler(&pUSART);
 80026a2:	480c      	ldr	r0, [pc, #48]	; (80026d4 <USART2_IRQHandler+0x80>)
 80026a4:	f004 fc2a 	bl	8006efc <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80026a8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80026b0:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 80026b6:	9b01      	ldr	r3, [sp, #4]
}
 80026b8:	b002      	add	sp, #8
 80026ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    UI_SerialCommunicationTimeOutStop();
 80026be:	f000 b8c5 	b.w	800284c <UI_SerialCommunicationTimeOutStop>
      UI_SerialCommunicationTimeOutStop();
 80026c2:	f000 f8c3 	bl	800284c <UI_SerialCommunicationTimeOutStop>
 80026c6:	e7df      	b.n	8002688 <USART2_IRQHandler+0x34>
      UI_SerialCommunicationTimeOutStart();
 80026c8:	f000 f8c6 	bl	8002858 <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80026cc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80026d0:	e7c8      	b.n	8002664 <USART2_IRQHandler+0x10>
 80026d2:	bf00      	nop
 80026d4:	20000430 	.word	0x20000430

080026d8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80026d8:	b510      	push	{r4, lr}
 80026da:	b082      	sub	sp, #8
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80026dc:	f7ff f820 	bl	8001720 <TSK_HardwareFaultTask>
 80026e0:	4c1b      	ldr	r4, [pc, #108]	; (8002750 <HardFault_Handler+0x78>)

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80026e2:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	0712      	lsls	r2, r2, #28
 80026ea:	d41d      	bmi.n	8002728 <HardFault_Handler+0x50>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80026ec:	681a      	ldr	r2, [r3, #0]
        UFCP_OVR_IRQ_Handler(&pUSART);
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
        UI_SerialCommunicationTimeOutStop();
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80026ee:	0610      	lsls	r0, r2, #24
 80026f0:	d40f      	bmi.n	8002712 <HardFault_Handler+0x3a>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80026f2:	681a      	ldr	r2, [r3, #0]
      {
        UFCP_TX_IRQ_Handler(&pUSART);
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80026f4:	0692      	lsls	r2, r2, #26
 80026f6:	d5f6      	bpl.n	80026e6 <HardFault_Handler+0xe>
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80026f8:	6859      	ldr	r1, [r3, #4]
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 80026fa:	4620      	mov	r0, r4
 80026fc:	b2c9      	uxtb	r1, r1
 80026fe:	f004 fb91 	bl	8006e24 <UFCP_RX_IRQ_Handler>
 8002702:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8002704:	2b01      	cmp	r3, #1
 8002706:	d01f      	beq.n	8002748 <HardFault_Handler+0x70>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8002708:	2b02      	cmp	r3, #2
 800270a:	d1ea      	bne.n	80026e2 <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 800270c:	f000 f89e 	bl	800284c <UI_SerialCommunicationTimeOutStop>
 8002710:	e7e7      	b.n	80026e2 <HardFault_Handler+0xa>
        UFCP_TX_IRQ_Handler(&pUSART);
 8002712:	4620      	mov	r0, r4
 8002714:	f004 fade 	bl	8006cd4 <UFCP_TX_IRQ_Handler>
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002718:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	0691      	lsls	r1, r2, #26
 8002720:	d4ea      	bmi.n	80026f8 <HardFault_Handler+0x20>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002722:	681a      	ldr	r2, [r3, #0]
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002724:	0712      	lsls	r2, r2, #28
 8002726:	d5e1      	bpl.n	80026ec <HardFault_Handler+0x14>
        UFCP_OVR_IRQ_Handler(&pUSART);
 8002728:	4620      	mov	r0, r4
 800272a:	f004 fbe7 	bl	8006efc <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 800272e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  tmpreg = USARTx->SR;
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8002736:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800273c:	9b01      	ldr	r3, [sp, #4]
        UI_SerialCommunicationTimeOutStop();
 800273e:	f000 f885 	bl	800284c <UI_SerialCommunicationTimeOutStop>
      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002742:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002746:	e7d1      	b.n	80026ec <HardFault_Handler+0x14>
          UI_SerialCommunicationTimeOutStart();
 8002748:	f000 f886 	bl	8002858 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 800274c:	e7c9      	b.n	80026e2 <HardFault_Handler+0xa>
 800274e:	bf00      	nop
 8002750:	20000430 	.word	0x20000430

08002754 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002754:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002756:	4c0a      	ldr	r4, [pc, #40]	; (8002780 <SysTick_Handler+0x2c>)
 8002758:	7823      	ldrb	r3, [r4, #0]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d006      	beq.n	800276c <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 800275e:	3301      	adds	r3, #1
 8002760:	b2db      	uxtb	r3, r3
 8002762:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8002764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8002768:	f7fe bfca 	b.w	8001700 <MC_RunMotorControlTasks>
    HAL_IncTick();
 800276c:	f000 fc3a 	bl	8002fe4 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002770:	f000 fef8 	bl	8003564 <HAL_SYSTICK_IRQHandler>
 8002774:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8002776:	7023      	strb	r3, [r4, #0]
}
 8002778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 800277c:	f7fe bfc0 	b.w	8001700 <MC_RunMotorControlTasks>
 8002780:	20000570 	.word	0x20000570

08002784 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8002784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    pMCP = &MCP_UI_Params;
 8002788:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80027fc <UI_TaskInit+0x78>
    pMCP->_Super = UI_Params;
 800278c:	f8df e070 	ldr.w	lr, [pc, #112]	; 8002800 <UI_TaskInit+0x7c>

    UFCP_Init( & pUSART );
 8002790:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8002804 <UI_TaskInit+0x80>
{
 8002794:	461e      	mov	r6, r3
    pMCP = &MCP_UI_Params;
 8002796:	4b15      	ldr	r3, [pc, #84]	; (80027ec <UI_TaskInit+0x68>)
 8002798:	f8c8 3000 	str.w	r3, [r8]
{
 800279c:	4607      	mov	r7, r0
 800279e:	460c      	mov	r4, r1
 80027a0:	4615      	mov	r5, r2
    pMCP->_Super = UI_Params;
 80027a2:	469c      	mov	ip, r3
 80027a4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80027a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80027ac:	e89e 0003 	ldmia.w	lr, {r0, r1}
{
 80027b0:	b082      	sub	sp, #8
    pMCP->_Super = UI_Params;
 80027b2:	e88c 0003 	stmia.w	ip, {r0, r1}
    UFCP_Init( & pUSART );
 80027b6:	4648      	mov	r0, r9
{
 80027b8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    UFCP_Init( & pUSART );
 80027bc:	f004 fa88 	bl	8006cd0 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <UI_TaskInit+0x6c>)
 80027c2:	f8d8 0000 	ldr.w	r0, [r8]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	4649      	mov	r1, r9
 80027ca:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <UI_TaskInit+0x70>)
 80027cc:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <UI_TaskInit+0x74>)
 80027ce:	f8cd a004 	str.w	sl, [sp, #4]
 80027d2:	f7ff fbaf 	bl	8001f34 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 80027d6:	f8d8 0000 	ldr.w	r0, [r8]
 80027da:	970a      	str	r7, [sp, #40]	; 0x28
 80027dc:	4633      	mov	r3, r6
 80027de:	462a      	mov	r2, r5
 80027e0:	4621      	mov	r1, r4

}
 80027e2:	b002      	add	sp, #8
 80027e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 80027e8:	f000 b83c 	b.w	8002864 <UI_Init>
 80027ec:	200008f4 	.word	0x200008f4
 80027f0:	08006f1d 	.word	0x08006f1d
 80027f4:	08006d3d 	.word	0x08006d3d
 80027f8:	08006d69 	.word	0x08006d69
 80027fc:	200009a8 	.word	0x200009a8
 8002800:	200007c4 	.word	0x200007c4
 8002804:	20000430 	.word	0x20000430

08002808 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002808:	4a0d      	ldr	r2, [pc, #52]	; (8002840 <UI_Scheduler+0x38>)
 800280a:	8813      	ldrh	r3, [r2, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	b11b      	cbz	r3, 8002818 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002810:	8813      	ldrh	r3, [r2, #0]
 8002812:	3b01      	subs	r3, #1
 8002814:	b29b      	uxth	r3, r3
 8002816:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8002818:	4a0a      	ldr	r2, [pc, #40]	; (8002844 <UI_Scheduler+0x3c>)
 800281a:	8813      	ldrh	r3, [r2, #0]
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b01      	cmp	r3, #1
 8002820:	d903      	bls.n	800282a <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8002822:	8813      	ldrh	r3, [r2, #0]
 8002824:	3b01      	subs	r3, #1
 8002826:	b29b      	uxth	r3, r3
 8002828:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 800282a:	4a07      	ldr	r2, [pc, #28]	; (8002848 <UI_Scheduler+0x40>)
 800282c:	8813      	ldrh	r3, [r2, #0]
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d903      	bls.n	800283c <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8002834:	8813      	ldrh	r3, [r2, #0]
 8002836:	3b01      	subs	r3, #1
 8002838:	b29b      	uxth	r3, r3
 800283a:	8013      	strh	r3, [r2, #0]
  }
}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	200009a6 	.word	0x200009a6
 8002844:	200009a4 	.word	0x200009a4
 8002848:	20000572 	.word	0x20000572

0800284c <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 800284c:	4b01      	ldr	r3, [pc, #4]	; (8002854 <UI_SerialCommunicationTimeOutStop+0x8>)
 800284e:	2200      	movs	r2, #0
 8002850:	801a      	strh	r2, [r3, #0]
}
 8002852:	4770      	bx	lr
 8002854:	200009a4 	.word	0x200009a4

08002858 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002858:	4b01      	ldr	r3, [pc, #4]	; (8002860 <UI_SerialCommunicationTimeOutStart+0x8>)
 800285a:	224f      	movs	r2, #79	; 0x4f
 800285c:	801a      	strh	r2, [r3, #0]
}
 800285e:	4770      	bx	lr
 8002860:	200009a4 	.word	0x200009a4

08002864 <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 8002864:	e9c0 2302 	strd	r2, r3, [r0, #8]
  pHandle->bDriveNum = bMCNum;
 8002868:	7101      	strb	r1, [r0, #4]
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 800286a:	9b00      	ldr	r3, [sp, #0]
 800286c:	6103      	str	r3, [r0, #16]
  pHandle->bSelectedDrive = 0u;
 800286e:	2100      	movs	r1, #0
 8002870:	7501      	strb	r1, [r0, #20]
}
 8002872:	4770      	bx	lr

08002874 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8002874:	7903      	ldrb	r3, [r0, #4]
 8002876:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002878:	bf86      	itte	hi
 800287a:	7501      	strbhi	r1, [r0, #20]
  bool retVal = true;
 800287c:	2001      	movhi	r0, #1
    retVal = false;
 800287e:	2000      	movls	r0, #0
  }
  return retVal;
}
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop

08002884 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8002884:	7d00      	ldrb	r0, [r0, #20]
 8002886:	4770      	bx	lr

08002888 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002888:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800288a:	6884      	ldr	r4, [r0, #8]
 800288c:	7d03      	ldrb	r3, [r0, #20]
 800288e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 8002892:	4614      	mov	r4, r2
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002894:	68c2      	ldr	r2, [r0, #12]
{
 8002896:	b083      	sub	sp, #12
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 800289c:	295b      	cmp	r1, #91	; 0x5b
 800289e:	d82f      	bhi.n	8002900 <UI_SetReg+0x78>
 80028a0:	e8df f001 	tbb	[pc, r1]
 80028a4:	412e2e3d 	.word	0x412e2e3d
 80028a8:	544e482e 	.word	0x544e482e
 80028ac:	726c665a 	.word	0x726c665a
 80028b0:	908a8478 	.word	0x908a8478
 80028b4:	2e2e2e2e 	.word	0x2e2e2e2e
 80028b8:	2e2e2e2e 	.word	0x2e2e2e2e
 80028bc:	2e2e2e2e 	.word	0x2e2e2e2e
 80028c0:	2e2e2e2e 	.word	0x2e2e2e2e
 80028c4:	2e2e2e2e 	.word	0x2e2e2e2e
 80028c8:	2e2e2e2e 	.word	0x2e2e2e2e
 80028cc:	2e2e2e2e 	.word	0x2e2e2e2e
 80028d0:	2e2e2e2e 	.word	0x2e2e2e2e
 80028d4:	2e2e2e2e 	.word	0x2e2e2e2e
 80028d8:	2e2e2e2e 	.word	0x2e2e2e2e
 80028dc:	2e2e2e2e 	.word	0x2e2e2e2e
 80028e0:	2e2e2e2e 	.word	0x2e2e2e2e
 80028e4:	2e2e962e 	.word	0x2e2e962e
 80028e8:	2e2e2e2e 	.word	0x2e2e2e2e
 80028ec:	2e2e2e2e 	.word	0x2e2e2e2e
 80028f0:	2e2e2e2e 	.word	0x2e2e2e2e
 80028f4:	2e2e2e2e 	.word	0x2e2e2e2e
 80028f8:	2e2e2e2e 	.word	0x2e2e2e2e
 80028fc:	312e2e2e 	.word	0x312e2e2e
 8002900:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8002902:	b003      	add	sp, #12
 8002904:	bd30      	pop	{r4, r5, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8002906:	493f      	ldr	r1, [pc, #252]	; (8002a04 <UI_SetReg+0x17c>)
 8002908:	fb81 3104 	smull	r3, r1, r1, r4
 800290c:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8002910:	4628      	mov	r0, r5
 8002912:	2200      	movs	r2, #0
 8002914:	b209      	sxth	r1, r1
 8002916:	f7fe f9af 	bl	8000c78 <MCI_ExecSpeedRamp>
  bool retVal = true;
 800291a:	2001      	movs	r0, #1
    break;
 800291c:	e7f1      	b.n	8002902 <UI_SetReg+0x7a>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 800291e:	b2e1      	uxtb	r1, r4
 8002920:	f7ff ffa8 	bl	8002874 <UI_SelectMC>
    break;
 8002924:	e7ed      	b.n	8002902 <UI_SetReg+0x7a>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8002926:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800292a:	d057      	beq.n	80029dc <UI_SetReg+0x154>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 800292c:	2c01      	cmp	r4, #1
 800292e:	d05f      	beq.n	80029f0 <UI_SetReg+0x168>
  bool retVal = true;
 8002930:	2001      	movs	r0, #1
 8002932:	e7e6      	b.n	8002902 <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002934:	6818      	ldr	r0, [r3, #0]
 8002936:	b221      	sxth	r1, r4
 8002938:	f003 f854 	bl	80059e4 <PID_SetKP>
  bool retVal = true;
 800293c:	2001      	movs	r0, #1
    break;
 800293e:	e7e0      	b.n	8002902 <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002940:	6818      	ldr	r0, [r3, #0]
 8002942:	b221      	sxth	r1, r4
 8002944:	f003 f850 	bl	80059e8 <PID_SetKI>
  bool retVal = true;
 8002948:	2001      	movs	r0, #1
    break;
 800294a:	e7da      	b.n	8002902 <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	b221      	sxth	r1, r4
 8002950:	f003 f85a 	bl	8005a08 <PID_SetKD>
  bool retVal = true;
 8002954:	2001      	movs	r0, #1
    break;
 8002956:	e7d4      	b.n	8002902 <UI_SetReg+0x7a>
      currComp = MCI_GetIqdref(pMCI);
 8002958:	4628      	mov	r0, r5
 800295a:	f7fe fa4b 	bl	8000df4 <MCI_GetIqdref>
 800295e:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8002960:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002964:	4628      	mov	r0, r5
 8002966:	9901      	ldr	r1, [sp, #4]
 8002968:	f7fe f99a 	bl	8000ca0 <MCI_SetCurrentReferences>
  bool retVal = true;
 800296c:	2001      	movs	r0, #1
    break;
 800296e:	e7c8      	b.n	8002902 <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8002970:	6858      	ldr	r0, [r3, #4]
 8002972:	b221      	sxth	r1, r4
 8002974:	f003 f836 	bl	80059e4 <PID_SetKP>
  bool retVal = true;
 8002978:	2001      	movs	r0, #1
    break;
 800297a:	e7c2      	b.n	8002902 <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 800297c:	6858      	ldr	r0, [r3, #4]
 800297e:	b221      	sxth	r1, r4
 8002980:	f003 f832 	bl	80059e8 <PID_SetKI>
  bool retVal = true;
 8002984:	2001      	movs	r0, #1
    break;
 8002986:	e7bc      	b.n	8002902 <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002988:	6858      	ldr	r0, [r3, #4]
 800298a:	b221      	sxth	r1, r4
 800298c:	f003 f83c 	bl	8005a08 <PID_SetKD>
  bool retVal = true;
 8002990:	2001      	movs	r0, #1
    break;
 8002992:	e7b6      	b.n	8002902 <UI_SetReg+0x7a>
      currComp = MCI_GetIqdref(pMCI);
 8002994:	4628      	mov	r0, r5
 8002996:	f7fe fa2d 	bl	8000df4 <MCI_GetIqdref>
 800299a:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 800299c:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 80029a0:	4628      	mov	r0, r5
 80029a2:	9901      	ldr	r1, [sp, #4]
 80029a4:	f7fe f97c 	bl	8000ca0 <MCI_SetCurrentReferences>
  bool retVal = true;
 80029a8:	2001      	movs	r0, #1
    break;
 80029aa:	e7aa      	b.n	8002902 <UI_SetReg+0x7a>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 80029ac:	6898      	ldr	r0, [r3, #8]
 80029ae:	b221      	sxth	r1, r4
 80029b0:	f003 f818 	bl	80059e4 <PID_SetKP>
  bool retVal = true;
 80029b4:	2001      	movs	r0, #1
    break;
 80029b6:	e7a4      	b.n	8002902 <UI_SetReg+0x7a>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 80029b8:	6898      	ldr	r0, [r3, #8]
 80029ba:	b221      	sxth	r1, r4
 80029bc:	f003 f814 	bl	80059e8 <PID_SetKI>
  bool retVal = true;
 80029c0:	2001      	movs	r0, #1
    break;
 80029c2:	e79e      	b.n	8002902 <UI_SetReg+0x7a>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 80029c4:	6898      	ldr	r0, [r3, #8]
 80029c6:	b221      	sxth	r1, r4
 80029c8:	f003 f81e 	bl	8005a08 <PID_SetKD>
  bool retVal = true;
 80029cc:	2001      	movs	r0, #1
    break;
 80029ce:	e798      	b.n	8002902 <UI_SetReg+0x7a>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 80029d0:	4628      	mov	r0, r5
 80029d2:	b221      	sxth	r1, r4
 80029d4:	f7fe fa64 	bl	8000ea0 <MCI_SetIdref>
  bool retVal = true;
 80029d8:	2001      	movs	r0, #1
    break;
 80029da:	e792      	b.n	8002902 <UI_SetReg+0x7a>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 80029dc:	4628      	mov	r0, r5
 80029de:	f7fe fa33 	bl	8000e48 <MCI_GetTeref>
 80029e2:	4622      	mov	r2, r4
 80029e4:	4601      	mov	r1, r0
 80029e6:	4628      	mov	r0, r5
 80029e8:	f7fe f950 	bl	8000c8c <MCI_ExecTorqueRamp>
  bool retVal = true;
 80029ec:	2001      	movs	r0, #1
 80029ee:	e788      	b.n	8002902 <UI_SetReg+0x7a>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 80029f0:	4628      	mov	r0, r5
 80029f2:	f7fe f9d1 	bl	8000d98 <MCI_GetMecSpeedRefUnit>
 80029f6:	2200      	movs	r2, #0
 80029f8:	4601      	mov	r1, r0
 80029fa:	4628      	mov	r0, r5
 80029fc:	f7fe f93c 	bl	8000c78 <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002a00:	4620      	mov	r0, r4
 8002a02:	e77e      	b.n	8002902 <UI_SetReg+0x7a>
 8002a04:	2aaaaaab 	.word	0x2aaaaaab

08002a08 <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 8002a08:	b530      	push	{r4, r5, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002a0a:	68c4      	ldr	r4, [r0, #12]
 8002a0c:	7d03      	ldrb	r3, [r0, #20]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a0e:	6885      	ldr	r5, [r0, #8]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002a10:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a14:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
{
 8002a18:	b08d      	sub	sp, #52	; 0x34

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 8002a1a:	2a00      	cmp	r2, #0
 8002a1c:	f000 808b 	beq.w	8002b36 <UI_GetReg+0x12e>
  {
    *success = true;
 8002a20:	f04f 0c01 	mov.w	ip, #1
 8002a24:	f882 c000 	strb.w	ip, [r2]
  }

  switch (bRegID)
 8002a28:	2981      	cmp	r1, #129	; 0x81
 8002a2a:	f200 8101 	bhi.w	8002c30 <UI_GetReg+0x228>
 8002a2e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002a32:	0143      	.short	0x0143
 8002a34:	016f013d 	.word	0x016f013d
 8002a38:	0164016b 	.word	0x0164016b
 8002a3c:	015c0160 	.word	0x015c0160
 8002a40:	01020158 	.word	0x01020158
 8002a44:	01aa01a2 	.word	0x01aa01a2
 8002a48:	00fa01a6 	.word	0x00fa01a6
 8002a4c:	01b201b6 	.word	0x01b201b6
 8002a50:	00ff01ae 	.word	0x00ff01ae
 8002a54:	00ff00ff 	.word	0x00ff00ff
 8002a58:	00ff00ff 	.word	0x00ff00ff
 8002a5c:	00ff00ff 	.word	0x00ff00ff
 8002a60:	00ff00ff 	.word	0x00ff00ff
 8002a64:	01540116 	.word	0x01540116
 8002a68:	00ff0150 	.word	0x00ff0150
 8002a6c:	01d700ff 	.word	0x01d700ff
 8002a70:	0107010c 	.word	0x0107010c
 8002a74:	01d000ff 	.word	0x01d000ff
 8002a78:	01bc01cb 	.word	0x01bc01cb
 8002a7c:	0146014b 	.word	0x0146014b
 8002a80:	0107010c 	.word	0x0107010c
 8002a84:	00fa0102 	.word	0x00fa0102
 8002a88:	01c60111 	.word	0x01c60111
 8002a8c:	019d01c1 	.word	0x019d01c1
 8002a90:	01730188 	.word	0x01730188
 8002a94:	00ff00ff 	.word	0x00ff00ff
 8002a98:	00ff00ff 	.word	0x00ff00ff
 8002a9c:	00ff00ff 	.word	0x00ff00ff
 8002aa0:	00ff00ff 	.word	0x00ff00ff
 8002aa4:	00ff00ff 	.word	0x00ff00ff
 8002aa8:	00ff00ff 	.word	0x00ff00ff
 8002aac:	00ff00ff 	.word	0x00ff00ff
 8002ab0:	012f0136 	.word	0x012f0136
 8002ab4:	00ff00fa 	.word	0x00ff00fa
 8002ab8:	00ff00ff 	.word	0x00ff00ff
 8002abc:	00ff00ff 	.word	0x00ff00ff
 8002ac0:	00ff00ff 	.word	0x00ff00ff
 8002ac4:	00ff00ff 	.word	0x00ff00ff
 8002ac8:	00ff00ff 	.word	0x00ff00ff
 8002acc:	00ff00ff 	.word	0x00ff00ff
 8002ad0:	00ff00ff 	.word	0x00ff00ff
 8002ad4:	00ff00ff 	.word	0x00ff00ff
 8002ad8:	00ff00ff 	.word	0x00ff00ff
 8002adc:	00ff00ff 	.word	0x00ff00ff
 8002ae0:	00ff00ff 	.word	0x00ff00ff
 8002ae4:	00ff00ff 	.word	0x00ff00ff
 8002ae8:	00ff011e 	.word	0x00ff011e
 8002aec:	00ff00ff 	.word	0x00ff00ff
 8002af0:	00ff00ff 	.word	0x00ff00ff
 8002af4:	00ff00ff 	.word	0x00ff00ff
 8002af8:	00ff00ff 	.word	0x00ff00ff
 8002afc:	00ff00ff 	.word	0x00ff00ff
 8002b00:	00ff00ff 	.word	0x00ff00ff
 8002b04:	00ff00ff 	.word	0x00ff00ff
 8002b08:	00ff00ff 	.word	0x00ff00ff
 8002b0c:	011a00ff 	.word	0x011a00ff
 8002b10:	01ba012b 	.word	0x01ba012b
 8002b14:	00f700ff 	.word	0x00f700ff
 8002b18:	00ff00f7 	.word	0x00ff00f7
 8002b1c:	00ff00ff 	.word	0x00ff00ff
 8002b20:	00ff00ff 	.word	0x00ff00ff
 8002b24:	00ff00ff 	.word	0x00ff00ff
 8002b28:	00ff00ff 	.word	0x00ff00ff
 8002b2c:	00ff00ff 	.word	0x00ff00ff
 8002b30:	00ff00ff 	.word	0x00ff00ff
 8002b34:	00f7      	.short	0x00f7
 8002b36:	2970      	cmp	r1, #112	; 0x70
 8002b38:	d872      	bhi.n	8002c20 <UI_GetReg+0x218>
 8002b3a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002b3e:	00bd      	.short	0x00bd
 8002b40:	00e900b7 	.word	0x00e900b7
 8002b44:	00de00e5 	.word	0x00de00e5
 8002b48:	00d600da 	.word	0x00d600da
 8002b4c:	007c00d2 	.word	0x007c00d2
 8002b50:	0124011c 	.word	0x0124011c
 8002b54:	00740120 	.word	0x00740120
 8002b58:	012c0130 	.word	0x012c0130
 8002b5c:	00710128 	.word	0x00710128
 8002b60:	00710071 	.word	0x00710071
 8002b64:	00710071 	.word	0x00710071
 8002b68:	00710071 	.word	0x00710071
 8002b6c:	00710071 	.word	0x00710071
 8002b70:	00ce0090 	.word	0x00ce0090
 8002b74:	007100ca 	.word	0x007100ca
 8002b78:	01510071 	.word	0x01510071
 8002b7c:	00810086 	.word	0x00810086
 8002b80:	014a0071 	.word	0x014a0071
 8002b84:	01360145 	.word	0x01360145
 8002b88:	00c000c5 	.word	0x00c000c5
 8002b8c:	00810086 	.word	0x00810086
 8002b90:	0074007c 	.word	0x0074007c
 8002b94:	0140008b 	.word	0x0140008b
 8002b98:	0117013b 	.word	0x0117013b
 8002b9c:	00ed0102 	.word	0x00ed0102
 8002ba0:	00710071 	.word	0x00710071
 8002ba4:	00710071 	.word	0x00710071
 8002ba8:	00710071 	.word	0x00710071
 8002bac:	00710071 	.word	0x00710071
 8002bb0:	00710071 	.word	0x00710071
 8002bb4:	00710071 	.word	0x00710071
 8002bb8:	00710071 	.word	0x00710071
 8002bbc:	00a900b0 	.word	0x00a900b0
 8002bc0:	00710074 	.word	0x00710074
 8002bc4:	00710071 	.word	0x00710071
 8002bc8:	00710071 	.word	0x00710071
 8002bcc:	00710071 	.word	0x00710071
 8002bd0:	00710071 	.word	0x00710071
 8002bd4:	00710071 	.word	0x00710071
 8002bd8:	00710071 	.word	0x00710071
 8002bdc:	00710071 	.word	0x00710071
 8002be0:	00710071 	.word	0x00710071
 8002be4:	00710071 	.word	0x00710071
 8002be8:	00710071 	.word	0x00710071
 8002bec:	00710071 	.word	0x00710071
 8002bf0:	00710071 	.word	0x00710071
 8002bf4:	00710098 	.word	0x00710098
 8002bf8:	00710071 	.word	0x00710071
 8002bfc:	00710071 	.word	0x00710071
 8002c00:	00710071 	.word	0x00710071
 8002c04:	00710071 	.word	0x00710071
 8002c08:	00710071 	.word	0x00710071
 8002c0c:	00710071 	.word	0x00710071
 8002c10:	00710071 	.word	0x00710071
 8002c14:	00710071 	.word	0x00710071
 8002c18:	00940071 	.word	0x00940071
 8002c1c:	013400a5 	.word	0x013400a5
  int32_t bRetVal = 0;
 8002c20:	2000      	movs	r0, #0
      }
	}
    break;
  }
  return bRetVal;
}
 8002c22:	b00d      	add	sp, #52	; 0x34
 8002c24:	bd30      	pop	{r4, r5, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 8002c26:	4628      	mov	r0, r5
 8002c28:	f7fe f8e4 	bl	8000df4 <MCI_GetIqdref>
 8002c2c:	1400      	asrs	r0, r0, #16
    break;
 8002c2e:	e7f8      	b.n	8002c22 <UI_GetReg+0x21a>
        *success = false;
 8002c30:	2000      	movs	r0, #0
 8002c32:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 8002c34:	e7f5      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = MCI_GetIqdref(pMCI).q;
 8002c36:	4628      	mov	r0, r5
 8002c38:	f7fe f8dc 	bl	8000df4 <MCI_GetIqdref>
 8002c3c:	b200      	sxth	r0, r0
    break;
 8002c3e:	e7f0      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = MCI_GetIqd(pMCI).d;
 8002c40:	4628      	mov	r0, r5
 8002c42:	f7fe f8c9 	bl	8000dd8 <MCI_GetIqd>
 8002c46:	1400      	asrs	r0, r0, #16
    break;
 8002c48:	e7eb      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = MCI_GetIqd(pMCI).q;
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	f7fe f8c4 	bl	8000dd8 <MCI_GetIqd>
 8002c50:	b200      	sxth	r0, r0
    break;
 8002c52:	e7e6      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = MCI_GetVqd(pMCI).q;
 8002c54:	4628      	mov	r0, r5
 8002c56:	f7fe f8db 	bl	8000e10 <MCI_GetVqd>
 8002c5a:	b200      	sxth	r0, r0
    break;
 8002c5c:	e7e1      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8002c5e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002c60:	f002 f9d2 	bl	8005008 <VBS_GetAvBusVoltage_V>
    break;
 8002c64:	e7dd      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8002c66:	6820      	ldr	r0, [r4, #0]
 8002c68:	f002 feca 	bl	8005a00 <PID_GetKPDivisor>
    break;
 8002c6c:	e7d9      	b.n	8002c22 <UI_GetReg+0x21a>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002c6e:	4628      	mov	r0, r5
 8002c70:	f7fe f87c 	bl	8000d6c <MCI_GetControlMode>
 8002c74:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002c76:	4628      	mov	r0, r5
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002c78:	f000 80c1 	beq.w	8002dfe <UI_GetReg+0x3f6>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8002c7c:	f7fe f88c 	bl	8000d98 <MCI_GetMecSpeedRefUnit>
 8002c80:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002c84:	0040      	lsls	r0, r0, #1
 8002c86:	e7cc      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8002c88:	6820      	ldr	r0, [r4, #0]
 8002c8a:	f002 febb 	bl	8005a04 <PID_GetKIDivisor>
    break;
 8002c8e:	e7c8      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8002c90:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002c92:	f003 ff59 	bl	8006b48 <STC_GetMinAppNegativeMecSpeedUnit>
 8002c96:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002c9a:	0040      	lsls	r0, r0, #1
    break;
 8002c9c:	e7c1      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8002c9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002ca0:	f003 ff50 	bl	8006b44 <STC_GetMaxAppPositiveMecSpeedUnit>
 8002ca4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002ca8:	0040      	lsls	r0, r0, #1
    break;
 8002caa:	e7ba      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002cac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 8002cae:	b00d      	add	sp, #52	; 0x34
 8002cb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8002cb4:	f004 b806 	b.w	8006cc4 <STM_GetFaultState>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8002cb8:	f7ff fde4 	bl	8002884 <UI_GetSelectedMC>
    break;
 8002cbc:	e7b1      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	f7fe f87c 	bl	8000dbc <MCI_GetIalphabeta>
 8002cc4:	1400      	asrs	r0, r0, #16
    break;
 8002cc6:	e7ac      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8002cc8:	4628      	mov	r0, r5
 8002cca:	f7fe f877 	bl	8000dbc <MCI_GetIalphabeta>
 8002cce:	b200      	sxth	r0, r0
    break;
 8002cd0:	e7a7      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8002cd2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002cd4:	f002 fe24 	bl	8005920 <MPM_GetAvrgElMotorPowerW>
    break;
 8002cd8:	e7a3      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8002cda:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002cdc:	f002 fe64 	bl	80059a8 <NTC_GetAvTemp_C>
    break;
 8002ce0:	e79f      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8002ce2:	6820      	ldr	r0, [r4, #0]
 8002ce4:	f002 fe92 	bl	8005a0c <PID_GetKD>
    break;
 8002ce8:	e79b      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8002cea:	6820      	ldr	r0, [r4, #0]
 8002cec:	f002 fe82 	bl	80059f4 <PID_GetKI>
    break;
 8002cf0:	e797      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8002cf2:	6820      	ldr	r0, [r4, #0]
 8002cf4:	f002 fe7a 	bl	80059ec <PID_GetKP>
    break;
 8002cf8:	e793      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8002cfa:	4628      	mov	r0, r5
 8002cfc:	f7fe f84c 	bl	8000d98 <MCI_GetMecSpeedRefUnit>
 8002d00:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002d04:	0040      	lsls	r0, r0, #1
    break;
 8002d06:	e78c      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8002d08:	4628      	mov	r0, r5
 8002d0a:	f7fe f82f 	bl	8000d6c <MCI_GetControlMode>
    break;
 8002d0e:	e788      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8002d10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002d12:	f003 ffc9 	bl	8006ca8 <STM_GetState>
	break;
 8002d16:	e784      	b.n	8002c22 <UI_GetReg+0x21a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002d18:	6902      	ldr	r2, [r0, #16]
 8002d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002d1e:	0f1a      	lsrs	r2, r3, #28
 8002d20:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002d22:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002d26:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002d28:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002d2c:	d963      	bls.n	8002df6 <UI_GetReg+0x3ee>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	f63f af76 	bhi.w	8002c20 <UI_GetReg+0x218>
        pSPD = pMCT->pSpeedSensorAux;
 8002d34:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8002d36:	2800      	cmp	r0, #0
 8002d38:	f43f af72 	beq.w	8002c20 <UI_GetReg+0x218>
        bRetVal = SPD_GetS16Speed(pSPD);
 8002d3c:	f003 fe42 	bl	80069c4 <SPD_GetS16Speed>
 8002d40:	e76f      	b.n	8002c22 <UI_GetReg+0x21a>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002d42:	6902      	ldr	r2, [r0, #16]
 8002d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002d48:	0f1a      	lsrs	r2, r3, #28
 8002d4a:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002d4c:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002d50:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002d52:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002d56:	d94a      	bls.n	8002dee <UI_GetReg+0x3e6>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	f63f af61 	bhi.w	8002c20 <UI_GetReg+0x218>
        pSPD = pMCT->pSpeedSensorAux;
 8002d5e:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 8002d60:	2800      	cmp	r0, #0
 8002d62:	f43f af5d 	beq.w	8002c20 <UI_GetReg+0x218>
        bRetVal = SPD_GetElAngle(pSPD);
 8002d66:	f003 fdeb 	bl	8006940 <SPD_GetElAngle>
 8002d6a:	e75a      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	f7fe f85d 	bl	8000e2c <MCI_GetValphabeta>
 8002d72:	1400      	asrs	r0, r0, #16
    break;
 8002d74:	e755      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8002d76:	6860      	ldr	r0, [r4, #4]
 8002d78:	f002 fe38 	bl	80059ec <PID_GetKP>
    break;
 8002d7c:	e751      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8002d7e:	6860      	ldr	r0, [r4, #4]
 8002d80:	f002 fe44 	bl	8005a0c <PID_GetKD>
    break;
 8002d84:	e74d      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8002d86:	6860      	ldr	r0, [r4, #4]
 8002d88:	f002 fe34 	bl	80059f4 <PID_GetKI>
    break;
 8002d8c:	e749      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8002d8e:	68a0      	ldr	r0, [r4, #8]
 8002d90:	f002 fe3c 	bl	8005a0c <PID_GetKD>
    break;
 8002d94:	e745      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8002d96:	68a0      	ldr	r0, [r4, #8]
 8002d98:	f002 fe2c 	bl	80059f4 <PID_GetKI>
    break;
 8002d9c:	e741      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8002d9e:	68a0      	ldr	r0, [r4, #8]
 8002da0:	f002 fe24 	bl	80059ec <PID_GetKP>
    break;
 8002da4:	e73d      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (int32_t)(MC_UID);
 8002da6:	4819      	ldr	r0, [pc, #100]	; (8002e0c <UI_GetReg+0x404>)
 8002da8:	e73b      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = MCI_GetIab(pMCI).b;
 8002daa:	4628      	mov	r0, r5
 8002dac:	f7fd fff8 	bl	8000da0 <MCI_GetIab>
 8002db0:	1400      	asrs	r0, r0, #16
    break;
 8002db2:	e736      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8002db4:	4628      	mov	r0, r5
 8002db6:	f7fe f839 	bl	8000e2c <MCI_GetValphabeta>
 8002dba:	b200      	sxth	r0, r0
    break;
 8002dbc:	e731      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = MCI_GetVqd(pMCI).d;
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	f7fe f826 	bl	8000e10 <MCI_GetVqd>
 8002dc4:	1400      	asrs	r0, r0, #16
    break;
 8002dc6:	e72c      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = MCI_GetIab(pMCI).a;
 8002dc8:	4628      	mov	r0, r5
 8002dca:	f7fd ffe9 	bl	8000da0 <MCI_GetIab>
 8002dce:	b200      	sxth	r0, r0
    break;
 8002dd0:	e727      	b.n	8002c22 <UI_GetReg+0x21a>
      if (pMCT->pRevupCtrl)
 8002dd2:	6960      	ldr	r0, [r4, #20]
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	f43f af23 	beq.w	8002c20 <UI_GetReg+0x218>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8002dda:	f004 f8cb 	bl	8006f74 <RUC_GetNumberOfPhases>
 8002dde:	e720      	b.n	8002c22 <UI_GetReg+0x21a>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8002de0:	4628      	mov	r0, r5
 8002de2:	f7fd ffd1 	bl	8000d88 <MCI_GetAvrgMecSpeedUnit>
 8002de6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002dea:	0040      	lsls	r0, r0, #1
    break;
 8002dec:	e719      	b.n	8002c22 <UI_GetReg+0x21a>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002dee:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8002df0:	69a0      	ldr	r0, [r4, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002df2:	d8b5      	bhi.n	8002d60 <UI_GetReg+0x358>
 8002df4:	e7b3      	b.n	8002d5e <UI_GetReg+0x356>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002df6:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8002df8:	69a0      	ldr	r0, [r4, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8002dfa:	d89c      	bhi.n	8002d36 <UI_GetReg+0x32e>
 8002dfc:	e79a      	b.n	8002d34 <UI_GetReg+0x32c>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002dfe:	f7fd ffb7 	bl	8000d70 <MCI_GetLastRampFinalSpeed>
 8002e02:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002e06:	0040      	lsls	r0, r0, #1
 8002e08:	e70b      	b.n	8002c22 <UI_GetReg+0x21a>
 8002e0a:	bf00      	nop
 8002e0c:	34a6847a 	.word	0x34a6847a

08002e10 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8002e10:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002e12:	6883      	ldr	r3, [r0, #8]
 8002e14:	7d02      	ldrb	r2, [r0, #20]

  switch (bCmdID)
 8002e16:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002e18:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8002e1c:	290d      	cmp	r1, #13
 8002e1e:	d808      	bhi.n	8002e32 <UI_ExecCmd+0x22>
 8002e20:	e8df f001 	tbb	[pc, r1]
 8002e24:	0e091419 	.word	0x0e091419
 8002e28:	231e100e 	.word	0x231e100e
 8002e2c:	07070728 	.word	0x07070728
 8002e30:	1407      	.short	0x1407
 8002e32:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8002e34:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 8002e36:	4620      	mov	r0, r4
 8002e38:	f7fd ff8e 	bl	8000d58 <MCI_GetSTMState>
 8002e3c:	2806      	cmp	r0, #6
 8002e3e:	d01e      	beq.n	8002e7e <UI_ExecCmd+0x6e>
  bool retVal = true;
 8002e40:	2001      	movs	r0, #1
}
 8002e42:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8002e44:	4620      	mov	r0, r4
 8002e46:	f7fd ff87 	bl	8000d58 <MCI_GetSTMState>
 8002e4a:	b120      	cbz	r0, 8002e56 <UI_ExecCmd+0x46>
        MCI_StopMotor(pMCI);
 8002e4c:	4620      	mov	r0, r4
 8002e4e:	f7fd ff3b 	bl	8000cc8 <MCI_StopMotor>
  bool retVal = true;
 8002e52:	2001      	movs	r0, #1
}
 8002e54:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8002e56:	4620      	mov	r0, r4
 8002e58:	f7fd ff2c 	bl	8000cb4 <MCI_StartMotor>
  bool retVal = true;
 8002e5c:	2001      	movs	r0, #1
}
 8002e5e:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8002e60:	4620      	mov	r0, r4
 8002e62:	f7fd ff35 	bl	8000cd0 <MCI_FaultAcknowledged>
  bool retVal = true;
 8002e66:	2001      	movs	r0, #1
}
 8002e68:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	f7fd ff34 	bl	8000cd8 <MCI_EncoderAlign>
  bool retVal = true;
 8002e70:	2001      	movs	r0, #1
}
 8002e72:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8002e74:	4620      	mov	r0, r4
 8002e76:	f7fe f81d 	bl	8000eb4 <MCI_Clear_Iqdref>
  bool retVal = true;
 8002e7a:	2001      	movs	r0, #1
}
 8002e7c:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 8002e7e:	4620      	mov	r0, r4
 8002e80:	f7fd ff7e 	bl	8000d80 <MCI_StopRamp>
  bool retVal = true;
 8002e84:	2001      	movs	r0, #1
}
 8002e86:	bd10      	pop	{r4, pc}

08002e88 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8002e88:	b508      	push	{r3, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002e8a:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002e8c:	f890 c014 	ldrb.w	ip, [r0, #20]
 8002e90:	6880      	ldr	r0, [r0, #8]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002e92:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 8002e96:	fb83 c301 	smull	ip, r3, r3, r1
 8002e9a:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002e9e:	b209      	sxth	r1, r1
 8002ea0:	f7fd feea 	bl	8000c78 <MCI_ExecSpeedRamp>
  return true;
}
 8002ea4:	2001      	movs	r0, #1
 8002ea6:	bd08      	pop	{r3, pc}
 8002ea8:	2aaaaaab 	.word	0x2aaaaaab

08002eac <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8002eac:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002eae:	6883      	ldr	r3, [r0, #8]
 8002eb0:	f890 c014 	ldrb.w	ip, [r0, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8002eb4:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8002eb8:	f7fd fee8 	bl	8000c8c <MCI_ExecTorqueRamp>
  return true;
}
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	bd08      	pop	{r3, pc}

08002ec0 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8002ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec2:	4617      	mov	r7, r2
 8002ec4:	461e      	mov	r6, r3
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002ec6:	7d02      	ldrb	r2, [r0, #20]
 8002ec8:	68c3      	ldr	r3, [r0, #12]
 8002eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ece:	695c      	ldr	r4, [r3, #20]
  if (pRevupCtrl)
 8002ed0:	b18c      	cbz	r4, 8002ef6 <UI_GetRevupData+0x36>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	460d      	mov	r5, r1
 8002ed6:	f004 f837 	bl	8006f48 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002eda:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002edc:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002ede:	4620      	mov	r0, r4
 8002ee0:	f004 f838 	bl	8006f54 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002ee4:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002ee6:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002ee8:	4620      	mov	r0, r4
 8002eea:	f004 f83b 	bl	8006f64 <RUC_GetPhaseFinalTorque>
 8002eee:	9b06      	ldr	r3, [sp, #24]
 8002ef0:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 8002ef2:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 8002ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 8002ef6:	4620      	mov	r0, r4
}
 8002ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002efa:	bf00      	nop

08002efc <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	461d      	mov	r5, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002f00:	7d06      	ldrb	r6, [r0, #20]
 8002f02:	68c3      	ldr	r3, [r0, #12]
{
 8002f04:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002f06:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
{
 8002f0a:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002f0e:	6958      	ldr	r0, [r3, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002f10:	9001      	str	r0, [sp, #4]
{
 8002f12:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002f14:	f004 f806 	bl	8006f24 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8002f18:	9801      	ldr	r0, [sp, #4]
 8002f1a:	462a      	mov	r2, r5
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	f004 f807 	bl	8006f30 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8002f22:	9801      	ldr	r0, [sp, #4]
 8002f24:	4632      	mov	r2, r6
 8002f26:	4621      	mov	r1, r4
 8002f28:	f004 f808 	bl	8006f3c <RUC_SetPhaseFinalTorque>
  return true;
}
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	b002      	add	sp, #8
 8002f30:	bd70      	pop	{r4, r5, r6, pc}
 8002f32:	bf00      	nop

08002f34 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8002f34:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002f36:	f890 c014 	ldrb.w	ip, [r0, #20]
 8002f3a:	6883      	ldr	r3, [r0, #8]
  qd_t currComp;
  currComp.q = hIqRef;
 8002f3c:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 8002f40:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 8002f44:	9901      	ldr	r1, [sp, #4]
 8002f46:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
}
 8002f4a:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 8002f4c:	f7fd bea8 	b.w	8000ca0 <MCI_SetCurrentReferences>

08002f50 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8002f50:	2000      	movs	r0, #0
 8002f52:	4770      	bx	lr

08002f54 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f54:	4a03      	ldr	r2, [pc, #12]	; (8002f64 <SystemInit+0x10>)
 8002f56:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002f5a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f62:	4770      	bx	lr
 8002f64:	e000ed00 	.word	0xe000ed00

08002f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f68:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f6a:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <HAL_InitTick+0x3c>)
 8002f6c:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <HAL_InitTick+0x40>)
 8002f6e:	7812      	ldrb	r2, [r2, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
{
 8002f72:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f78:	fbb0 f0f2 	udiv	r0, r0, r2
 8002f7c:	fbb3 f0f0 	udiv	r0, r3, r0
 8002f80:	f000 fad4 	bl	800352c <HAL_SYSTICK_Config>
 8002f84:	b908      	cbnz	r0, 8002f8a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f86:	2d0f      	cmp	r5, #15
 8002f88:	d901      	bls.n	8002f8e <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002f8a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002f8c:	bd38      	pop	{r3, r4, r5, pc}
 8002f8e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f90:	4602      	mov	r2, r0
 8002f92:	4629      	mov	r1, r5
 8002f94:	f04f 30ff 	mov.w	r0, #4294967295
 8002f98:	f000 fa7c 	bl	8003494 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f9c:	4b03      	ldr	r3, [pc, #12]	; (8002fac <HAL_InitTick+0x44>)
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	601d      	str	r5, [r3, #0]
}
 8002fa2:	bd38      	pop	{r3, r4, r5, pc}
 8002fa4:	20000578 	.word	0x20000578
 8002fa8:	20000574 	.word	0x20000574
 8002fac:	2000057c 	.word	0x2000057c

08002fb0 <HAL_Init>:
{
 8002fb0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <HAL_Init+0x30>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fc2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fca:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fcc:	2003      	movs	r0, #3
 8002fce:	f000 fa4f 	bl	8003470 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fd2:	2004      	movs	r0, #4
 8002fd4:	f7ff ffc8 	bl	8002f68 <HAL_InitTick>
  HAL_MspInit();
 8002fd8:	f7ff f938 	bl	800224c <HAL_MspInit>
}
 8002fdc:	2000      	movs	r0, #0
 8002fde:	bd08      	pop	{r3, pc}
 8002fe0:	40023c00 	.word	0x40023c00

08002fe4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002fe4:	4a03      	ldr	r2, [pc, #12]	; (8002ff4 <HAL_IncTick+0x10>)
 8002fe6:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <HAL_IncTick+0x14>)
 8002fe8:	6811      	ldr	r1, [r2, #0]
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	440b      	add	r3, r1
 8002fee:	6013      	str	r3, [r2, #0]
}
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	200009ac 	.word	0x200009ac
 8002ff8:	20000578 	.word	0x20000578

08002ffc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002ffc:	4b01      	ldr	r3, [pc, #4]	; (8003004 <HAL_GetTick+0x8>)
 8002ffe:	6818      	ldr	r0, [r3, #0]
}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	200009ac 	.word	0x200009ac

08003008 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003008:	2800      	cmp	r0, #0
 800300a:	f000 809f 	beq.w	800314c <HAL_ADC_Init+0x144>
{
 800300e:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003010:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003012:	4604      	mov	r4, r0
 8003014:	b13d      	cbz	r5, 8003026 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003018:	06db      	lsls	r3, r3, #27
 800301a:	d50c      	bpl.n	8003036 <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800301c:	2300      	movs	r3, #0
 800301e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8003022:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8003024:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8003026:	f7ff f92f 	bl	8002288 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800302a:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800302c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 800302e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003032:	06db      	lsls	r3, r3, #27
 8003034:	d4f2      	bmi.n	800301c <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8003036:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003038:	4a48      	ldr	r2, [pc, #288]	; (800315c <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 800303a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800303e:	f023 0302 	bic.w	r3, r3, #2
 8003042:	f043 0302 	orr.w	r3, r3, #2
 8003046:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003048:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800304a:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800304c:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8003050:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003052:	6851      	ldr	r1, [r2, #4]
 8003054:	6860      	ldr	r0, [r4, #4]
 8003056:	4301      	orrs	r1, r0
 8003058:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800305a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800305c:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800305e:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003060:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003064:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003066:	6859      	ldr	r1, [r3, #4]
 8003068:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 800306c:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800306e:	6859      	ldr	r1, [r3, #4]
 8003070:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8003074:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	4302      	orrs	r2, r0
 800307a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800307c:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800307e:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003080:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8003084:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003086:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003088:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800308a:	4302      	orrs	r2, r0
 800308c:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800308e:	4a34      	ldr	r2, [pc, #208]	; (8003160 <HAL_ADC_Init+0x158>)
 8003090:	4291      	cmp	r1, r2
 8003092:	d052      	beq.n	800313a <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003094:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003096:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003098:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 800309c:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	4311      	orrs	r1, r2
 80030a2:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030a4:	6899      	ldr	r1, [r3, #8]
 80030a6:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 80030aa:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	432a      	orrs	r2, r5
 80030b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	f022 0202 	bic.w	r2, r2, #2
 80030b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	7e21      	ldrb	r1, [r4, #24]
 80030be:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80030c2:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030c4:	f894 2020 	ldrb.w	r2, [r4, #32]
 80030c8:	2a00      	cmp	r2, #0
 80030ca:	d041      	beq.n	8003150 <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030cc:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030d0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80030d4:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030d6:	6858      	ldr	r0, [r3, #4]
 80030d8:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80030dc:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030de:	1e51      	subs	r1, r2, #1
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80030e6:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030ea:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030ec:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f6:	3901      	subs	r1, #1
 80030f8:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80030fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030fe:	6899      	ldr	r1, [r3, #8]
 8003100:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8003104:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003106:	6899      	ldr	r1, [r3, #8]
 8003108:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800310c:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8003110:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003112:	6899      	ldr	r1, [r3, #8]
 8003114:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003118:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800311a:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800311c:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800311e:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8003122:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8003124:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8003126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003128:	f023 0303 	bic.w	r3, r3, #3
 800312c:	f043 0301 	orr.w	r3, r3, #1
 8003130:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8003132:	2300      	movs	r3, #0
 8003134:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003138:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003140:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003148:	609a      	str	r2, [r3, #8]
 800314a:	e7b2      	b.n	80030b2 <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 800314c:	2001      	movs	r0, #1
}
 800314e:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003156:	605a      	str	r2, [r3, #4]
 8003158:	e7c6      	b.n	80030e8 <HAL_ADC_Init+0xe0>
 800315a:	bf00      	nop
 800315c:	40012300 	.word	0x40012300
 8003160:	0f000001 	.word	0x0f000001

08003164 <HAL_ADC_ConfigChannel>:
{
 8003164:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 8003166:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800316a:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 800316c:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800316e:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8003170:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003172:	f000 809c 	beq.w	80032ae <HAL_ADC_ConfigChannel+0x14a>
 8003176:	2301      	movs	r3, #1
 8003178:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800317c:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800317e:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003180:	2c09      	cmp	r4, #9
 8003182:	d82d      	bhi.n	80031e0 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003184:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003186:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003188:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 800318c:	f04f 0c07 	mov.w	ip, #7
 8003190:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003194:	ea25 050c 	bic.w	r5, r5, ip
 8003198:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800319a:	691d      	ldr	r5, [r3, #16]
 800319c:	fa02 f20e 	lsl.w	r2, r2, lr
 80031a0:	432a      	orrs	r2, r5
 80031a2:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 80031a4:	684a      	ldr	r2, [r1, #4]
 80031a6:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031a8:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 80031aa:	d82f      	bhi.n	800320c <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80031b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031b2:	3a05      	subs	r2, #5
 80031b4:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031b8:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031bc:	fa0e f202 	lsl.w	r2, lr, r2
 80031c0:	ea21 0202 	bic.w	r2, r1, r2
 80031c4:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c8:	ea4c 0202 	orr.w	r2, ip, r2
 80031cc:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031ce:	4a39      	ldr	r2, [pc, #228]	; (80032b4 <HAL_ADC_ConfigChannel+0x150>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d030      	beq.n	8003236 <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 80031d4:	2300      	movs	r3, #0
 80031d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80031da:	4618      	mov	r0, r3
}
 80031dc:	b003      	add	sp, #12
 80031de:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031e0:	fa1f fc84 	uxth.w	ip, r4
 80031e4:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 80031e8:	68dd      	ldr	r5, [r3, #12]
 80031ea:	f1a2 0e1e 	sub.w	lr, r2, #30
 80031ee:	2207      	movs	r2, #7
 80031f0:	fa02 f20e 	lsl.w	r2, r2, lr
 80031f4:	ea25 0202 	bic.w	r2, r5, r2
 80031f8:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031fa:	688a      	ldr	r2, [r1, #8]
 80031fc:	68dd      	ldr	r5, [r3, #12]
 80031fe:	fa02 f20e 	lsl.w	r2, r2, lr
 8003202:	432a      	orrs	r2, r5
 8003204:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8003206:	684a      	ldr	r2, [r1, #4]
 8003208:	2a06      	cmp	r2, #6
 800320a:	d9cf      	bls.n	80031ac <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 800320c:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800320e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 8003212:	d836      	bhi.n	8003282 <HAL_ADC_ConfigChannel+0x11e>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003214:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003216:	3a23      	subs	r2, #35	; 0x23
 8003218:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800321a:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800321e:	fa05 f202 	lsl.w	r2, r5, r2
 8003222:	ea21 0202 	bic.w	r2, r1, r2
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800322a:	ea4c 0202 	orr.w	r2, ip, r2
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003230:	4a20      	ldr	r2, [pc, #128]	; (80032b4 <HAL_ADC_ConfigChannel+0x150>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d1ce      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x70>
 8003236:	2c12      	cmp	r4, #18
 8003238:	d032      	beq.n	80032a0 <HAL_ADC_ConfigChannel+0x13c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800323a:	f1a4 0310 	sub.w	r3, r4, #16
 800323e:	2b01      	cmp	r3, #1
 8003240:	d8c8      	bhi.n	80031d4 <HAL_ADC_ConfigChannel+0x70>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003242:	4a1d      	ldr	r2, [pc, #116]	; (80032b8 <HAL_ADC_ConfigChannel+0x154>)
 8003244:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003246:	2c10      	cmp	r4, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003248:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800324c:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800324e:	d1c1      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003250:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <HAL_ADC_ConfigChannel+0x158>)
 8003252:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 800325c:	f202 3283 	addw	r2, r2, #899	; 0x383
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	0c9b      	lsrs	r3, r3, #18
 8003266:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800326e:	9b01      	ldr	r3, [sp, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0af      	beq.n	80031d4 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8003274:	9b01      	ldr	r3, [sp, #4]
 8003276:	3b01      	subs	r3, #1
 8003278:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800327a:	9b01      	ldr	r3, [sp, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f9      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x110>
 8003280:	e7a8      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003282:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003284:	3a41      	subs	r2, #65	; 0x41
 8003286:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003288:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800328c:	fa05 f202 	lsl.w	r2, r5, r2
 8003290:	ea21 0202 	bic.w	r2, r1, r2
 8003294:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003298:	ea4c 0202 	orr.w	r2, ip, r2
 800329c:	62da      	str	r2, [r3, #44]	; 0x2c
 800329e:	e796      	b.n	80031ce <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032a0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80032a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032a8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032ac:	e792      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80032ae:	2002      	movs	r0, #2
}
 80032b0:	b003      	add	sp, #12
 80032b2:	bd30      	pop	{r4, r5, pc}
 80032b4:	40012000 	.word	0x40012000
 80032b8:	40012300 	.word	0x40012300
 80032bc:	20000574 	.word	0x20000574

080032c0 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80032c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80032c6:	698e      	ldr	r6, [r1, #24]
  __HAL_LOCK(hadc);
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	f000 80c8 	beq.w	800345e <HAL_ADCEx_InjectedConfigChannel+0x19e>
 80032ce:	2301      	movs	r3, #1
 80032d0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80032d4:	680d      	ldr	r5, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80032d6:	6803      	ldr	r3, [r0, #0]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 80032d8:	2d09      	cmp	r5, #9
 80032da:	d868      	bhi.n	80033ae <HAL_ADCEx_InjectedConfigChannel+0xee>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80032dc:	691c      	ldr	r4, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80032de:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 80032e0:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80032e4:	2707      	movs	r7, #7
 80032e6:	fa07 f70c 	lsl.w	r7, r7, ip
 80032ea:	ea24 0407 	bic.w	r4, r4, r7
 80032ee:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80032f0:	691c      	ldr	r4, [r3, #16]
 80032f2:	fa02 f20c 	lsl.w	r2, r2, ip
 80032f6:	4322      	orrs	r2, r4
 80032f8:	611a      	str	r2, [r3, #16]
 80032fa:	46ac      	mov	ip, r5
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 80032fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 80032fe:	f8d1 e010 	ldr.w	lr, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003302:	684c      	ldr	r4, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8003304:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003308:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800330a:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800330c:	f10e 32ff 	add.w	r2, lr, #4294967295
 8003310:	ea47 5702 	orr.w	r7, r7, r2, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003314:	1ce2      	adds	r2, r4, #3
 8003316:	eba2 020e 	sub.w	r2, r2, lr
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800331a:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800331c:	b2d2      	uxtb	r2, r2
 800331e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8003320:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003324:	f04f 0e1f 	mov.w	lr, #31
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003328:	fa0c fc02 	lsl.w	ip, ip, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800332c:	fa0e f202 	lsl.w	r2, lr, r2
 8003330:	ea27 0202 	bic.w	r2, r7, r2
 8003334:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8003336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003338:	ea4c 0202 	orr.w	r2, ip, r2
 800333c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800333e:	4a49      	ldr	r2, [pc, #292]	; (8003464 <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 8003340:	4296      	cmp	r6, r2
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8003348:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800334a:	689a      	ldr	r2, [r3, #8]
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800334c:	d066      	beq.n	800341c <HAL_ADCEx_InjectedConfigChannel+0x15c>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800334e:	4316      	orrs	r6, r2
 8003350:	609e      	str	r6, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8003352:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8003354:	69ce      	ldr	r6, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8003356:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800335a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	4332      	orrs	r2, r6
 8003360:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8003362:	7d4a      	ldrb	r2, [r1, #21]
 8003364:	2a00      	cmp	r2, #0
 8003366:	d034      	beq.n	80033d2 <HAL_ADCEx_InjectedConfigChannel+0x112>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800336e:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8003370:	7d0a      	ldrb	r2, [r1, #20]
 8003372:	2a00      	cmp	r2, #0
 8003374:	d034      	beq.n	80033e0 <HAL_ADCEx_InjectedConfigChannel+0x120>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8003376:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 8003378:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 800337a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800337e:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8003380:	d034      	beq.n	80033ec <HAL_ADCEx_InjectedConfigChannel+0x12c>
 8003382:	2c03      	cmp	r4, #3
 8003384:	d059      	beq.n	800343a <HAL_ADCEx_InjectedConfigChannel+0x17a>
 8003386:	2c01      	cmp	r4, #1
 8003388:	d04c      	beq.n	8003424 <HAL_ADCEx_InjectedConfigChannel+0x164>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800338a:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800338c:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 800338e:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003392:	f022 020f 	bic.w	r2, r2, #15
 8003396:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8003398:	6a1a      	ldr	r2, [r3, #32]
 800339a:	430a      	orrs	r2, r1
 800339c:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 800339e:	4a32      	ldr	r2, [pc, #200]	; (8003468 <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d030      	beq.n	8003406 <HAL_ADCEx_InjectedConfigChannel+0x146>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033a4:	2300      	movs	r3, #0
 80033a6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033aa:	4618      	mov	r0, r3
}
 80033ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80033ae:	fa1f fc85 	uxth.w	ip, r5
 80033b2:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 80033b6:	f1a2 041e 	sub.w	r4, r2, #30
 80033ba:	2707      	movs	r7, #7
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	40a7      	lsls	r7, r4
 80033c0:	ea22 0207 	bic.w	r2, r2, r7
 80033c4:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80033c6:	688a      	ldr	r2, [r1, #8]
 80033c8:	40a2      	lsls	r2, r4
 80033ca:	68dc      	ldr	r4, [r3, #12]
 80033cc:	4322      	orrs	r2, r4
 80033ce:	60da      	str	r2, [r3, #12]
 80033d0:	e794      	b.n	80032fc <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033d8:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80033da:	7d0a      	ldrb	r2, [r1, #20]
 80033dc:	2a00      	cmp	r2, #0
 80033de:	d1ca      	bne.n	8003376 <HAL_ADCEx_InjectedConfigChannel+0xb6>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80033e0:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80033e2:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80033e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033e8:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80033ea:	d1ca      	bne.n	8003382 <HAL_ADCEx_InjectedConfigChannel+0xc2>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80033ec:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80033ee:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 80033f0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80033f4:	f022 020f 	bic.w	r2, r2, #15
 80033f8:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8003400:	4a19      	ldr	r2, [pc, #100]	; (8003468 <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d1ce      	bne.n	80033a4 <HAL_ADCEx_InjectedConfigChannel+0xe4>
 8003406:	2d12      	cmp	r5, #18
 8003408:	d022      	beq.n	8003450 <HAL_ADCEx_InjectedConfigChannel+0x190>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800340a:	3d10      	subs	r5, #16
 800340c:	2d01      	cmp	r5, #1
 800340e:	d8c9      	bhi.n	80033a4 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003410:	4a16      	ldr	r2, [pc, #88]	; (800346c <HAL_ADCEx_InjectedConfigChannel+0x1ac>)
 8003412:	6853      	ldr	r3, [r2, #4]
 8003414:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003418:	6053      	str	r3, [r2, #4]
 800341a:	e7c3      	b.n	80033a4 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 800341c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003420:	609a      	str	r2, [r3, #8]
 8003422:	e79e      	b.n	8003362 <HAL_ADCEx_InjectedConfigChannel+0xa2>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8003424:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8003426:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8003428:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800342c:	f022 020f 	bic.w	r2, r2, #15
 8003430:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	430a      	orrs	r2, r1
 8003436:	615a      	str	r2, [r3, #20]
      break;
 8003438:	e7b1      	b.n	800339e <HAL_ADCEx_InjectedConfigChannel+0xde>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800343a:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800343c:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800343e:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8003442:	f022 020f 	bic.w	r2, r2, #15
 8003446:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8003448:	69da      	ldr	r2, [r3, #28]
 800344a:	430a      	orrs	r2, r1
 800344c:	61da      	str	r2, [r3, #28]
      break;
 800344e:	e7a6      	b.n	800339e <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003450:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8003454:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003458:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800345c:	e7a2      	b.n	80033a4 <HAL_ADCEx_InjectedConfigChannel+0xe4>
  __HAL_LOCK(hadc);
 800345e:	2002      	movs	r0, #2
}
 8003460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003462:	bf00      	nop
 8003464:	000f0001 	.word	0x000f0001
 8003468:	40012000 	.word	0x40012000
 800346c:	40012300 	.word	0x40012300

08003470 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003470:	4907      	ldr	r1, [pc, #28]	; (8003490 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003472:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003474:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003476:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800347a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800347e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003480:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003482:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800348a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	e000ed00 	.word	0xe000ed00

08003494 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003494:	4b1c      	ldr	r3, [pc, #112]	; (8003508 <HAL_NVIC_SetPriority+0x74>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800349c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800349e:	f1c3 0e07 	rsb	lr, r3, #7
 80034a2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034a6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034aa:	bf28      	it	cs
 80034ac:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034b0:	f1bc 0f06 	cmp.w	ip, #6
 80034b4:	d91b      	bls.n	80034ee <HAL_NVIC_SetPriority+0x5a>
 80034b6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b8:	f04f 3cff 	mov.w	ip, #4294967295
 80034bc:	fa0c fc03 	lsl.w	ip, ip, r3
 80034c0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c4:	f04f 3cff 	mov.w	ip, #4294967295
 80034c8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80034cc:	ea21 010c 	bic.w	r1, r1, ip
 80034d0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80034d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80034d8:	db0c      	blt.n	80034f4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034da:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80034de:	0109      	lsls	r1, r1, #4
 80034e0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80034e4:	b2c9      	uxtb	r1, r1
 80034e6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80034ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80034ee:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f0:	4613      	mov	r3, r2
 80034f2:	e7e7      	b.n	80034c4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f4:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_NVIC_SetPriority+0x78>)
 80034f6:	f000 000f 	and.w	r0, r0, #15
 80034fa:	0109      	lsls	r1, r1, #4
 80034fc:	4403      	add	r3, r0
 80034fe:	b2c9      	uxtb	r1, r1
 8003500:	7619      	strb	r1, [r3, #24]
 8003502:	f85d fb04 	ldr.w	pc, [sp], #4
 8003506:	bf00      	nop
 8003508:	e000ed00 	.word	0xe000ed00
 800350c:	e000ecfc 	.word	0xe000ecfc

08003510 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003510:	2800      	cmp	r0, #0
 8003512:	db08      	blt.n	8003526 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003514:	0941      	lsrs	r1, r0, #5
 8003516:	4a04      	ldr	r2, [pc, #16]	; (8003528 <HAL_NVIC_EnableIRQ+0x18>)
 8003518:	f000 001f 	and.w	r0, r0, #31
 800351c:	2301      	movs	r3, #1
 800351e:	fa03 f000 	lsl.w	r0, r3, r0
 8003522:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003526:	4770      	bx	lr
 8003528:	e000e100 	.word	0xe000e100

0800352c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800352c:	3801      	subs	r0, #1
 800352e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003532:	d210      	bcs.n	8003556 <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003534:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003536:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353a:	4c08      	ldr	r4, [pc, #32]	; (800355c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800353c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353e:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8003542:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003546:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003548:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800354a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800354c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800354e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003552:	6119      	str	r1, [r3, #16]
 8003554:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003556:	2001      	movs	r0, #1
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	e000ed00 	.word	0xe000ed00

08003560 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop

08003564 <HAL_SYSTICK_IRQHandler>:
{
 8003564:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8003566:	f7ff fffb 	bl	8003560 <HAL_SYSTICK_Callback>
}
 800356a:	bd08      	pop	{r3, pc}

0800356c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003570:	6d86      	ldr	r6, [r0, #88]	; 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8003572:	f7ff fd43 	bl	8002ffc <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003576:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800357a:	2b02      	cmp	r3, #2
 800357c:	d006      	beq.n	800358c <HAL_DMA_Abort+0x20>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800357e:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003580:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8003582:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003586:	6562      	str	r2, [r4, #84]	; 0x54
    
    return HAL_ERROR;
 8003588:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 800358a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	f022 0216 	bic.w	r2, r2, #22
 8003594:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800359c:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800359e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80035a0:	4605      	mov	r5, r0
 80035a2:	b332      	cbz	r2, 80035f2 <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	f022 0208 	bic.w	r2, r2, #8
 80035aa:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	f022 0201 	bic.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035b4:	e005      	b.n	80035c2 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035b6:	f7ff fd21 	bl	8002ffc <HAL_GetTick>
 80035ba:	1b43      	subs	r3, r0, r5
 80035bc:	2b05      	cmp	r3, #5
 80035be:	d80f      	bhi.n	80035e0 <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035c0:	6823      	ldr	r3, [r4, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f013 0301 	ands.w	r3, r3, #1
 80035c8:	d1f5      	bne.n	80035b6 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035ca:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80035cc:	223f      	movs	r2, #63	; 0x3f
 80035ce:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 80035d0:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035d2:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80035d4:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80035d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80035dc:	4618      	mov	r0, r3
}
 80035de:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035e0:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035e2:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 80035e4:	2300      	movs	r3, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035e6:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 80035e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035ec:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80035f0:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035f2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80035f4:	2a00      	cmp	r2, #0
 80035f6:	d1d5      	bne.n	80035a4 <HAL_DMA_Abort+0x38>
 80035f8:	e7d8      	b.n	80035ac <HAL_DMA_Abort+0x40>
 80035fa:	bf00      	nop

080035fc <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035fc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003600:	2b02      	cmp	r3, #2
 8003602:	d003      	beq.n	800360c <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003604:	2380      	movs	r3, #128	; 0x80
 8003606:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8003608:	2001      	movs	r0, #1
 800360a:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800360c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800360e:	2305      	movs	r3, #5
 8003610:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8003614:	6813      	ldr	r3, [r2, #0]
 8003616:	f023 0301 	bic.w	r3, r3, #1
  }

  return HAL_OK;
 800361a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800361c:	6013      	str	r3, [r2, #0]
}
 800361e:	4770      	bx	lr

08003620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003624:	2200      	movs	r2, #0
 8003626:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003628:	4e70      	ldr	r6, [pc, #448]	; (80037ec <HAL_GPIO_Init+0x1cc>)
{
 800362a:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 800362c:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 800362e:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003632:	4689      	mov	r9, r1
 8003634:	e004      	b.n	8003640 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003636:	3301      	adds	r3, #1
 8003638:	2b10      	cmp	r3, #16
 800363a:	f102 0202 	add.w	r2, r2, #2
 800363e:	d078      	beq.n	8003732 <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 8003640:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003644:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8003648:	43a1      	bics	r1, r4
 800364a:	d1f4      	bne.n	8003636 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800364c:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8003650:	f00c 0103 	and.w	r1, ip, #3
 8003654:	1e4d      	subs	r5, r1, #1
 8003656:	2d01      	cmp	r5, #1
 8003658:	d96e      	bls.n	8003738 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800365a:	2903      	cmp	r1, #3
 800365c:	f040 80ae 	bne.w	80037bc <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003660:	4091      	lsls	r1, r2
 8003662:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8003664:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003666:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003668:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800366a:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 800366e:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003670:	d0e1      	beq.n	8003636 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003672:	4d5f      	ldr	r5, [pc, #380]	; (80037f0 <HAL_GPIO_Init+0x1d0>)
 8003674:	2100      	movs	r1, #0
 8003676:	9103      	str	r1, [sp, #12]
 8003678:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800367a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800367e:	6469      	str	r1, [r5, #68]	; 0x44
 8003680:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8003682:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8003686:	9103      	str	r1, [sp, #12]
 8003688:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800368a:	f023 0103 	bic.w	r1, r3, #3
 800368e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8003692:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003696:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800369a:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800369e:	00bf      	lsls	r7, r7, #2
 80036a0:	250f      	movs	r5, #15
 80036a2:	40bd      	lsls	r5, r7
 80036a4:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036a8:	4d52      	ldr	r5, [pc, #328]	; (80037f4 <HAL_GPIO_Init+0x1d4>)
 80036aa:	42a8      	cmp	r0, r5
 80036ac:	d017      	beq.n	80036de <HAL_GPIO_Init+0xbe>
 80036ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80036b2:	42a8      	cmp	r0, r5
 80036b4:	f000 8086 	beq.w	80037c4 <HAL_GPIO_Init+0x1a4>
 80036b8:	4d4f      	ldr	r5, [pc, #316]	; (80037f8 <HAL_GPIO_Init+0x1d8>)
 80036ba:	42a8      	cmp	r0, r5
 80036bc:	f000 8087 	beq.w	80037ce <HAL_GPIO_Init+0x1ae>
 80036c0:	4d4e      	ldr	r5, [pc, #312]	; (80037fc <HAL_GPIO_Init+0x1dc>)
 80036c2:	42a8      	cmp	r0, r5
 80036c4:	f000 808a 	beq.w	80037dc <HAL_GPIO_Init+0x1bc>
 80036c8:	4d4d      	ldr	r5, [pc, #308]	; (8003800 <HAL_GPIO_Init+0x1e0>)
 80036ca:	42a8      	cmp	r0, r5
 80036cc:	bf0c      	ite	eq
 80036ce:	f04f 0e04 	moveq.w	lr, #4
 80036d2:	f04f 0e07 	movne.w	lr, #7
 80036d6:	fa0e f707 	lsl.w	r7, lr, r7
 80036da:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036de:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 80036e2:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 80036e4:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036e8:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80036ec:	bf0c      	ite	eq
 80036ee:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 80036f0:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 80036f4:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 80036f6:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036f8:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80036fc:	bf0c      	ite	eq
 80036fe:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8003700:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8003704:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8003706:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003708:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800370c:	bf0c      	ite	eq
 800370e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8003710:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8003714:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003716:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003718:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 800371c:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8003720:	bf0c      	ite	eq
 8003722:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8003724:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003728:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 800372a:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800372c:	f102 0202 	add.w	r2, r2, #2
 8003730:	d186      	bne.n	8003640 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003732:	b005      	add	sp, #20
 8003734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003738:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 800373c:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800373e:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003742:	2503      	movs	r5, #3
 8003744:	fa05 fe02 	lsl.w	lr, r5, r2
 8003748:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 800374c:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8003750:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003752:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003754:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003758:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800375c:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8003760:	409f      	lsls	r7, r3
 8003762:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003766:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003768:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800376a:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800376e:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8003772:	4097      	lsls	r7, r2
 8003774:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003778:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 800377a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800377c:	fa01 f102 	lsl.w	r1, r1, r2
 8003780:	f47f af70 	bne.w	8003664 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8003784:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003788:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800378c:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003790:	f8de 7020 	ldr.w	r7, [lr, #32]
 8003794:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003796:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800379a:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800379e:	fa07 f708 	lsl.w	r7, r7, r8
 80037a2:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037a4:	270f      	movs	r7, #15
 80037a6:	fa07 f808 	lsl.w	r8, r7, r8
 80037aa:	9f00      	ldr	r7, [sp, #0]
 80037ac:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037b0:	9f01      	ldr	r7, [sp, #4]
 80037b2:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 80037b6:	f8ce 7020 	str.w	r7, [lr, #32]
 80037ba:	e753      	b.n	8003664 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037bc:	2503      	movs	r5, #3
 80037be:	4095      	lsls	r5, r2
 80037c0:	43ed      	mvns	r5, r5
 80037c2:	e7d1      	b.n	8003768 <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037c4:	fa0a f707 	lsl.w	r7, sl, r7
 80037c8:	ea48 0807 	orr.w	r8, r8, r7
 80037cc:	e787      	b.n	80036de <HAL_GPIO_Init+0xbe>
 80037ce:	f04f 0e02 	mov.w	lr, #2
 80037d2:	fa0e f707 	lsl.w	r7, lr, r7
 80037d6:	ea48 0807 	orr.w	r8, r8, r7
 80037da:	e780      	b.n	80036de <HAL_GPIO_Init+0xbe>
 80037dc:	f04f 0e03 	mov.w	lr, #3
 80037e0:	fa0e f707 	lsl.w	r7, lr, r7
 80037e4:	ea48 0807 	orr.w	r8, r8, r7
 80037e8:	e779      	b.n	80036de <HAL_GPIO_Init+0xbe>
 80037ea:	bf00      	nop
 80037ec:	40013c00 	.word	0x40013c00
 80037f0:	40023800 	.word	0x40023800
 80037f4:	40020000 	.word	0x40020000
 80037f8:	40020800 	.word	0x40020800
 80037fc:	40020c00 	.word	0x40020c00
 8003800:	40021000 	.word	0x40021000

08003804 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003804:	b902      	cbnz	r2, 8003808 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003806:	0409      	lsls	r1, r1, #16
 8003808:	6181      	str	r1, [r0, #24]
  }
}
 800380a:	4770      	bx	lr

0800380c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800380c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800380e:	ea01 0203 	and.w	r2, r1, r3
 8003812:	ea21 0103 	bic.w	r1, r1, r3
 8003816:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800381a:	6181      	str	r1, [r0, #24]
}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop

08003820 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003820:	2800      	cmp	r0, #0
 8003822:	f000 81a2 	beq.w	8003b6a <HAL_RCC_OscConfig+0x34a>
{
 8003826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800382a:	6803      	ldr	r3, [r0, #0]
 800382c:	07dd      	lsls	r5, r3, #31
{
 800382e:	b082      	sub	sp, #8
 8003830:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003832:	d52f      	bpl.n	8003894 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003834:	499e      	ldr	r1, [pc, #632]	; (8003ab0 <HAL_RCC_OscConfig+0x290>)
 8003836:	688a      	ldr	r2, [r1, #8]
 8003838:	f002 020c 	and.w	r2, r2, #12
 800383c:	2a04      	cmp	r2, #4
 800383e:	f000 80ed 	beq.w	8003a1c <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003842:	688a      	ldr	r2, [r1, #8]
 8003844:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003848:	2a08      	cmp	r2, #8
 800384a:	f000 80e3 	beq.w	8003a14 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800384e:	6863      	ldr	r3, [r4, #4]
 8003850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003854:	f000 80ec 	beq.w	8003a30 <HAL_RCC_OscConfig+0x210>
 8003858:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800385c:	f000 8175 	beq.w	8003b4a <HAL_RCC_OscConfig+0x32a>
 8003860:	4d93      	ldr	r5, [pc, #588]	; (8003ab0 <HAL_RCC_OscConfig+0x290>)
 8003862:	682a      	ldr	r2, [r5, #0]
 8003864:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003868:	602a      	str	r2, [r5, #0]
 800386a:	682a      	ldr	r2, [r5, #0]
 800386c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003870:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003872:	2b00      	cmp	r3, #0
 8003874:	f040 80e1 	bne.w	8003a3a <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7ff fbc0 	bl	8002ffc <HAL_GetTick>
 800387c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387e:	e005      	b.n	800388c <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003880:	f7ff fbbc 	bl	8002ffc <HAL_GetTick>
 8003884:	1b80      	subs	r0, r0, r6
 8003886:	2864      	cmp	r0, #100	; 0x64
 8003888:	f200 8101 	bhi.w	8003a8e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388c:	682b      	ldr	r3, [r5, #0]
 800388e:	039b      	lsls	r3, r3, #14
 8003890:	d4f6      	bmi.n	8003880 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	079f      	lsls	r7, r3, #30
 8003896:	d528      	bpl.n	80038ea <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003898:	4a85      	ldr	r2, [pc, #532]	; (8003ab0 <HAL_RCC_OscConfig+0x290>)
 800389a:	6891      	ldr	r1, [r2, #8]
 800389c:	f011 0f0c 	tst.w	r1, #12
 80038a0:	f000 8090 	beq.w	80039c4 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a4:	6891      	ldr	r1, [r2, #8]
 80038a6:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038aa:	2908      	cmp	r1, #8
 80038ac:	f000 8086 	beq.w	80039bc <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038b0:	68e3      	ldr	r3, [r4, #12]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 810e 	beq.w	8003ad4 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038b8:	4b7e      	ldr	r3, [pc, #504]	; (8003ab4 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ba:	4e7d      	ldr	r6, [pc, #500]	; (8003ab0 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 80038bc:	2201      	movs	r2, #1
 80038be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80038c0:	f7ff fb9c 	bl	8002ffc <HAL_GetTick>
 80038c4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c6:	e005      	b.n	80038d4 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c8:	f7ff fb98 	bl	8002ffc <HAL_GetTick>
 80038cc:	1b40      	subs	r0, r0, r5
 80038ce:	2802      	cmp	r0, #2
 80038d0:	f200 80dd 	bhi.w	8003a8e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d4:	6833      	ldr	r3, [r6, #0]
 80038d6:	0798      	lsls	r0, r3, #30
 80038d8:	d5f6      	bpl.n	80038c8 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038da:	6833      	ldr	r3, [r6, #0]
 80038dc:	6922      	ldr	r2, [r4, #16]
 80038de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038e2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80038e6:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	071a      	lsls	r2, r3, #28
 80038ec:	d451      	bmi.n	8003992 <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ee:	0758      	lsls	r0, r3, #29
 80038f0:	d52f      	bpl.n	8003952 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038f2:	4a6f      	ldr	r2, [pc, #444]	; (8003ab0 <HAL_RCC_OscConfig+0x290>)
 80038f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80038f6:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80038fa:	d07f      	beq.n	80039fc <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 80038fc:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038fe:	4e6e      	ldr	r6, [pc, #440]	; (8003ab8 <HAL_RCC_OscConfig+0x298>)
 8003900:	6833      	ldr	r3, [r6, #0]
 8003902:	05d9      	lsls	r1, r3, #23
 8003904:	f140 80b3 	bpl.w	8003a6e <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003908:	68a3      	ldr	r3, [r4, #8]
 800390a:	2b01      	cmp	r3, #1
 800390c:	f000 80c3 	beq.w	8003a96 <HAL_RCC_OscConfig+0x276>
 8003910:	2b05      	cmp	r3, #5
 8003912:	f000 812c 	beq.w	8003b6e <HAL_RCC_OscConfig+0x34e>
 8003916:	4e66      	ldr	r6, [pc, #408]	; (8003ab0 <HAL_RCC_OscConfig+0x290>)
 8003918:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	6732      	str	r2, [r6, #112]	; 0x70
 8003920:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8003922:	f022 0204 	bic.w	r2, r2, #4
 8003926:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003928:	2b00      	cmp	r3, #0
 800392a:	f040 80b9 	bne.w	8003aa0 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392e:	f7ff fb65 	bl	8002ffc <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003932:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003936:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003938:	e005      	b.n	8003946 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800393a:	f7ff fb5f 	bl	8002ffc <HAL_GetTick>
 800393e:	1bc0      	subs	r0, r0, r7
 8003940:	4540      	cmp	r0, r8
 8003942:	f200 80a4 	bhi.w	8003a8e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003946:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003948:	0798      	lsls	r0, r3, #30
 800394a:	d4f6      	bmi.n	800393a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800394c:	2d00      	cmp	r5, #0
 800394e:	f040 8106 	bne.w	8003b5e <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003952:	69a0      	ldr	r0, [r4, #24]
 8003954:	b1c8      	cbz	r0, 800398a <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003956:	4d56      	ldr	r5, [pc, #344]	; (8003ab0 <HAL_RCC_OscConfig+0x290>)
 8003958:	68ab      	ldr	r3, [r5, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	2b08      	cmp	r3, #8
 8003960:	f000 80c9 	beq.w	8003af6 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003964:	4b53      	ldr	r3, [pc, #332]	; (8003ab4 <HAL_RCC_OscConfig+0x294>)
 8003966:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003968:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800396a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800396c:	f000 8109 	beq.w	8003b82 <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003970:	f7ff fb44 	bl	8002ffc <HAL_GetTick>
 8003974:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003976:	e005      	b.n	8003984 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003978:	f7ff fb40 	bl	8002ffc <HAL_GetTick>
 800397c:	1b00      	subs	r0, r0, r4
 800397e:	2802      	cmp	r0, #2
 8003980:	f200 8085 	bhi.w	8003a8e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003984:	682b      	ldr	r3, [r5, #0]
 8003986:	019b      	lsls	r3, r3, #6
 8003988:	d4f6      	bmi.n	8003978 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800398a:	2000      	movs	r0, #0
}
 800398c:	b002      	add	sp, #8
 800398e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003992:	6963      	ldr	r3, [r4, #20]
 8003994:	b30b      	cbz	r3, 80039da <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8003996:	4b47      	ldr	r3, [pc, #284]	; (8003ab4 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003998:	4e45      	ldr	r6, [pc, #276]	; (8003ab0 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 800399a:	2201      	movs	r2, #1
 800399c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80039a0:	f7ff fb2c 	bl	8002ffc <HAL_GetTick>
 80039a4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a6:	e004      	b.n	80039b2 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a8:	f7ff fb28 	bl	8002ffc <HAL_GetTick>
 80039ac:	1b40      	subs	r0, r0, r5
 80039ae:	2802      	cmp	r0, #2
 80039b0:	d86d      	bhi.n	8003a8e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b2:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80039b4:	079b      	lsls	r3, r3, #30
 80039b6:	d5f7      	bpl.n	80039a8 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	e798      	b.n	80038ee <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039bc:	6852      	ldr	r2, [r2, #4]
 80039be:	0256      	lsls	r6, r2, #9
 80039c0:	f53f af76 	bmi.w	80038b0 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c4:	4a3a      	ldr	r2, [pc, #232]	; (8003ab0 <HAL_RCC_OscConfig+0x290>)
 80039c6:	6812      	ldr	r2, [r2, #0]
 80039c8:	0795      	lsls	r5, r2, #30
 80039ca:	d544      	bpl.n	8003a56 <HAL_RCC_OscConfig+0x236>
 80039cc:	68e2      	ldr	r2, [r4, #12]
 80039ce:	2a01      	cmp	r2, #1
 80039d0:	d041      	beq.n	8003a56 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 80039d2:	2001      	movs	r0, #1
}
 80039d4:	b002      	add	sp, #8
 80039d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80039da:	4a36      	ldr	r2, [pc, #216]	; (8003ab4 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039dc:	4e34      	ldr	r6, [pc, #208]	; (8003ab0 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 80039de:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80039e2:	f7ff fb0b 	bl	8002ffc <HAL_GetTick>
 80039e6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e8:	e004      	b.n	80039f4 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ea:	f7ff fb07 	bl	8002ffc <HAL_GetTick>
 80039ee:	1b40      	subs	r0, r0, r5
 80039f0:	2802      	cmp	r0, #2
 80039f2:	d84c      	bhi.n	8003a8e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80039f6:	079f      	lsls	r7, r3, #30
 80039f8:	d4f7      	bmi.n	80039ea <HAL_RCC_OscConfig+0x1ca>
 80039fa:	e7dd      	b.n	80039b8 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fc:	9301      	str	r3, [sp, #4]
 80039fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a04:	6413      	str	r3, [r2, #64]	; 0x40
 8003a06:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	9301      	str	r3, [sp, #4]
 8003a0e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003a10:	2501      	movs	r5, #1
 8003a12:	e774      	b.n	80038fe <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a14:	684a      	ldr	r2, [r1, #4]
 8003a16:	0250      	lsls	r0, r2, #9
 8003a18:	f57f af19 	bpl.w	800384e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a1c:	4a24      	ldr	r2, [pc, #144]	; (8003ab0 <HAL_RCC_OscConfig+0x290>)
 8003a1e:	6812      	ldr	r2, [r2, #0]
 8003a20:	0391      	lsls	r1, r2, #14
 8003a22:	f57f af37 	bpl.w	8003894 <HAL_RCC_OscConfig+0x74>
 8003a26:	6862      	ldr	r2, [r4, #4]
 8003a28:	2a00      	cmp	r2, #0
 8003a2a:	f47f af33 	bne.w	8003894 <HAL_RCC_OscConfig+0x74>
 8003a2e:	e7d0      	b.n	80039d2 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a30:	4a1f      	ldr	r2, [pc, #124]	; (8003ab0 <HAL_RCC_OscConfig+0x290>)
 8003a32:	6813      	ldr	r3, [r2, #0]
 8003a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a38:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003a3a:	f7ff fadf 	bl	8002ffc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3e:	4e1c      	ldr	r6, [pc, #112]	; (8003ab0 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8003a40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a42:	e004      	b.n	8003a4e <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a44:	f7ff fada 	bl	8002ffc <HAL_GetTick>
 8003a48:	1b40      	subs	r0, r0, r5
 8003a4a:	2864      	cmp	r0, #100	; 0x64
 8003a4c:	d81f      	bhi.n	8003a8e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	6833      	ldr	r3, [r6, #0]
 8003a50:	039a      	lsls	r2, r3, #14
 8003a52:	d5f7      	bpl.n	8003a44 <HAL_RCC_OscConfig+0x224>
 8003a54:	e71d      	b.n	8003892 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a56:	4916      	ldr	r1, [pc, #88]	; (8003ab0 <HAL_RCC_OscConfig+0x290>)
 8003a58:	6920      	ldr	r0, [r4, #16]
 8003a5a:	680a      	ldr	r2, [r1, #0]
 8003a5c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003a60:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003a64:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a66:	071a      	lsls	r2, r3, #28
 8003a68:	f57f af41 	bpl.w	80038ee <HAL_RCC_OscConfig+0xce>
 8003a6c:	e791      	b.n	8003992 <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a6e:	6833      	ldr	r3, [r6, #0]
 8003a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a74:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003a76:	f7ff fac1 	bl	8002ffc <HAL_GetTick>
 8003a7a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7c:	6833      	ldr	r3, [r6, #0]
 8003a7e:	05da      	lsls	r2, r3, #23
 8003a80:	f53f af42 	bmi.w	8003908 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a84:	f7ff faba 	bl	8002ffc <HAL_GetTick>
 8003a88:	1bc0      	subs	r0, r0, r7
 8003a8a:	2802      	cmp	r0, #2
 8003a8c:	d9f6      	bls.n	8003a7c <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8003a8e:	2003      	movs	r0, #3
}
 8003a90:	b002      	add	sp, #8
 8003a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a96:	4a06      	ldr	r2, [pc, #24]	; (8003ab0 <HAL_RCC_OscConfig+0x290>)
 8003a98:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003aa0:	f7ff faac 	bl	8002ffc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aa4:	4f02      	ldr	r7, [pc, #8]	; (8003ab0 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8003aa6:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aac:	e00b      	b.n	8003ac6 <HAL_RCC_OscConfig+0x2a6>
 8003aae:	bf00      	nop
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	42470000 	.word	0x42470000
 8003ab8:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003abc:	f7ff fa9e 	bl	8002ffc <HAL_GetTick>
 8003ac0:	1b80      	subs	r0, r0, r6
 8003ac2:	4540      	cmp	r0, r8
 8003ac4:	d8e3      	bhi.n	8003a8e <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ac8:	079b      	lsls	r3, r3, #30
 8003aca:	d5f7      	bpl.n	8003abc <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8003acc:	2d00      	cmp	r5, #0
 8003ace:	f43f af40 	beq.w	8003952 <HAL_RCC_OscConfig+0x132>
 8003ad2:	e044      	b.n	8003b5e <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8003ad4:	4a42      	ldr	r2, [pc, #264]	; (8003be0 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ad6:	4e43      	ldr	r6, [pc, #268]	; (8003be4 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8003ad8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003ada:	f7ff fa8f 	bl	8002ffc <HAL_GetTick>
 8003ade:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae0:	e004      	b.n	8003aec <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae2:	f7ff fa8b 	bl	8002ffc <HAL_GetTick>
 8003ae6:	1b40      	subs	r0, r0, r5
 8003ae8:	2802      	cmp	r0, #2
 8003aea:	d8d0      	bhi.n	8003a8e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aec:	6833      	ldr	r3, [r6, #0]
 8003aee:	0799      	lsls	r1, r3, #30
 8003af0:	d4f7      	bmi.n	8003ae2 <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	e6f9      	b.n	80038ea <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003af6:	2801      	cmp	r0, #1
 8003af8:	f43f af48 	beq.w	800398c <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8003afc:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003afe:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b00:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b04:	4291      	cmp	r1, r2
 8003b06:	f47f af64 	bne.w	80039d2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0a:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b0c:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b10:	4291      	cmp	r1, r2
 8003b12:	f47f af5e 	bne.w	80039d2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b16:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003b18:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003b1c:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b1e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003b22:	f47f af56 	bne.w	80039d2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b26:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003b28:	0852      	lsrs	r2, r2, #1
 8003b2a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003b2e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b30:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003b34:	f47f af4d 	bne.w	80039d2 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b3a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b3e:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8003b42:	bf14      	ite	ne
 8003b44:	2001      	movne	r0, #1
 8003b46:	2000      	moveq	r0, #0
 8003b48:	e720      	b.n	800398c <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b4a:	4b26      	ldr	r3, [pc, #152]	; (8003be4 <HAL_RCC_OscConfig+0x3c4>)
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b5a:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b5c:	e76d      	b.n	8003a3a <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b5e:	4a21      	ldr	r2, [pc, #132]	; (8003be4 <HAL_RCC_OscConfig+0x3c4>)
 8003b60:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b66:	6413      	str	r3, [r2, #64]	; 0x40
 8003b68:	e6f3      	b.n	8003952 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8003b6a:	2001      	movs	r0, #1
}
 8003b6c:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b6e:	4b1d      	ldr	r3, [pc, #116]	; (8003be4 <HAL_RCC_OscConfig+0x3c4>)
 8003b70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b72:	f042 0204 	orr.w	r2, r2, #4
 8003b76:	671a      	str	r2, [r3, #112]	; 0x70
 8003b78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b80:	e78e      	b.n	8003aa0 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8003b82:	f7ff fa3b 	bl	8002ffc <HAL_GetTick>
 8003b86:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b88:	e005      	b.n	8003b96 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8a:	f7ff fa37 	bl	8002ffc <HAL_GetTick>
 8003b8e:	1b80      	subs	r0, r0, r6
 8003b90:	2802      	cmp	r0, #2
 8003b92:	f63f af7c 	bhi.w	8003a8e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b96:	682b      	ldr	r3, [r5, #0]
 8003b98:	0199      	lsls	r1, r3, #6
 8003b9a:	d4f6      	bmi.n	8003b8a <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b9c:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8003ba0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ba2:	430b      	orrs	r3, r1
 8003ba4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003ba8:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8003bac:	0852      	lsrs	r2, r2, #1
 8003bae:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003bb2:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8003bb4:	490a      	ldr	r1, [pc, #40]	; (8003be0 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003bba:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bbc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003bbe:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003bc0:	f7ff fa1c 	bl	8002ffc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc4:	4d07      	ldr	r5, [pc, #28]	; (8003be4 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8003bc6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc8:	e005      	b.n	8003bd6 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bca:	f7ff fa17 	bl	8002ffc <HAL_GetTick>
 8003bce:	1b00      	subs	r0, r0, r4
 8003bd0:	2802      	cmp	r0, #2
 8003bd2:	f63f af5c 	bhi.w	8003a8e <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd6:	682b      	ldr	r3, [r5, #0]
 8003bd8:	019a      	lsls	r2, r3, #6
 8003bda:	d5f6      	bpl.n	8003bca <HAL_RCC_OscConfig+0x3aa>
 8003bdc:	e6d5      	b.n	800398a <HAL_RCC_OscConfig+0x16a>
 8003bde:	bf00      	nop
 8003be0:	42470000 	.word	0x42470000
 8003be4:	40023800 	.word	0x40023800

08003be8 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003be8:	4b01      	ldr	r3, [pc, #4]	; (8003bf0 <HAL_RCC_EnableCSS+0x8>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003bee:	4770      	bx	lr
 8003bf0:	42470000 	.word	0x42470000

08003bf4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bf4:	4910      	ldr	r1, [pc, #64]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x44>)
{
 8003bf6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bf8:	688b      	ldr	r3, [r1, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d001      	beq.n	8003c06 <HAL_RCC_GetSysClockFreq+0x12>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c02:	480e      	ldr	r0, [pc, #56]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x48>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003c04:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c06:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c08:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0a:	6849      	ldr	r1, [r1, #4]
 8003c0c:	480b      	ldr	r0, [pc, #44]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x48>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c0e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c12:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003c16:	bf18      	it	ne
 8003c18:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c1e:	fba1 0100 	umull	r0, r1, r1, r0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c22:	f7fc fad9 	bl	80001d8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c26:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x44>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003c2e:	3301      	adds	r3, #1
 8003c30:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8003c32:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003c36:	bd08      	pop	{r3, pc}
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	00f42400 	.word	0x00f42400

08003c40 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003c40:	2800      	cmp	r0, #0
 8003c42:	f000 8087 	beq.w	8003d54 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c46:	4a48      	ldr	r2, [pc, #288]	; (8003d68 <HAL_RCC_ClockConfig+0x128>)
 8003c48:	6813      	ldr	r3, [r2, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	428b      	cmp	r3, r1
{
 8003c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c54:	460d      	mov	r5, r1
 8003c56:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c58:	d209      	bcs.n	8003c6e <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	b2cb      	uxtb	r3, r1
 8003c5c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c5e:	6813      	ldr	r3, [r2, #0]
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	428b      	cmp	r3, r1
 8003c66:	d002      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003c68:	2001      	movs	r0, #1
}
 8003c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	0798      	lsls	r0, r3, #30
 8003c72:	d514      	bpl.n	8003c9e <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c74:	0759      	lsls	r1, r3, #29
 8003c76:	d504      	bpl.n	8003c82 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c78:	493c      	ldr	r1, [pc, #240]	; (8003d6c <HAL_RCC_ClockConfig+0x12c>)
 8003c7a:	688a      	ldr	r2, [r1, #8]
 8003c7c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003c80:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c82:	071a      	lsls	r2, r3, #28
 8003c84:	d504      	bpl.n	8003c90 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c86:	4939      	ldr	r1, [pc, #228]	; (8003d6c <HAL_RCC_ClockConfig+0x12c>)
 8003c88:	688a      	ldr	r2, [r1, #8]
 8003c8a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003c8e:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c90:	4936      	ldr	r1, [pc, #216]	; (8003d6c <HAL_RCC_ClockConfig+0x12c>)
 8003c92:	68a0      	ldr	r0, [r4, #8]
 8003c94:	688a      	ldr	r2, [r1, #8]
 8003c96:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003c9a:	4302      	orrs	r2, r0
 8003c9c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9e:	07df      	lsls	r7, r3, #31
 8003ca0:	d521      	bpl.n	8003ce6 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ca2:	6862      	ldr	r2, [r4, #4]
 8003ca4:	2a01      	cmp	r2, #1
 8003ca6:	d057      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ca8:	1e93      	subs	r3, r2, #2
 8003caa:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cac:	4b2f      	ldr	r3, [pc, #188]	; (8003d6c <HAL_RCC_ClockConfig+0x12c>)
 8003cae:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cb0:	d94d      	bls.n	8003d4e <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb2:	0799      	lsls	r1, r3, #30
 8003cb4:	d5d8      	bpl.n	8003c68 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb6:	4e2d      	ldr	r6, [pc, #180]	; (8003d6c <HAL_RCC_ClockConfig+0x12c>)
 8003cb8:	68b3      	ldr	r3, [r6, #8]
 8003cba:	f023 0303 	bic.w	r3, r3, #3
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003cc2:	f7ff f99b 	bl	8002ffc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003cca:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ccc:	e004      	b.n	8003cd8 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cce:	f7ff f995 	bl	8002ffc <HAL_GetTick>
 8003cd2:	1bc0      	subs	r0, r0, r7
 8003cd4:	4540      	cmp	r0, r8
 8003cd6:	d844      	bhi.n	8003d62 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd8:	68b3      	ldr	r3, [r6, #8]
 8003cda:	6862      	ldr	r2, [r4, #4]
 8003cdc:	f003 030c 	and.w	r3, r3, #12
 8003ce0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003ce4:	d1f3      	bne.n	8003cce <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce6:	4a20      	ldr	r2, [pc, #128]	; (8003d68 <HAL_RCC_ClockConfig+0x128>)
 8003ce8:	6813      	ldr	r3, [r2, #0]
 8003cea:	f003 0307 	and.w	r3, r3, #7
 8003cee:	42ab      	cmp	r3, r5
 8003cf0:	d906      	bls.n	8003d00 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf2:	b2eb      	uxtb	r3, r5
 8003cf4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf6:	6813      	ldr	r3, [r2, #0]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	42ab      	cmp	r3, r5
 8003cfe:	d1b3      	bne.n	8003c68 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	075a      	lsls	r2, r3, #29
 8003d04:	d506      	bpl.n	8003d14 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d06:	4919      	ldr	r1, [pc, #100]	; (8003d6c <HAL_RCC_ClockConfig+0x12c>)
 8003d08:	68e0      	ldr	r0, [r4, #12]
 8003d0a:	688a      	ldr	r2, [r1, #8]
 8003d0c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003d10:	4302      	orrs	r2, r0
 8003d12:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d14:	071b      	lsls	r3, r3, #28
 8003d16:	d507      	bpl.n	8003d28 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d18:	4a14      	ldr	r2, [pc, #80]	; (8003d6c <HAL_RCC_ClockConfig+0x12c>)
 8003d1a:	6921      	ldr	r1, [r4, #16]
 8003d1c:	6893      	ldr	r3, [r2, #8]
 8003d1e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003d22:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003d26:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d28:	f7ff ff64 	bl	8003bf4 <HAL_RCC_GetSysClockFreq>
 8003d2c:	4a0f      	ldr	r2, [pc, #60]	; (8003d6c <HAL_RCC_ClockConfig+0x12c>)
 8003d2e:	4c10      	ldr	r4, [pc, #64]	; (8003d70 <HAL_RCC_ClockConfig+0x130>)
 8003d30:	6892      	ldr	r2, [r2, #8]
 8003d32:	4910      	ldr	r1, [pc, #64]	; (8003d74 <HAL_RCC_ClockConfig+0x134>)
 8003d34:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003d38:	4603      	mov	r3, r0
 8003d3a:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8003d3c:	480e      	ldr	r0, [pc, #56]	; (8003d78 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d3e:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8003d40:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d42:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8003d44:	f7ff f910 	bl	8002f68 <HAL_InitTick>
  return HAL_OK;
 8003d48:	2000      	movs	r0, #0
}
 8003d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d4e:	0198      	lsls	r0, r3, #6
 8003d50:	d4b1      	bmi.n	8003cb6 <HAL_RCC_ClockConfig+0x76>
 8003d52:	e789      	b.n	8003c68 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003d54:	2001      	movs	r0, #1
}
 8003d56:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d58:	4b04      	ldr	r3, [pc, #16]	; (8003d6c <HAL_RCC_ClockConfig+0x12c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	039e      	lsls	r6, r3, #14
 8003d5e:	d4aa      	bmi.n	8003cb6 <HAL_RCC_ClockConfig+0x76>
 8003d60:	e782      	b.n	8003c68 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8003d62:	2003      	movs	r0, #3
 8003d64:	e781      	b.n	8003c6a <HAL_RCC_ClockConfig+0x2a>
 8003d66:	bf00      	nop
 8003d68:	40023c00 	.word	0x40023c00
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	080072b4 	.word	0x080072b4
 8003d74:	20000574 	.word	0x20000574
 8003d78:	2000057c 	.word	0x2000057c

08003d7c <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8003d7c:	4b01      	ldr	r3, [pc, #4]	; (8003d84 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	20000574 	.word	0x20000574

08003d88 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d88:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8003d8a:	4905      	ldr	r1, [pc, #20]	; (8003da0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	4a05      	ldr	r2, [pc, #20]	; (8003da4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003d90:	6808      	ldr	r0, [r1, #0]
 8003d92:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003d96:	5cd3      	ldrb	r3, [r2, r3]
}
 8003d98:	40d8      	lsrs	r0, r3
 8003d9a:	4770      	bx	lr
 8003d9c:	40023800 	.word	0x40023800
 8003da0:	20000574 	.word	0x20000574
 8003da4:	080072c4 	.word	0x080072c4

08003da8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003da8:	4b04      	ldr	r3, [pc, #16]	; (8003dbc <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8003daa:	4905      	ldr	r1, [pc, #20]	; (8003dc0 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	4a05      	ldr	r2, [pc, #20]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003db0:	6808      	ldr	r0, [r1, #0]
 8003db2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003db6:	5cd3      	ldrb	r3, [r2, r3]
}
 8003db8:	40d8      	lsrs	r0, r3
 8003dba:	4770      	bx	lr
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	20000574 	.word	0x20000574
 8003dc4:	080072c4 	.word	0x080072c4

08003dc8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d076      	beq.n	8003eba <HAL_TIM_Base_Init+0xf2>
{
 8003dcc:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d055      	beq.n	8003e88 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ddc:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dde:	4938      	ldr	r1, [pc, #224]	; (8003ec0 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003de0:	2302      	movs	r3, #2
 8003de2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003de6:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003de8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dea:	d052      	beq.n	8003e92 <HAL_TIM_Base_Init+0xca>
 8003dec:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003df0:	d021      	beq.n	8003e36 <HAL_TIM_Base_Init+0x6e>
 8003df2:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8003df6:	428a      	cmp	r2, r1
 8003df8:	d01d      	beq.n	8003e36 <HAL_TIM_Base_Init+0x6e>
 8003dfa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003dfe:	428a      	cmp	r2, r1
 8003e00:	d019      	beq.n	8003e36 <HAL_TIM_Base_Init+0x6e>
 8003e02:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003e06:	428a      	cmp	r2, r1
 8003e08:	d015      	beq.n	8003e36 <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e0a:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8003e0e:	428a      	cmp	r2, r1
 8003e10:	d015      	beq.n	8003e3e <HAL_TIM_Base_Init+0x76>
 8003e12:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003e16:	428a      	cmp	r2, r1
 8003e18:	d011      	beq.n	8003e3e <HAL_TIM_Base_Init+0x76>
 8003e1a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003e1e:	428a      	cmp	r2, r1
 8003e20:	d00d      	beq.n	8003e3e <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e22:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e24:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e2a:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e2e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e30:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e32:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e34:	e010      	b.n	8003e58 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8003e36:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003e3c:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e3e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e40:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e46:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e4c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e4e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003e50:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003e52:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e54:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e56:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e5c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e60:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003e64:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003e68:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003e6c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e78:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003e7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003e80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003e84:	2000      	movs	r0, #0
}
 8003e86:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003e88:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003e8c:	f7fe fa42 	bl	8002314 <HAL_TIM_Base_MspInit>
 8003e90:	e7a4      	b.n	8003ddc <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003e92:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e94:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003e9a:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ea0:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea2:	69a1      	ldr	r1, [r4, #24]
 8003ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ea8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8003eaa:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eac:	68e3      	ldr	r3, [r4, #12]
 8003eae:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003eb0:	6863      	ldr	r3, [r4, #4]
 8003eb2:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003eb4:	6963      	ldr	r3, [r4, #20]
 8003eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8003eb8:	e7ce      	b.n	8003e58 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 8003eba:	2001      	movs	r0, #1
}
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40010000 	.word	0x40010000

08003ec4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003ec4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d127      	bne.n	8003f1c <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ecc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ece:	4915      	ldr	r1, [pc, #84]	; (8003f24 <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ed6:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ed8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee0:	d011      	beq.n	8003f06 <HAL_TIM_Base_Start_IT+0x42>
 8003ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee6:	d00e      	beq.n	8003f06 <HAL_TIM_Base_Start_IT+0x42>
 8003ee8:	4a0f      	ldr	r2, [pc, #60]	; (8003f28 <HAL_TIM_Base_Start_IT+0x64>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00b      	beq.n	8003f06 <HAL_TIM_Base_Start_IT+0x42>
 8003eee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d007      	beq.n	8003f06 <HAL_TIM_Base_Start_IT+0x42>
 8003ef6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d003      	beq.n	8003f06 <HAL_TIM_Base_Start_IT+0x42>
 8003efe:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d104      	bne.n	8003f10 <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0c:	2a06      	cmp	r2, #6
 8003f0e:	d007      	beq.n	8003f20 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8003f16:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	4770      	bx	lr
    return HAL_ERROR;
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	4770      	bx	lr
  return HAL_OK;
 8003f20:	2000      	movs	r0, #0
}
 8003f22:	4770      	bx	lr
 8003f24:	40010000 	.word	0x40010000
 8003f28:	40000400 	.word	0x40000400

08003f2c <HAL_TIM_PWM_MspInit>:
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop

08003f30 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d076      	beq.n	8004022 <HAL_TIM_PWM_Init+0xf2>
{
 8003f34:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f36:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d055      	beq.n	8003ff0 <HAL_TIM_PWM_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f44:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f46:	4938      	ldr	r1, [pc, #224]	; (8004028 <HAL_TIM_PWM_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f4e:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8003f50:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f52:	d052      	beq.n	8003ffa <HAL_TIM_PWM_Init+0xca>
 8003f54:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003f58:	d021      	beq.n	8003f9e <HAL_TIM_PWM_Init+0x6e>
 8003f5a:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8003f5e:	428a      	cmp	r2, r1
 8003f60:	d01d      	beq.n	8003f9e <HAL_TIM_PWM_Init+0x6e>
 8003f62:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003f66:	428a      	cmp	r2, r1
 8003f68:	d019      	beq.n	8003f9e <HAL_TIM_PWM_Init+0x6e>
 8003f6a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003f6e:	428a      	cmp	r2, r1
 8003f70:	d015      	beq.n	8003f9e <HAL_TIM_PWM_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f72:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8003f76:	428a      	cmp	r2, r1
 8003f78:	d015      	beq.n	8003fa6 <HAL_TIM_PWM_Init+0x76>
 8003f7a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003f7e:	428a      	cmp	r2, r1
 8003f80:	d011      	beq.n	8003fa6 <HAL_TIM_PWM_Init+0x76>
 8003f82:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003f86:	428a      	cmp	r2, r1
 8003f88:	d00d      	beq.n	8003fa6 <HAL_TIM_PWM_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f8a:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f8c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f92:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8003f94:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8003f96:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f98:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003f9a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f9c:	e010      	b.n	8003fc0 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8003f9e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003fa4:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fa6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fa8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fae:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb4:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb6:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8003fb8:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8003fba:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fbc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003fbe:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fc4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003fcc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003fd0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003fd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fe0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003fe4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003fe8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003fec:	2000      	movs	r0, #0
}
 8003fee:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003ff0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003ff4:	f7ff ff9a 	bl	8003f2c <HAL_TIM_PWM_MspInit>
 8003ff8:	e7a4      	b.n	8003f44 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003ffa:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ffc:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004002:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004008:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800400a:	69a1      	ldr	r1, [r4, #24]
 800400c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004010:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004012:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004014:	68e3      	ldr	r3, [r4, #12]
 8004016:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004018:	6863      	ldr	r3, [r4, #4]
 800401a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800401c:	6963      	ldr	r3, [r4, #20]
 800401e:	6313      	str	r3, [r2, #48]	; 0x30
 8004020:	e7ce      	b.n	8003fc0 <HAL_TIM_PWM_Init+0x90>
    return HAL_ERROR;
 8004022:	2001      	movs	r0, #1
}
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40010000 	.word	0x40010000

0800402c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800402c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004030:	2b01      	cmp	r3, #1
 8004032:	f000 80ca 	beq.w	80041ca <HAL_TIM_PWM_ConfigChannel+0x19e>
 8004036:	2301      	movs	r3, #1
{
 8004038:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 800403a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800403e:	2a0c      	cmp	r2, #12
 8004040:	d808      	bhi.n	8004054 <HAL_TIM_PWM_ConfigChannel+0x28>
 8004042:	e8df f002 	tbb	[pc, r2]
 8004046:	073d      	.short	0x073d
 8004048:	07680707 	.word	0x07680707
 800404c:	07960707 	.word	0x07960707
 8004050:	0707      	.short	0x0707
 8004052:	0e          	.byte	0x0e
 8004053:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8004054:	2300      	movs	r3, #0
 8004056:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800405a:	2201      	movs	r2, #1
}
 800405c:	4610      	mov	r0, r2
 800405e:	bcf0      	pop	{r4, r5, r6, r7}
 8004060:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004062:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004064:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004066:	6a1a      	ldr	r2, [r3, #32]
 8004068:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800406c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800406e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004070:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004072:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004074:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004078:	ea44 2406 	orr.w	r4, r4, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800407c:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800407e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004082:	ea42 3206 	orr.w	r2, r2, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004086:	4e6b      	ldr	r6, [pc, #428]	; (8004234 <HAL_TIM_PWM_ConfigChannel+0x208>)
 8004088:	42b3      	cmp	r3, r6
 800408a:	f000 80bd 	beq.w	8004208 <HAL_TIM_PWM_ConfigChannel+0x1dc>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408e:	605d      	str	r5, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004090:	61dc      	str	r4, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004092:	684c      	ldr	r4, [r1, #4]
 8004094:	641c      	str	r4, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004096:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004098:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800409a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800409c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040a2:	69dc      	ldr	r4, [r3, #28]
 80040a4:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80040a8:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040aa:	69d9      	ldr	r1, [r3, #28]
 80040ac:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80040b0:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 80040b2:	2300      	movs	r3, #0
 80040b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80040b8:	2200      	movs	r2, #0
}
 80040ba:	4610      	mov	r0, r2
 80040bc:	bcf0      	pop	{r4, r5, r6, r7}
 80040be:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040c0:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80040c2:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040c4:	6a1a      	ldr	r2, [r3, #32]
 80040c6:	f022 0201 	bic.w	r2, r2, #1
 80040ca:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80040cc:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80040ce:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80040d0:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040d2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80040d6:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 80040d8:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80040da:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 80040de:	4332      	orrs	r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040e0:	4e54      	ldr	r6, [pc, #336]	; (8004234 <HAL_TIM_PWM_ConfigChannel+0x208>)
 80040e2:	42b3      	cmp	r3, r6
 80040e4:	d074      	beq.n	80041d0 <HAL_TIM_PWM_ConfigChannel+0x1a4>
  TIMx->CR2 = tmpcr2;
 80040e6:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80040e8:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80040ea:	684c      	ldr	r4, [r1, #4]
 80040ec:	635c      	str	r4, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80040ee:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040f0:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040f2:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040f4:	f042 0208 	orr.w	r2, r2, #8
 80040f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040fa:	699c      	ldr	r4, [r3, #24]
 80040fc:	f024 0404 	bic.w	r4, r4, #4
 8004100:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004102:	6999      	ldr	r1, [r3, #24]
 8004104:	4329      	orrs	r1, r5
 8004106:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 8004108:	2300      	movs	r3, #0
 800410a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800410e:	2200      	movs	r2, #0
}
 8004110:	4610      	mov	r0, r2
 8004112:	bcf0      	pop	{r4, r5, r6, r7}
 8004114:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004116:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004118:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800411a:	6a1a      	ldr	r2, [r3, #32]
 800411c:	f022 0210 	bic.w	r2, r2, #16
 8004120:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004122:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004124:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004126:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004128:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800412c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004130:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004132:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004136:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800413a:	4e3e      	ldr	r6, [pc, #248]	; (8004234 <HAL_TIM_PWM_ConfigChannel+0x208>)
 800413c:	42b3      	cmp	r3, r6
 800413e:	d054      	beq.n	80041ea <HAL_TIM_PWM_ConfigChannel+0x1be>
  TIMx->CR2 = tmpcr2;
 8004140:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004142:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004144:	684c      	ldr	r4, [r1, #4]
 8004146:	639c      	str	r4, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004148:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800414a:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800414c:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800414e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004154:	699c      	ldr	r4, [r3, #24]
 8004156:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800415a:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800415c:	6999      	ldr	r1, [r3, #24]
 800415e:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8004162:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 8004164:	2300      	movs	r3, #0
 8004166:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800416a:	2200      	movs	r2, #0
}
 800416c:	4610      	mov	r0, r2
 800416e:	bcf0      	pop	{r4, r5, r6, r7}
 8004170:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004172:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8004174:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004176:	6a1a      	ldr	r2, [r3, #32]
 8004178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800417c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800417e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004180:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004182:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004184:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004188:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800418a:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800418c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004190:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004194:	4e27      	ldr	r6, [pc, #156]	; (8004234 <HAL_TIM_PWM_ConfigChannel+0x208>)
 8004196:	42b3      	cmp	r3, r6
 8004198:	d03c      	beq.n	8004214 <HAL_TIM_PWM_ConfigChannel+0x1e8>
  TIMx->CR2 = tmpcr2;
 800419a:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800419c:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800419e:	684c      	ldr	r4, [r1, #4]
 80041a0:	63dc      	str	r4, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80041a2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041a4:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041a6:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041a8:	f042 0208 	orr.w	r2, r2, #8
 80041ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041ae:	69dc      	ldr	r4, [r3, #28]
 80041b0:	f024 0404 	bic.w	r4, r4, #4
 80041b4:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041b6:	69d9      	ldr	r1, [r3, #28]
 80041b8:	4329      	orrs	r1, r5
 80041ba:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 80041bc:	2300      	movs	r3, #0
 80041be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80041c2:	2200      	movs	r2, #0
}
 80041c4:	4610      	mov	r0, r2
 80041c6:	bcf0      	pop	{r4, r5, r6, r7}
 80041c8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80041ca:	2202      	movs	r2, #2
}
 80041cc:	4610      	mov	r0, r2
 80041ce:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80041d0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80041d2:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80041d6:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 80041d8:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041dc:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80041e0:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 80041e2:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80041e6:	4335      	orrs	r5, r6
 80041e8:	e77d      	b.n	80040e6 <HAL_TIM_PWM_ConfigChannel+0xba>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041ea:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80041ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041f0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041f4:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041f8:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041fc:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80041fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004202:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 8004206:	e79b      	b.n	8004140 <HAL_TIM_PWM_ConfigChannel+0x114>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004208:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800420a:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800420e:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8004212:	e73c      	b.n	800408e <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004214:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004216:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800421a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800421e:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004222:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004226:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8004228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800422c:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8004230:	e7b3      	b.n	800419a <HAL_TIM_PWM_ConfigChannel+0x16e>
 8004232:	bf00      	nop
 8004234:	40010000 	.word	0x40010000

08004238 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004238:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800423c:	2b01      	cmp	r3, #1
 800423e:	d075      	beq.n	800432c <HAL_TIM_ConfigClockSource+0xf4>
 8004240:	4602      	mov	r2, r0
{
 8004242:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004244:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8004246:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004248:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 800424c:	2001      	movs	r0, #1
 800424e:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004252:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004254:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004258:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800425c:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800425e:	680b      	ldr	r3, [r1, #0]
 8004260:	2b60      	cmp	r3, #96	; 0x60
 8004262:	d065      	beq.n	8004330 <HAL_TIM_ConfigClockSource+0xf8>
 8004264:	d824      	bhi.n	80042b0 <HAL_TIM_ConfigClockSource+0x78>
 8004266:	2b40      	cmp	r3, #64	; 0x40
 8004268:	d07c      	beq.n	8004364 <HAL_TIM_ConfigClockSource+0x12c>
 800426a:	d94b      	bls.n	8004304 <HAL_TIM_ConfigClockSource+0xcc>
 800426c:	2b50      	cmp	r3, #80	; 0x50
 800426e:	d117      	bne.n	80042a0 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004270:	6848      	ldr	r0, [r1, #4]
 8004272:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004274:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004276:	6a23      	ldr	r3, [r4, #32]
 8004278:	f023 0301 	bic.w	r3, r3, #1
 800427c:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800427e:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004280:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004284:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8004288:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800428a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800428e:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004290:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004292:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004298:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 800429c:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800429e:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80042a0:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80042a2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80042a4:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80042a8:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80042ac:	bc30      	pop	{r4, r5}
 80042ae:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80042b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b4:	d038      	beq.n	8004328 <HAL_TIM_ConfigClockSource+0xf0>
 80042b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ba:	d110      	bne.n	80042de <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042bc:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80042c0:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042c2:	432b      	orrs	r3, r5
 80042c4:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c6:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042ca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80042ce:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042d0:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042d2:	68a3      	ldr	r3, [r4, #8]
 80042d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 80042d8:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042da:	60a3      	str	r3, [r4, #8]
      break;
 80042dc:	e7e0      	b.n	80042a0 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80042de:	2b70      	cmp	r3, #112	; 0x70
 80042e0:	d1de      	bne.n	80042a0 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042e2:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80042e6:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042e8:	432b      	orrs	r3, r5
 80042ea:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ec:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042f0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80042f4:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80042f6:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80042f8:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042fa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 80042fe:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8004300:	60a3      	str	r3, [r4, #8]
      break;
 8004302:	e7cd      	b.n	80042a0 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004304:	2b20      	cmp	r3, #32
 8004306:	d002      	beq.n	800430e <HAL_TIM_ConfigClockSource+0xd6>
 8004308:	d90a      	bls.n	8004320 <HAL_TIM_ConfigClockSource+0xe8>
 800430a:	2b30      	cmp	r3, #48	; 0x30
 800430c:	d1c8      	bne.n	80042a0 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 800430e:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004310:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004314:	430b      	orrs	r3, r1
 8004316:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 800431a:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 800431c:	60a3      	str	r3, [r4, #8]
}
 800431e:	e7bf      	b.n	80042a0 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8004320:	f033 0110 	bics.w	r1, r3, #16
 8004324:	d1bc      	bne.n	80042a0 <HAL_TIM_ConfigClockSource+0x68>
 8004326:	e7f2      	b.n	800430e <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8004328:	2000      	movs	r0, #0
 800432a:	e7b9      	b.n	80042a0 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 800432c:	2002      	movs	r0, #2
}
 800432e:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004330:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004332:	68cb      	ldr	r3, [r1, #12]
 8004334:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004336:	f020 0010 	bic.w	r0, r0, #16
 800433a:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800433c:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800433e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004342:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8004346:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8004348:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800434a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800434e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8004352:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004354:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800435a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 800435e:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004360:	60a3      	str	r3, [r4, #8]
}
 8004362:	e79d      	b.n	80042a0 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004364:	6848      	ldr	r0, [r1, #4]
 8004366:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8004368:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800436a:	6a23      	ldr	r3, [r4, #32]
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004372:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004374:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004378:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800437c:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800437e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004382:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004384:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8004386:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800438c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8004390:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8004392:	60a3      	str	r3, [r4, #8]
}
 8004394:	e784      	b.n	80042a0 <HAL_TIM_ConfigClockSource+0x68>
 8004396:	bf00      	nop

08004398 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8004398:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800439c:	2a01      	cmp	r2, #1
 800439e:	d050      	beq.n	8004442 <HAL_TIM_SlaveConfigSynchro+0xaa>
 80043a0:	4603      	mov	r3, r0
{
 80043a2:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80043a6:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 80043ac:	2001      	movs	r0, #1
 80043ae:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80043b2:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80043b4:	6848      	ldr	r0, [r1, #4]
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80043b6:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 80043b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80043bc:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 80043be:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80043c2:	432a      	orrs	r2, r5
  switch (sSlaveConfig->InputTrigger)
 80043c4:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 80043c6:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80043c8:	d060      	beq.n	800448c <HAL_TIM_SlaveConfigSynchro+0xf4>
 80043ca:	d90f      	bls.n	80043ec <HAL_TIM_SlaveConfigSynchro+0x54>
 80043cc:	2860      	cmp	r0, #96	; 0x60
 80043ce:	d03a      	beq.n	8004446 <HAL_TIM_SlaveConfigSynchro+0xae>
 80043d0:	2870      	cmp	r0, #112	; 0x70
 80043d2:	d10e      	bne.n	80043f2 <HAL_TIM_SlaveConfigSynchro+0x5a>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043d4:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 80043d8:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043da:	432a      	orrs	r2, r5
 80043dc:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043de:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043e2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80043e6:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 80043e8:	60a2      	str	r2, [r4, #8]
 80043ea:	e00f      	b.n	800440c <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 80043ec:	2840      	cmp	r0, #64	; 0x40
 80043ee:	d03d      	beq.n	800446c <HAL_TIM_SlaveConfigSynchro+0xd4>
 80043f0:	d907      	bls.n	8004402 <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 80043f2:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80043f4:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 80043f6:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80043fe:	bc70      	pop	{r4, r5, r6}
 8004400:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004402:	2820      	cmp	r0, #32
 8004404:	d002      	beq.n	800440c <HAL_TIM_SlaveConfigSynchro+0x74>
 8004406:	d912      	bls.n	800442e <HAL_TIM_SlaveConfigSynchro+0x96>
 8004408:	2830      	cmp	r0, #48	; 0x30
 800440a:	d1f2      	bne.n	80043f2 <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800440c:	68e2      	ldr	r2, [r4, #12]
 800440e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004412:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004414:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 8004416:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8004418:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800441a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800441e:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004420:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004424:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 8004428:	4608      	mov	r0, r1
}
 800442a:	bc70      	pop	{r4, r5, r6}
 800442c:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800442e:	f030 0210 	bics.w	r2, r0, #16
 8004432:	d0eb      	beq.n	800440c <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 8004434:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8004436:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8004438:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8004440:	e7dd      	b.n	80043fe <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 8004442:	2002      	movs	r0, #2
}
 8004444:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004446:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004448:	690a      	ldr	r2, [r1, #16]
 800444a:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800444c:	f020 0010 	bic.w	r0, r0, #16
 8004450:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004452:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004454:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004458:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 800445c:	6a22      	ldr	r2, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800445e:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004460:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004464:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 8004468:	6222      	str	r2, [r4, #32]
 800446a:	e7cf      	b.n	800440c <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800446c:	2d05      	cmp	r5, #5
 800446e:	d0c0      	beq.n	80043f2 <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 8004470:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004472:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004474:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004476:	f020 0001 	bic.w	r0, r0, #1
 800447a:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800447c:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800447e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004482:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8004486:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8004488:	6225      	str	r5, [r4, #32]
      break;
 800448a:	e7bf      	b.n	800440c <HAL_TIM_SlaveConfigSynchro+0x74>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800448c:	6888      	ldr	r0, [r1, #8]
 800448e:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8004490:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004492:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004496:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004498:	6a20      	ldr	r0, [r4, #32]
 800449a:	f020 0001 	bic.w	r0, r0, #1
 800449e:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a0:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044a2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044a6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80044aa:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 80044ac:	6221      	str	r1, [r4, #32]
 80044ae:	e7ad      	b.n	800440c <HAL_TIM_SlaveConfigSynchro+0x74>

080044b0 <HAL_TIM_OC_DelayElapsedCallback>:
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop

080044b4 <HAL_TIM_IC_CaptureCallback>:
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop

080044b8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop

080044bc <HAL_TIM_TriggerCallback>:
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop

080044c0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044c0:	6803      	ldr	r3, [r0, #0]
 80044c2:	691a      	ldr	r2, [r3, #16]
 80044c4:	0791      	lsls	r1, r2, #30
{
 80044c6:	b510      	push	{r4, lr}
 80044c8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044ca:	d502      	bpl.n	80044d2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	0792      	lsls	r2, r2, #30
 80044d0:	d45f      	bmi.n	8004592 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	0750      	lsls	r0, r2, #29
 80044d6:	d502      	bpl.n	80044de <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	0751      	lsls	r1, r2, #29
 80044dc:	d446      	bmi.n	800456c <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044de:	691a      	ldr	r2, [r3, #16]
 80044e0:	0712      	lsls	r2, r2, #28
 80044e2:	d502      	bpl.n	80044ea <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	0710      	lsls	r0, r2, #28
 80044e8:	d42e      	bmi.n	8004548 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	06d2      	lsls	r2, r2, #27
 80044ee:	d502      	bpl.n	80044f6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	06d0      	lsls	r0, r2, #27
 80044f4:	d418      	bmi.n	8004528 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	07d1      	lsls	r1, r2, #31
 80044fa:	d502      	bpl.n	8004502 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	07d2      	lsls	r2, r2, #31
 8004500:	d45d      	bmi.n	80045be <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	0610      	lsls	r0, r2, #24
 8004506:	d502      	bpl.n	800450e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	0611      	lsls	r1, r2, #24
 800450c:	d45f      	bmi.n	80045ce <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	0652      	lsls	r2, r2, #25
 8004512:	d502      	bpl.n	800451a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	0650      	lsls	r0, r2, #25
 8004518:	d461      	bmi.n	80045de <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	0691      	lsls	r1, r2, #26
 800451e:	d502      	bpl.n	8004526 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	0692      	lsls	r2, r2, #26
 8004524:	d443      	bmi.n	80045ae <HAL_TIM_IRQHandler+0xee>
}
 8004526:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004528:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800452c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800452e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004530:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004538:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800453a:	d064      	beq.n	8004606 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800453c:	f7ff ffba 	bl	80044b4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004540:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004542:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004544:	7722      	strb	r2, [r4, #28]
 8004546:	e7d6      	b.n	80044f6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004548:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800454c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800454e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004550:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004556:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004558:	d152      	bne.n	8004600 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455a:	f7ff ffa9 	bl	80044b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455e:	4620      	mov	r0, r4
 8004560:	f7ff ffaa 	bl	80044b8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004564:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004566:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004568:	7722      	strb	r2, [r4, #28]
 800456a:	e7be      	b.n	80044ea <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800456c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004570:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004572:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004574:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800457c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800457e:	d13c      	bne.n	80045fa <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004580:	f7ff ff96 	bl	80044b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004584:	4620      	mov	r0, r4
 8004586:	f7ff ff97 	bl	80044b8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800458c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458e:	7722      	strb	r2, [r4, #28]
 8004590:	e7a5      	b.n	80044de <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004592:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004596:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004598:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800459a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	079b      	lsls	r3, r3, #30
 80045a0:	d025      	beq.n	80045ee <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 80045a2:	f7ff ff87 	bl	80044b4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045a8:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045aa:	7722      	strb	r2, [r4, #28]
 80045ac:	e791      	b.n	80044d2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045ae:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80045b2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045b4:	611a      	str	r2, [r3, #16]
}
 80045b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80045ba:	f000 b9ad 	b.w	8004918 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80045be:	f06f 0201 	mvn.w	r2, #1
 80045c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80045c4:	4620      	mov	r0, r4
 80045c6:	f7fb ffb3 	bl	8000530 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	e799      	b.n	8004502 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045d2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80045d4:	4620      	mov	r0, r4
 80045d6:	f000 f9a1 	bl	800491c <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	e797      	b.n	800450e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045e2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80045e4:	4620      	mov	r0, r4
 80045e6:	f7ff ff69 	bl	80044bc <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	e795      	b.n	800451a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ee:	f7ff ff5f 	bl	80044b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f2:	4620      	mov	r0, r4
 80045f4:	f7ff ff60 	bl	80044b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80045f8:	e7d5      	b.n	80045a6 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80045fa:	f7ff ff5b 	bl	80044b4 <HAL_TIM_IC_CaptureCallback>
 80045fe:	e7c4      	b.n	800458a <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8004600:	f7ff ff58 	bl	80044b4 <HAL_TIM_IC_CaptureCallback>
 8004604:	e7ae      	b.n	8004564 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004606:	f7ff ff53 	bl	80044b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800460a:	4620      	mov	r0, r4
 800460c:	f7ff ff54 	bl	80044b8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004610:	e796      	b.n	8004540 <HAL_TIM_IRQHandler+0x80>
 8004612:	bf00      	nop

08004614 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004614:	4a2a      	ldr	r2, [pc, #168]	; (80046c0 <TIM_Base_SetConfig+0xac>)
  tmpcr1 = TIMx->CR1;
 8004616:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004618:	4290      	cmp	r0, r2
{
 800461a:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800461c:	d039      	beq.n	8004692 <TIM_Base_SetConfig+0x7e>
 800461e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004622:	d021      	beq.n	8004668 <TIM_Base_SetConfig+0x54>
 8004624:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004628:	4290      	cmp	r0, r2
 800462a:	d01d      	beq.n	8004668 <TIM_Base_SetConfig+0x54>
 800462c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004630:	4290      	cmp	r0, r2
 8004632:	d019      	beq.n	8004668 <TIM_Base_SetConfig+0x54>
 8004634:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004638:	4290      	cmp	r0, r2
 800463a:	d015      	beq.n	8004668 <TIM_Base_SetConfig+0x54>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800463c:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8004640:	4290      	cmp	r0, r2
 8004642:	d015      	beq.n	8004670 <TIM_Base_SetConfig+0x5c>
 8004644:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004648:	4290      	cmp	r0, r2
 800464a:	d011      	beq.n	8004670 <TIM_Base_SetConfig+0x5c>
 800464c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004650:	4290      	cmp	r0, r2
 8004652:	d00d      	beq.n	8004670 <TIM_Base_SetConfig+0x5c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004654:	694d      	ldr	r5, [r1, #20]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004656:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 8004658:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800465a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800465e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004660:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004662:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004664:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004666:	e010      	b.n	800468a <TIM_Base_SetConfig+0x76>
    tmpcr1 |= Structure->CounterMode;
 8004668:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800466a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800466e:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004670:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004672:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004678:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800467a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800467e:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004680:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8004682:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8004684:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004686:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004688:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800468a:	2301      	movs	r3, #1
}
 800468c:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 800468e:	6143      	str	r3, [r0, #20]
}
 8004690:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004692:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004694:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800469a:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 800469c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046a0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046a2:	694a      	ldr	r2, [r1, #20]
 80046a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046a8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80046aa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046ac:	688b      	ldr	r3, [r1, #8]
 80046ae:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80046b0:	680b      	ldr	r3, [r1, #0]
 80046b2:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80046b4:	690b      	ldr	r3, [r1, #16]
 80046b6:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80046b8:	2301      	movs	r3, #1
}
 80046ba:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 80046bc:	6143      	str	r3, [r0, #20]
}
 80046be:	4770      	bx	lr
 80046c0:	40010000 	.word	0x40010000

080046c4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046c4:	6a03      	ldr	r3, [r0, #32]
 80046c6:	f023 0310 	bic.w	r3, r3, #16
 80046ca:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80046cc:	6a03      	ldr	r3, [r0, #32]
{
 80046ce:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 80046d0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80046d2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046d4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80046d6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046da:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046de:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80046e0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046e4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046e8:	4d0c      	ldr	r5, [pc, #48]	; (800471c <TIM_OC2_SetConfig+0x58>)
 80046ea:	42a8      	cmp	r0, r5
 80046ec:	d006      	beq.n	80046fc <TIM_OC2_SetConfig+0x38>
  TIMx->CCR2 = OC_Config->Pulse;
 80046ee:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80046f0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80046f2:	6182      	str	r2, [r0, #24]
}
 80046f4:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 80046f6:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80046f8:	6203      	str	r3, [r0, #32]
}
 80046fa:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046fc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80046fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004702:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004706:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800470a:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800470e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004714:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004718:	e7e9      	b.n	80046ee <TIM_OC2_SetConfig+0x2a>
 800471a:	bf00      	nop
 800471c:	40010000 	.word	0x40010000

08004720 <TIM_TI1_SetConfig>:
{
 8004720:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004722:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004724:	4e17      	ldr	r6, [pc, #92]	; (8004784 <TIM_TI1_SetConfig+0x64>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004726:	f025 0501 	bic.w	r5, r5, #1
 800472a:	6205      	str	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800472c:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 800472e:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8004730:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004732:	d015      	beq.n	8004760 <TIM_TI1_SetConfig+0x40>
 8004734:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004738:	d012      	beq.n	8004760 <TIM_TI1_SetConfig+0x40>
 800473a:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800473e:	42b0      	cmp	r0, r6
 8004740:	d00e      	beq.n	8004760 <TIM_TI1_SetConfig+0x40>
 8004742:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004746:	42b0      	cmp	r0, r6
 8004748:	d00a      	beq.n	8004760 <TIM_TI1_SetConfig+0x40>
 800474a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800474e:	42b0      	cmp	r0, r6
 8004750:	d006      	beq.n	8004760 <TIM_TI1_SetConfig+0x40>
 8004752:	f506 369a 	add.w	r6, r6, #78848	; 0x13400
 8004756:	42b0      	cmp	r0, r6
 8004758:	d002      	beq.n	8004760 <TIM_TI1_SetConfig+0x40>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800475a:	f044 0201 	orr.w	r2, r4, #1
 800475e:	e002      	b.n	8004766 <TIM_TI1_SetConfig+0x46>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004760:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8004764:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004766:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004768:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800476c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004770:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004772:	f001 010a 	and.w	r1, r1, #10
 8004776:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004778:	4313      	orrs	r3, r2
  TIMx->CCMR1 = tmpccmr1;
 800477a:	6183      	str	r3, [r0, #24]
}
 800477c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 800477e:	6201      	str	r1, [r0, #32]
}
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	40010000 	.word	0x40010000

08004788 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop

0800478c <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 800478c:	2800      	cmp	r0, #0
 800478e:	d05f      	beq.n	8004850 <HAL_TIMEx_HallSensor_Init+0xc4>
{
 8004790:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004792:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8004796:	b088      	sub	sp, #32
 8004798:	460d      	mov	r5, r1
 800479a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800479c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d050      	beq.n	8004846 <HAL_TIMEx_HallSensor_Init+0xba>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a4:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80047a6:	2302      	movs	r3, #2
 80047a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ac:	f851 0b04 	ldr.w	r0, [r1], #4
 80047b0:	f7ff ff30 	bl	8004614 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80047b4:	68ab      	ldr	r3, [r5, #8]
 80047b6:	6829      	ldr	r1, [r5, #0]
 80047b8:	6820      	ldr	r0, [r4, #0]
 80047ba:	2203      	movs	r2, #3
 80047bc:	f7ff ffb0 	bl	8004720 <TIM_TI1_SetConfig>
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80047c0:	6820      	ldr	r0, [r4, #0]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80047c2:	686e      	ldr	r6, [r5, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80047c4:	6982      	ldr	r2, [r0, #24]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80047c6:	68e9      	ldr	r1, [r5, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80047c8:	f022 020c 	bic.w	r2, r2, #12
 80047cc:	6182      	str	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80047ce:	6983      	ldr	r3, [r0, #24]
 80047d0:	4333      	orrs	r3, r6
 80047d2:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80047d4:	6843      	ldr	r3, [r0, #4]
 80047d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047da:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80047dc:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80047de:	9102      	str	r1, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80047e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e4:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80047e6:	6883      	ldr	r3, [r0, #8]
 80047e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ec:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80047ee:	6883      	ldr	r3, [r0, #8]
 80047f0:	f023 0307 	bic.w	r3, r3, #7
 80047f4:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80047f6:	6883      	ldr	r3, [r0, #8]
 80047f8:	f043 0304 	orr.w	r3, r3, #4
 80047fc:	6083      	str	r3, [r0, #8]
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80047fe:	2500      	movs	r5, #0
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004800:	a901      	add	r1, sp, #4
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004802:	2370      	movs	r3, #112	; 0x70
 8004804:	9301      	str	r3, [sp, #4]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004806:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800480a:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800480e:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004810:	f7ff ff58 	bl	80046c4 <TIM_OC2_SetConfig>
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004814:	6822      	ldr	r2, [r4, #0]
 8004816:	6851      	ldr	r1, [r2, #4]
 8004818:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800481c:	6051      	str	r1, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800481e:	6851      	ldr	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004820:	2301      	movs	r3, #1
  return HAL_OK;
 8004822:	4628      	mov	r0, r5
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004824:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8004828:	6051      	str	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800482a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800482e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004832:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004836:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800483a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 800483e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004842:	b008      	add	sp, #32
 8004844:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004846:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 800484a:	f7ff ff9d 	bl	8004788 <HAL_TIMEx_HallSensor_MspInit>
 800484e:	e7a9      	b.n	80047a4 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 8004850:	2001      	movs	r0, #1
}
 8004852:	4770      	bx	lr

08004854 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004854:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004858:	2b01      	cmp	r3, #1
 800485a:	d02f      	beq.n	80048bc <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800485c:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800485e:	2202      	movs	r2, #2
{
 8004860:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004862:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004866:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004868:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 800486a:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800486c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004870:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004872:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004874:	4a12      	ldr	r2, [pc, #72]	; (80048c0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d012      	beq.n	80048a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800487a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800487e:	d00f      	beq.n	80048a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004880:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004884:	4293      	cmp	r3, r2
 8004886:	d00b      	beq.n	80048a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004888:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800488c:	4293      	cmp	r3, r2
 800488e:	d007      	beq.n	80048a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004890:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004894:	4293      	cmp	r3, r2
 8004896:	d003      	beq.n	80048a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004898:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800489c:	4293      	cmp	r3, r2
 800489e:	d104      	bne.n	80048aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048a0:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048a2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048a6:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048a8:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80048aa:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80048ac:	2201      	movs	r2, #1
 80048ae:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80048b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80048b6:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80048b8:	4618      	mov	r0, r3
}
 80048ba:	4770      	bx	lr
  __HAL_LOCK(htim);
 80048bc:	2002      	movs	r0, #2
}
 80048be:	4770      	bx	lr
 80048c0:	40010000 	.word	0x40010000

080048c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80048c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d023      	beq.n	8004914 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 80048cc:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80048ce:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80048d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d6:	4602      	mov	r2, r0
 80048d8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048da:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048dc:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80048de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048e2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048e8:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80048ea:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048f0:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048f2:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048f4:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048fa:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004900:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 8004902:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004904:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8004906:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8004908:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 800490c:	4608      	mov	r0, r1
}
 800490e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004912:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004914:	2002      	movs	r0, #2
}
 8004916:	4770      	bx	lr

08004918 <HAL_TIMEx_CommutCallback>:
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop

0800491c <HAL_TIMEx_BreakCallback>:
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop

08004920 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004920:	2800      	cmp	r0, #0
 8004922:	f000 808f 	beq.w	8004a44 <HAL_UART_Init+0x124>
{
 8004926:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004928:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800492c:	4604      	mov	r4, r0
 800492e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8081 	beq.w	8004a3a <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004938:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800493a:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 800493c:	2224      	movs	r2, #36	; 0x24
 800493e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004948:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800494a:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800494c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800494e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004952:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004954:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004956:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004958:	4302      	orrs	r2, r0
 800495a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800495c:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800495e:	4302      	orrs	r2, r0
 8004960:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8004962:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8004966:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800496a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800496c:	430a      	orrs	r2, r1
 800496e:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004970:	695a      	ldr	r2, [r3, #20]
 8004972:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004974:	4934      	ldr	r1, [pc, #208]	; (8004a48 <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004976:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800497a:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800497c:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800497e:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004980:	d035      	beq.n	80049ee <HAL_UART_Init+0xce>
 8004982:	4a32      	ldr	r2, [pc, #200]	; (8004a4c <HAL_UART_Init+0x12c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d032      	beq.n	80049ee <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004988:	f7ff f9fe 	bl	8003d88 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800498c:	69e3      	ldr	r3, [r4, #28]
 800498e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004992:	d032      	beq.n	80049fa <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004994:	6863      	ldr	r3, [r4, #4]
 8004996:	2119      	movs	r1, #25
 8004998:	009a      	lsls	r2, r3, #2
 800499a:	fba0 0101 	umull	r0, r1, r0, r1
 800499e:	0f9b      	lsrs	r3, r3, #30
 80049a0:	f7fb fc1a 	bl	80001d8 <__aeabi_uldivmod>
 80049a4:	492a      	ldr	r1, [pc, #168]	; (8004a50 <HAL_UART_Init+0x130>)
 80049a6:	fba1 3200 	umull	r3, r2, r1, r0
 80049aa:	0952      	lsrs	r2, r2, #5
 80049ac:	2564      	movs	r5, #100	; 0x64
 80049ae:	fb05 0012 	mls	r0, r5, r2, r0
 80049b2:	0100      	lsls	r0, r0, #4
 80049b4:	3032      	adds	r0, #50	; 0x32
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	fba1 1000 	umull	r1, r0, r1, r0
 80049bc:	0112      	lsls	r2, r2, #4
 80049be:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 80049c2:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049c4:	691a      	ldr	r2, [r3, #16]
 80049c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049cc:	695a      	ldr	r2, [r3, #20]
 80049ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049d2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80049d4:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d6:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80049d8:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80049da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049de:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e0:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049e2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049e6:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 80049ea:	4628      	mov	r0, r5
}
 80049ec:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80049ee:	f7ff f9db 	bl	8003da8 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049f2:	69e3      	ldr	r3, [r4, #28]
 80049f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f8:	d1cc      	bne.n	8004994 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049fa:	6862      	ldr	r2, [r4, #4]
 80049fc:	2119      	movs	r1, #25
 80049fe:	1892      	adds	r2, r2, r2
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	415b      	adcs	r3, r3
 8004a06:	fba0 0101 	umull	r0, r1, r0, r1
 8004a0a:	f7fb fbe5 	bl	80001d8 <__aeabi_uldivmod>
 8004a0e:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <HAL_UART_Init+0x130>)
 8004a10:	fba3 2100 	umull	r2, r1, r3, r0
 8004a14:	094d      	lsrs	r5, r1, #5
 8004a16:	2264      	movs	r2, #100	; 0x64
 8004a18:	fb02 0215 	mls	r2, r2, r5, r0
 8004a1c:	00d2      	lsls	r2, r2, #3
 8004a1e:	3232      	adds	r2, #50	; 0x32
 8004a20:	fba3 3202 	umull	r3, r2, r3, r2
 8004a24:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8004a28:	0912      	lsrs	r2, r2, #4
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8004a30:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8004a34:	440a      	add	r2, r1
 8004a36:	609a      	str	r2, [r3, #8]
 8004a38:	e7c4      	b.n	80049c4 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8004a3a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004a3e:	f7fd fd43 	bl	80024c8 <HAL_UART_MspInit>
 8004a42:	e779      	b.n	8004938 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8004a44:	2001      	movs	r0, #1
}
 8004a46:	4770      	bx	lr
 8004a48:	40011000 	.word	0x40011000
 8004a4c:	40011400 	.word	0x40011400
 8004a50:	51eb851f 	.word	0x51eb851f

08004a54 <HAL_UART_Transmit>:
{
 8004a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a58:	4605      	mov	r5, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8004a5a:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 8004a5e:	2820      	cmp	r0, #32
 8004a60:	d177      	bne.n	8004b52 <HAL_UART_Transmit+0xfe>
    if ((pData == NULL) || (Size == 0U))
 8004a62:	4689      	mov	r9, r1
 8004a64:	2900      	cmp	r1, #0
 8004a66:	d040      	beq.n	8004aea <HAL_UART_Transmit+0x96>
 8004a68:	4614      	mov	r4, r2
 8004a6a:	2a00      	cmp	r2, #0
 8004a6c:	d03d      	beq.n	8004aea <HAL_UART_Transmit+0x96>
 8004a6e:	461e      	mov	r6, r3
    __HAL_LOCK(huart);
 8004a70:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d06c      	beq.n	8004b52 <HAL_UART_Transmit+0xfe>
 8004a78:	2301      	movs	r3, #1
 8004a7a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7e:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a82:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a84:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a88:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8004a8c:	f7fe fab6 	bl	8002ffc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a90:	68ab      	ldr	r3, [r5, #8]
    huart->TxXferSize = Size;
 8004a92:	84ac      	strh	r4, [r5, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8004a98:	84ec      	strh	r4, [r5, #38]	; 0x26
    tickstart = HAL_GetTick();
 8004a9a:	4607      	mov	r7, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a9c:	d05c      	beq.n	8004b58 <HAL_UART_Transmit+0x104>
    while (huart->TxXferCount > 0U)
 8004a9e:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
    __HAL_UNLOCK(huart);
 8004aa0:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8004aa2:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8004aa4:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d07e      	beq.n	8004baa <HAL_UART_Transmit+0x156>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aac:	682c      	ldr	r4, [r5, #0]
 8004aae:	1c72      	adds	r2, r6, #1
 8004ab0:	d11e      	bne.n	8004af0 <HAL_UART_Transmit+0x9c>
 8004ab2:	6822      	ldr	r2, [r4, #0]
 8004ab4:	0613      	lsls	r3, r2, #24
 8004ab6:	d5fc      	bpl.n	8004ab2 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8004ab8:	f1b9 0f00 	cmp.w	r9, #0
 8004abc:	d044      	beq.n	8004b48 <HAL_UART_Transmit+0xf4>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004abe:	f819 3b01 	ldrb.w	r3, [r9], #1
 8004ac2:	6063      	str	r3, [r4, #4]
      huart->TxXferCount--;
 8004ac4:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	84eb      	strh	r3, [r5, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004acc:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1ec      	bne.n	8004aae <HAL_UART_Transmit+0x5a>
 8004ad4:	1c71      	adds	r1, r6, #1
 8004ad6:	d145      	bne.n	8004b64 <HAL_UART_Transmit+0x110>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	065a      	lsls	r2, r3, #25
 8004adc:	d5fc      	bpl.n	8004ad8 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8004ade:	2320      	movs	r3, #32
 8004ae0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    return HAL_OK;
 8004ae4:	2000      	movs	r0, #0
}
 8004ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8004aea:	2001      	movs	r0, #1
}
 8004aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	0618      	lsls	r0, r3, #24
 8004af4:	d4e0      	bmi.n	8004ab8 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004af6:	b12e      	cbz	r6, 8004b04 <HAL_UART_Transmit+0xb0>
 8004af8:	f7fe fa80 	bl	8002ffc <HAL_GetTick>
 8004afc:	1bc0      	subs	r0, r0, r7
 8004afe:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b00:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b02:	d2d4      	bcs.n	8004aae <HAL_UART_Transmit+0x5a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	f104 030c 	add.w	r3, r4, #12
 8004b08:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	f104 010c 	add.w	r1, r4, #12
 8004b14:	e841 3200 	strex	r2, r3, [r1]
 8004b18:	2a00      	cmp	r2, #0
 8004b1a:	d1f3      	bne.n	8004b04 <HAL_UART_Transmit+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	f104 0314 	add.w	r3, r4, #20
 8004b20:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b24:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	f104 0114 	add.w	r1, r4, #20
 8004b2c:	e841 3200 	strex	r2, r3, [r1]
 8004b30:	2a00      	cmp	r2, #0
 8004b32:	d1f3      	bne.n	8004b1c <HAL_UART_Transmit+0xc8>
        huart->gState  = HAL_UART_STATE_READY;
 8004b34:	2320      	movs	r3, #32
 8004b36:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8004b3a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8004b3e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      return HAL_TIMEOUT;
 8004b42:	2003      	movs	r0, #3
}
 8004b44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b48:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b50:	e7b7      	b.n	8004ac2 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8004b52:	2002      	movs	r0, #2
}
 8004b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b58:	692b      	ldr	r3, [r5, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d19f      	bne.n	8004a9e <HAL_UART_Transmit+0x4a>
 8004b5e:	46c8      	mov	r8, r9
      pdata8bits  = NULL;
 8004b60:	4699      	mov	r9, r3
 8004b62:	e79c      	b.n	8004a9e <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	065b      	lsls	r3, r3, #25
 8004b68:	d4b9      	bmi.n	8004ade <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b6a:	b12e      	cbz	r6, 8004b78 <HAL_UART_Transmit+0x124>
 8004b6c:	f7fe fa46 	bl	8002ffc <HAL_GetTick>
 8004b70:	1bc0      	subs	r0, r0, r7
 8004b72:	4286      	cmp	r6, r0
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b74:	682c      	ldr	r4, [r5, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b76:	d2ad      	bcs.n	8004ad4 <HAL_UART_Transmit+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b78:	f104 030c 	add.w	r3, r4, #12
 8004b7c:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b84:	f104 010c 	add.w	r1, r4, #12
 8004b88:	e841 3200 	strex	r2, r3, [r1]
 8004b8c:	2a00      	cmp	r2, #0
 8004b8e:	d1f3      	bne.n	8004b78 <HAL_UART_Transmit+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	f104 0314 	add.w	r3, r4, #20
 8004b94:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b98:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9c:	f104 0114 	add.w	r1, r4, #20
 8004ba0:	e841 3200 	strex	r2, r3, [r1]
 8004ba4:	2a00      	cmp	r2, #0
 8004ba6:	d1f3      	bne.n	8004b90 <HAL_UART_Transmit+0x13c>
 8004ba8:	e7c4      	b.n	8004b34 <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004baa:	682c      	ldr	r4, [r5, #0]
 8004bac:	e792      	b.n	8004ad4 <HAL_UART_Transmit+0x80>
 8004bae:	bf00      	nop

08004bb0 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bb0:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d11f      	bne.n	8004bf8 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8004bb8:	b1e1      	cbz	r1, 8004bf4 <HAL_UART_Receive_IT+0x44>
 8004bba:	b1da      	cbz	r2, 8004bf4 <HAL_UART_Receive_IT+0x44>
    __HAL_LOCK(huart);
 8004bbc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d019      	beq.n	8004bf8 <HAL_UART_Receive_IT+0x48>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 8004bc8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 8004bcc:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bce:	6403      	str	r3, [r0, #64]	; 0x40
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bd0:	6903      	ldr	r3, [r0, #16]
  huart->pRxBuffPtr = pData;
 8004bd2:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bd4:	2122      	movs	r1, #34	; 0x22
  huart->RxXferSize = Size;
 8004bd6:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bd8:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bdc:	b973      	cbnz	r3, 8004bfc <HAL_UART_Receive_IT+0x4c>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bde:	6803      	ldr	r3, [r0, #0]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004be0:	695a      	ldr	r2, [r3, #20]
 8004be2:	f042 0201 	orr.w	r2, r2, #1
 8004be6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004be8:	68da      	ldr	r2, [r3, #12]
 8004bea:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 8004bee:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004bf0:	60da      	str	r2, [r3, #12]
    return (UART_Start_Receive_IT(huart, pData, Size));
 8004bf2:	4770      	bx	lr
      return HAL_ERROR;
 8004bf4:	2001      	movs	r0, #1
 8004bf6:	4770      	bx	lr
    return HAL_BUSY;
 8004bf8:	2002      	movs	r0, #2
}
 8004bfa:	4770      	bx	lr
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bfc:	6803      	ldr	r3, [r0, #0]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c04:	60da      	str	r2, [r3, #12]
 8004c06:	e7eb      	b.n	8004be0 <HAL_UART_Receive_IT+0x30>

08004c08 <HAL_UART_TxCpltCallback>:
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop

08004c0c <HAL_UART_RxCpltCallback>:
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop

08004c10 <HAL_UART_ErrorCallback>:
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop

08004c14 <UART_DMAAbortOnError>:
{
 8004c14:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c16:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004c1c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004c1e:	f7ff fff7 	bl	8004c10 <HAL_UART_ErrorCallback>
}
 8004c22:	bd08      	pop	{r3, pc}

08004c24 <HAL_UARTEx_RxEventCallback>:
}
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop

08004c28 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c28:	6883      	ldr	r3, [r0, #8]
 8004c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2e:	d044      	beq.n	8004cba <UART_Receive_IT.part.0.isra.0+0x92>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c30:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d039      	beq.n	8004caa <UART_Receive_IT.part.0.isra.0+0x82>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c36:	6803      	ldr	r3, [r0, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c3e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004c40:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004c42:	3301      	adds	r3, #1
 8004c44:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004c46:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d132      	bne.n	8004cb8 <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c52:	6802      	ldr	r2, [r0, #0]
 8004c54:	68d1      	ldr	r1, [r2, #12]
 8004c56:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004c5a:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c5c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c5e:	68d1      	ldr	r1, [r2, #12]
 8004c60:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004c64:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c66:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004c68:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c6c:	f021 0101 	bic.w	r1, r1, #1
 8004c70:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004c72:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c76:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004c78:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004c7a:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c7c:	d128      	bne.n	8004cd0 <UART_Receive_IT.part.0.isra.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7e:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c80:	f102 030c 	add.w	r3, r2, #12
 8004c84:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c88:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8c:	f102 0c0c 	add.w	ip, r2, #12
 8004c90:	e84c 3100 	strex	r1, r3, [ip]
 8004c94:	2900      	cmp	r1, #0
 8004c96:	d1f3      	bne.n	8004c80 <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c98:	6813      	ldr	r3, [r2, #0]
 8004c9a:	06db      	lsls	r3, r3, #27
 8004c9c:	d422      	bmi.n	8004ce4 <UART_Receive_IT.part.0.isra.0+0xbc>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c9e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004ca0:	f7ff ffc0 	bl	8004c24 <HAL_UARTEx_RxEventCallback>
}
 8004ca4:	b003      	add	sp, #12
 8004ca6:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004caa:	6903      	ldr	r3, [r0, #16]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1c2      	bne.n	8004c36 <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cb0:	6803      	ldr	r3, [r0, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	7013      	strb	r3, [r2, #0]
 8004cb6:	e7c3      	b.n	8004c40 <UART_Receive_IT.part.0.isra.0+0x18>
 8004cb8:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cba:	6903      	ldr	r3, [r0, #16]
 8004cbc:	b96b      	cbnz	r3, 8004cda <UART_Receive_IT.part.0.isra.0+0xb2>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cbe:	6802      	ldr	r2, [r0, #0]
 8004cc0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004cc2:	6852      	ldr	r2, [r2, #4]
 8004cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cc8:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8004ccc:	6283      	str	r3, [r0, #40]	; 0x28
 8004cce:	e7ba      	b.n	8004c46 <UART_Receive_IT.part.0.isra.0+0x1e>
        HAL_UART_RxCpltCallback(huart);
 8004cd0:	f7ff ff9c 	bl	8004c0c <HAL_UART_RxCpltCallback>
}
 8004cd4:	b003      	add	sp, #12
 8004cd6:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cda:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cdc:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	7013      	strb	r3, [r2, #0]
 8004ce2:	e7ad      	b.n	8004c40 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	9301      	str	r3, [sp, #4]
 8004ce8:	6813      	ldr	r3, [r2, #0]
 8004cea:	9301      	str	r3, [sp, #4]
 8004cec:	6853      	ldr	r3, [r2, #4]
 8004cee:	9301      	str	r3, [sp, #4]
 8004cf0:	9b01      	ldr	r3, [sp, #4]
 8004cf2:	e7d4      	b.n	8004c9e <UART_Receive_IT.part.0.isra.0+0x76>

08004cf4 <HAL_UART_IRQHandler>:
{
 8004cf4:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cf6:	6803      	ldr	r3, [r0, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cfa:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cfc:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8004cfe:	f012 0f0f 	tst.w	r2, #15
{
 8004d02:	b083      	sub	sp, #12
 8004d04:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8004d06:	d16e      	bne.n	8004de6 <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d08:	0695      	lsls	r5, r2, #26
 8004d0a:	d502      	bpl.n	8004d12 <HAL_UART_IRQHandler+0x1e>
 8004d0c:	068d      	lsls	r5, r1, #26
 8004d0e:	f100 80b1 	bmi.w	8004e74 <HAL_UART_IRQHandler+0x180>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d12:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004d14:	2801      	cmp	r0, #1
 8004d16:	d00b      	beq.n	8004d30 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d18:	0610      	lsls	r0, r2, #24
 8004d1a:	d502      	bpl.n	8004d22 <HAL_UART_IRQHandler+0x2e>
 8004d1c:	060d      	lsls	r5, r1, #24
 8004d1e:	f100 80b3 	bmi.w	8004e88 <HAL_UART_IRQHandler+0x194>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d22:	0650      	lsls	r0, r2, #25
 8004d24:	d502      	bpl.n	8004d2c <HAL_UART_IRQHandler+0x38>
 8004d26:	064a      	lsls	r2, r1, #25
 8004d28:	f100 80cd 	bmi.w	8004ec6 <HAL_UART_IRQHandler+0x1d2>
}
 8004d2c:	b003      	add	sp, #12
 8004d2e:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d30:	06d5      	lsls	r5, r2, #27
 8004d32:	d5f1      	bpl.n	8004d18 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d34:	06c8      	lsls	r0, r1, #27
 8004d36:	d5ef      	bpl.n	8004d18 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d38:	2200      	movs	r2, #0
 8004d3a:	9201      	str	r2, [sp, #4]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	9201      	str	r2, [sp, #4]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	9201      	str	r2, [sp, #4]
 8004d44:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d46:	695a      	ldr	r2, [r3, #20]
 8004d48:	0655      	lsls	r5, r2, #25
 8004d4a:	f140 8116 	bpl.w	8004f7a <HAL_UART_IRQHandler+0x286>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d4e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004d50:	6802      	ldr	r2, [r0, #0]
 8004d52:	6852      	ldr	r2, [r2, #4]
 8004d54:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8004d56:	2a00      	cmp	r2, #0
 8004d58:	d0e8      	beq.n	8004d2c <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d5a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004d5c:	4291      	cmp	r1, r2
 8004d5e:	d9e5      	bls.n	8004d2c <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8004d60:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d62:	69c2      	ldr	r2, [r0, #28]
 8004d64:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004d68:	d036      	beq.n	8004dd8 <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	f103 020c 	add.w	r2, r3, #12
 8004d6e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	f103 050c 	add.w	r5, r3, #12
 8004d7a:	e845 2100 	strex	r1, r2, [r5]
 8004d7e:	2900      	cmp	r1, #0
 8004d80:	d1f3      	bne.n	8004d6a <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d82:	f103 0214 	add.w	r2, r3, #20
 8004d86:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	f103 0514 	add.w	r5, r3, #20
 8004d92:	e845 2100 	strex	r1, r2, [r5]
 8004d96:	2900      	cmp	r1, #0
 8004d98:	d1f3      	bne.n	8004d82 <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9a:	f103 0214 	add.w	r2, r3, #20
 8004d9e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da6:	f103 0514 	add.w	r5, r3, #20
 8004daa:	e845 2100 	strex	r1, r2, [r5]
 8004dae:	2900      	cmp	r1, #0
 8004db0:	d1f3      	bne.n	8004d9a <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 8004db2:	2220      	movs	r2, #32
 8004db4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004db8:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dba:	f103 020c 	add.w	r2, r3, #12
 8004dbe:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	f103 050c 	add.w	r5, r3, #12
 8004dca:	e845 2100 	strex	r1, r2, [r5]
 8004dce:	2900      	cmp	r1, #0
 8004dd0:	d1f3      	bne.n	8004dba <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dd2:	f7fe fbcb 	bl	800356c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dd6:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004dd8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004dda:	1ac9      	subs	r1, r1, r3
 8004ddc:	4620      	mov	r0, r4
 8004dde:	b289      	uxth	r1, r1
 8004de0:	f7ff ff20 	bl	8004c24 <HAL_UARTEx_RxEventCallback>
 8004de4:	e7a2      	b.n	8004d2c <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004de6:	f005 0501 	and.w	r5, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004dea:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8004dee:	4328      	orrs	r0, r5
 8004df0:	d08f      	beq.n	8004d12 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004df2:	07d0      	lsls	r0, r2, #31
 8004df4:	d505      	bpl.n	8004e02 <HAL_UART_IRQHandler+0x10e>
 8004df6:	05c8      	lsls	r0, r1, #23
 8004df8:	d503      	bpl.n	8004e02 <HAL_UART_IRQHandler+0x10e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dfa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004dfc:	f040 0001 	orr.w	r0, r0, #1
 8004e00:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e02:	0750      	lsls	r0, r2, #29
 8004e04:	d531      	bpl.n	8004e6a <HAL_UART_IRQHandler+0x176>
 8004e06:	b14d      	cbz	r5, 8004e1c <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e08:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004e0a:	f040 0002 	orr.w	r0, r0, #2
 8004e0e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e10:	0790      	lsls	r0, r2, #30
 8004e12:	d503      	bpl.n	8004e1c <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e14:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004e16:	f040 0004 	orr.w	r0, r0, #4
 8004e1a:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e1c:	0710      	lsls	r0, r2, #28
 8004e1e:	d507      	bpl.n	8004e30 <HAL_UART_IRQHandler+0x13c>
 8004e20:	f001 0020 	and.w	r0, r1, #32
 8004e24:	4328      	orrs	r0, r5
 8004e26:	d003      	beq.n	8004e30 <HAL_UART_IRQHandler+0x13c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e28:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004e2a:	f040 0008 	orr.w	r0, r0, #8
 8004e2e:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e30:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004e32:	2800      	cmp	r0, #0
 8004e34:	f43f af7a 	beq.w	8004d2c <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e38:	0690      	lsls	r0, r2, #26
 8004e3a:	d509      	bpl.n	8004e50 <HAL_UART_IRQHandler+0x15c>
 8004e3c:	0689      	lsls	r1, r1, #26
 8004e3e:	d507      	bpl.n	8004e50 <HAL_UART_IRQHandler+0x15c>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e40:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004e44:	2a22      	cmp	r2, #34	; 0x22
 8004e46:	d103      	bne.n	8004e50 <HAL_UART_IRQHandler+0x15c>
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f7ff feed 	bl	8004c28 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e52:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e54:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e58:	f005 0508 	and.w	r5, r5, #8
 8004e5c:	4315      	orrs	r5, r2
 8004e5e:	d13d      	bne.n	8004edc <HAL_UART_IRQHandler+0x1e8>
        HAL_UART_ErrorCallback(huart);
 8004e60:	4620      	mov	r0, r4
 8004e62:	f7ff fed5 	bl	8004c10 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e66:	6425      	str	r5, [r4, #64]	; 0x40
 8004e68:	e760      	b.n	8004d2c <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e6a:	0790      	lsls	r0, r2, #30
 8004e6c:	d5d6      	bpl.n	8004e1c <HAL_UART_IRQHandler+0x128>
 8004e6e:	2d00      	cmp	r5, #0
 8004e70:	d1d0      	bne.n	8004e14 <HAL_UART_IRQHandler+0x120>
 8004e72:	e7d3      	b.n	8004e1c <HAL_UART_IRQHandler+0x128>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e74:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004e78:	2b22      	cmp	r3, #34	; 0x22
 8004e7a:	f47f af57 	bne.w	8004d2c <HAL_UART_IRQHandler+0x38>
}
 8004e7e:	b003      	add	sp, #12
 8004e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e84:	f7ff bed0 	b.w	8004c28 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e88:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004e8c:	2a21      	cmp	r2, #33	; 0x21
 8004e8e:	f47f af4d 	bne.w	8004d2c <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e92:	68a2      	ldr	r2, [r4, #8]
 8004e94:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004e98:	f000 80a8 	beq.w	8004fec <HAL_UART_IRQHandler+0x2f8>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e9c:	6a22      	ldr	r2, [r4, #32]
 8004e9e:	1c51      	adds	r1, r2, #1
 8004ea0:	6221      	str	r1, [r4, #32]
 8004ea2:	7812      	ldrb	r2, [r2, #0]
 8004ea4:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004ea6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004ea8:	3a01      	subs	r2, #1
 8004eaa:	b292      	uxth	r2, r2
 8004eac:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004eae:	2a00      	cmp	r2, #0
 8004eb0:	f47f af3c 	bne.w	8004d2c <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004eba:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ec2:	60da      	str	r2, [r3, #12]
 8004ec4:	e732      	b.n	8004d2c <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ec6:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004ec8:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004eca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ece:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004ed0:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8004ed2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8004ed6:	f7ff fe97 	bl	8004c08 <HAL_UART_TxCpltCallback>
    return;
 8004eda:	e727      	b.n	8004d2c <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004edc:	f103 020c 	add.w	r2, r3, #12
 8004ee0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ee4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee8:	f103 000c 	add.w	r0, r3, #12
 8004eec:	e840 2100 	strex	r1, r2, [r0]
 8004ef0:	2900      	cmp	r1, #0
 8004ef2:	d1f3      	bne.n	8004edc <HAL_UART_IRQHandler+0x1e8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	f103 0214 	add.w	r2, r3, #20
 8004ef8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f00:	f103 0014 	add.w	r0, r3, #20
 8004f04:	e840 2100 	strex	r1, r2, [r0]
 8004f08:	2900      	cmp	r1, #0
 8004f0a:	d1f3      	bne.n	8004ef4 <HAL_UART_IRQHandler+0x200>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f0c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004f0e:	2a01      	cmp	r2, #1
 8004f10:	d022      	beq.n	8004f58 <HAL_UART_IRQHandler+0x264>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f12:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004f14:	2120      	movs	r1, #32
 8004f16:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1a:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f1c:	695a      	ldr	r2, [r3, #20]
 8004f1e:	0652      	lsls	r2, r2, #25
 8004f20:	d527      	bpl.n	8004f72 <HAL_UART_IRQHandler+0x27e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f22:	f103 0214 	add.w	r2, r3, #20
 8004f26:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	f103 0014 	add.w	r0, r3, #20
 8004f32:	e840 2100 	strex	r1, r2, [r0]
 8004f36:	2900      	cmp	r1, #0
 8004f38:	d1f3      	bne.n	8004f22 <HAL_UART_IRQHandler+0x22e>
          if (huart->hdmarx != NULL)
 8004f3a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004f3c:	b1c8      	cbz	r0, 8004f72 <HAL_UART_IRQHandler+0x27e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f3e:	4b31      	ldr	r3, [pc, #196]	; (8005004 <HAL_UART_IRQHandler+0x310>)
 8004f40:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f42:	f7fe fb5b 	bl	80035fc <HAL_DMA_Abort_IT>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	f43f aef0 	beq.w	8004d2c <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f4c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004f4e:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8004f50:	b003      	add	sp, #12
 8004f52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f56:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	f103 020c 	add.w	r2, r3, #12
 8004f5c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f60:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	f103 000c 	add.w	r0, r3, #12
 8004f68:	e840 2100 	strex	r1, r2, [r0]
 8004f6c:	2900      	cmp	r1, #0
 8004f6e:	d1f3      	bne.n	8004f58 <HAL_UART_IRQHandler+0x264>
 8004f70:	e7cf      	b.n	8004f12 <HAL_UART_IRQHandler+0x21e>
            HAL_UART_ErrorCallback(huart);
 8004f72:	4620      	mov	r0, r4
 8004f74:	f7ff fe4c 	bl	8004c10 <HAL_UART_ErrorCallback>
 8004f78:	e6d8      	b.n	8004d2c <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f7a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8004f7c:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8004f7e:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f80:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8004f82:	2a00      	cmp	r2, #0
 8004f84:	f43f aed2 	beq.w	8004d2c <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f88:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8004f8a:	1a51      	subs	r1, r2, r1
 8004f8c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8004f8e:	2900      	cmp	r1, #0
 8004f90:	f43f aecc 	beq.w	8004d2c <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	f103 020c 	add.w	r2, r3, #12
 8004f98:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f9c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	f103 050c 	add.w	r5, r3, #12
 8004fa4:	e845 2000 	strex	r0, r2, [r5]
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	d1f3      	bne.n	8004f94 <HAL_UART_IRQHandler+0x2a0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	f103 0214 	add.w	r2, r3, #20
 8004fb0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb8:	f103 0514 	add.w	r5, r3, #20
 8004fbc:	e845 2000 	strex	r0, r2, [r5]
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	d1f3      	bne.n	8004fac <HAL_UART_IRQHandler+0x2b8>
        huart->RxState = HAL_UART_STATE_READY;
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fca:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	f103 020c 	add.w	r2, r3, #12
 8004fd0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd8:	f103 050c 	add.w	r5, r3, #12
 8004fdc:	e845 2000 	strex	r0, r2, [r5]
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d1f3      	bne.n	8004fcc <HAL_UART_IRQHandler+0x2d8>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	f7ff fe1d 	bl	8004c24 <HAL_UARTEx_RxEventCallback>
 8004fea:	e69f      	b.n	8004d2c <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fec:	6922      	ldr	r2, [r4, #16]
 8004fee:	2a00      	cmp	r2, #0
 8004ff0:	f47f af54 	bne.w	8004e9c <HAL_UART_IRQHandler+0x1a8>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ff4:	6a22      	ldr	r2, [r4, #32]
 8004ff6:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004ffa:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004ffe:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005000:	6222      	str	r2, [r4, #32]
 8005002:	e750      	b.n	8004ea6 <HAL_UART_IRQHandler+0x1b2>
 8005004:	08004c15 	.word	0x08004c15

08005008 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 8005008:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 800500a:	8840      	ldrh	r0, [r0, #2]
 800500c:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8005010:	0c00      	lsrs	r0, r0, #16
 8005012:	4770      	bx	lr

08005014 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8005014:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005016:	8802      	ldrh	r2, [r0, #0]
 8005018:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 800501a:	fb03 fc03 	mul.w	ip, r3, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800501e:	fb01 cc01 	mla	ip, r1, r1, ip
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 8005022:	fb02 f202 	mul.w	r2, r2, r2
 8005026:	4562      	cmp	r2, ip
{
 8005028:	b084      	sub	sp, #16
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800502a:	d21a      	bcs.n	8005062 <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 800502c:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 8005030:	ebc2 6c1c 	rsb	ip, r2, ip, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8005034:	fa5f fc8c 	uxtb.w	ip, ip
 8005038:	eb00 004c 	add.w	r0, r0, ip, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 800503c:	8882      	ldrh	r2, [r0, #4]
 800503e:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8005042:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8005044:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8005048:	bfbc      	itt	lt
 800504a:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 800504e:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8005050:	2b00      	cmp	r3, #0
 8005052:	bfbc      	itt	lt
 8005054:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 8005058:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800505a:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800505e:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 8005062:	b289      	uxth	r1, r1
 8005064:	2000      	movs	r0, #0
 8005066:	f361 000f 	bfi	r0, r1, #0, #16
 800506a:	b29b      	uxth	r3, r3
 800506c:	f363 401f 	bfi	r0, r3, #16, #16
}
 8005070:	b004      	add	sp, #16
 8005072:	4770      	bx	lr

08005074 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8005074:	2300      	movs	r3, #0
 8005076:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8005078:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 800507a:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 800507e:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 8005082:	f8a0 311b 	strh.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
  pHandle->RxFrameLevel = 0;
 8005086:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
}
 800508a:	4770      	bx	lr

0800508c <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 800508c:	b120      	cbz	r0, 8005098 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 800508e:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8005092:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8005094:	9b00      	ldr	r3, [sp, #0]
 8005096:	60c3      	str	r3, [r0, #12]
  }
}
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop

0800509c <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 800509c:	b190      	cbz	r0, 80050c4 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 800509e:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 80050a0:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 80050a2:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 80050a4:	b151      	cbz	r1, 80050bc <FCP_CalcCRC+0x20>
 80050a6:	1c82      	adds	r2, r0, #2
 80050a8:	3901      	subs	r1, #1
 80050aa:	3001      	adds	r0, #1
 80050ac:	fa52 f181 	uxtab	r1, r2, r1
    {
      nSum += pFrame->Buffer[idx];
 80050b0:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80050b4:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80050b6:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 80050b8:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80050ba:	d1f9      	bne.n	80050b0 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 80050bc:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 80050c0:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop

080050c8 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
 80050c8:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->TIMx;

  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 80050ca:	f8b0 c016 	ldrh.w	ip, [r0, #22]
                                     pHandle->_Super.bElToMecRatio;
 80050ce:	7843      	ldrb	r3, [r0, #1]
  reliable speed */
  hMinReliableElSpeedUnit /= 4u;

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;
 80050d0:	f8b0 e014 	ldrh.w	lr, [r0, #20]

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 80050d4:	6a82      	ldr	r2, [r0, #40]	; 0x28
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 80050d6:	fb1c fc03 	smulbb	ip, ip, r3
  hMaxReliableElSpeedUnit *= 2u;
 80050da:	fb1e fe03 	smulbb	lr, lr, r3
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 80050de:	fa1f fc8c 	uxth.w	ip, ip
  hMaxReliableElSpeedUnit *= 2u;
 80050e2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 80050e6:	0c11      	lsrs	r1, r2, #16

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 80050e8:	f1bc 0f03 	cmp.w	ip, #3
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80050ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 80050ee:	f8a0 10c2 	strh.w	r1, [r0, #194]	; 0xc2
  hMaxReliableElSpeedUnit *= 2u;
 80050f2:	fa1f fe8e 	uxth.w	lr, lr
  if ( hMinReliableElSpeedUnit == 0u )
 80050f6:	d96d      	bls.n	80051d4 <HALL_Init+0x10c>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 80050f8:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 80050fc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8005100:	f242 7410 	movw	r4, #10000	; 0x2710
 8005104:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8005108:	fbb4 fcfc 	udiv	ip, r4, ip
 800510c:	fa1f f48c 	uxth.w	r4, ip
 8005110:	f8a0 40c0 	strh.w	r4, [r0, #192]	; 0xc0
  }

  /* Compute the prescaler to the closet value of the TimeOut (in mS )*/
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8005114:	4c31      	ldr	r4, [pc, #196]	; (80051dc <HALL_Init+0x114>)
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8005116:	69c5      	ldr	r5, [r0, #28]
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 8005118:	f8a0 e0b0 	strh.w	lr, [r0, #176]	; 0xb0
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 800511c:	fb0c f101 	mul.w	r1, ip, r1
 8005120:	fba4 4101 	umull	r4, r1, r4, r1
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8005124:	4c2e      	ldr	r4, [pc, #184]	; (80051e0 <HALL_Init+0x118>)
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8005126:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 800512a:	0989      	lsrs	r1, r1, #6
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 800512c:	fba4 4202 	umull	r4, r2, r4, r2
 8005130:	0892      	lsrs	r2, r2, #2
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8005132:	040c      	lsls	r4, r1, #16
 8005134:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8005138:	eb02 0482 	add.w	r4, r2, r2, lsl #2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 800513c:	fbb2 f2fc 	udiv	r2, r2, ip
 8005140:	fb05 f202 	mul.w	r2, r5, r2
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8005144:	f8c0 20b4 	str.w	r2, [r0, #180]	; 0xb4
                       / hMaxReliableElSpeedUnit);

  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005148:	f890 20c6 	ldrb.w	r2, [r0, #198]	; 0xc6
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 800514c:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8005150:	0064      	lsls	r4, r4, #1
                       / hMaxReliableElSpeedUnit);
 8005152:	fbb4 f4fe 	udiv	r4, r4, lr
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8005156:	f8c0 40bc 	str.w	r4, [r0, #188]	; 0xbc
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 800515a:	fb0c f202 	mul.w	r2, ip, r2
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 800515e:	8c84      	ldrh	r4, [r0, #36]	; 0x24
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005160:	fbb2 f2f4 	udiv	r2, r2, r4
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8005164:	699c      	ldr	r4, [r3, #24]
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8005166:	3a01      	subs	r2, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8005168:	f8a0 20c4 	strh.w	r2, [r0, #196]	; 0xc4

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;

  /* Set IC filter for Channel 1 (ICF1) */
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 800516c:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
 8005170:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8005174:	b289      	uxth	r1, r1
  pHandle->SensorIsReliable = true;
 8005176:	2401      	movs	r4, #1
 8005178:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4
 800517c:	f880 4049 	strb.w	r4, [r0, #73]	; 0x49
 8005180:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 8005182:	6299      	str	r1, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005184:	695a      	ldr	r2, [r3, #20]
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 8005186:	2100      	movs	r1, #0
 8005188:	4322      	orrs	r2, r4
 800518a:	615a      	str	r2, [r3, #20]
 800518c:	6119      	str	r1, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	f042 0204 	orr.w	r2, r2, #4
 8005194:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	f042 0202 	orr.w	r2, r2, #2
 800519c:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800519e:	68da      	ldr	r2, [r3, #12]
 80051a0:	4322      	orrs	r2, r4
 80051a2:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 80051a4:	6259      	str	r1, [r3, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 80051a6:	6a1a      	ldr	r2, [r3, #32]
 80051a8:	4322      	orrs	r2, r4
 80051aa:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4322      	orrs	r2, r4
 80051b0:	601a      	str	r2, [r3, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 80051b2:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 80051b6:	b163      	cbz	r3, 80051d2 <HALL_Init+0x10a>
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b2d9      	uxtb	r1, r3
 80051bc:	f100 0350 	add.w	r3, r0, #80	; 0x50
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 80051c0:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 80051c4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80051c8:	304c      	adds	r0, #76	; 0x4c
 80051ca:	f840 2f04 	str.w	r2, [r0, #4]!
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 80051ce:	4298      	cmp	r0, r3
 80051d0:	d1fb      	bne.n	80051ca <HALL_Init+0x102>
  }
}
 80051d2:	bd30      	pop	{r4, r5, pc}
 80051d4:	f04f 0c96 	mov.w	ip, #150	; 0x96
    pHandle->HallTimeout = 150u;
 80051d8:	4664      	mov	r4, ip
 80051da:	e799      	b.n	8005110 <HALL_Init+0x48>
 80051dc:	10624dd3 	.word	0x10624dd3
 80051e0:	aaaaaaab 	.word	0xaaaaaaab

080051e4 <HALL_Clear>:
* @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component*
* @retval none
*/
__weak void HALL_Clear( HALL_Handle_t * pHandle )
{
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80051e4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80051e6:	68d1      	ldr	r1, [r2, #12]
 80051e8:	f021 0102 	bic.w	r1, r1, #2

  /* Mask interrupts to insure a clean intialization */
  LL_TIM_DisableIT_CC1 ( TIMx );

  pHandle->RatioDec = false;
 80051ec:	2300      	movs	r3, #0
{
 80051ee:	b430      	push	{r4, r5}

  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 80051f0:	f8b0 40ae 	ldrh.w	r4, [r0, #174]	; 0xae
 80051f4:	60d1      	str	r1, [r2, #12]
  pHandle->SensorIsReliable = true;
 80051f6:	2101      	movs	r1, #1
  pHandle->RatioDec = false;
 80051f8:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  pHandle->Direction = POSITIVE;
 80051fc:	f880 10a2 	strb.w	r1, [r0, #162]	; 0xa2
  pHandle->RatioInc = false;
 8005200:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
  pHandle->SpeedFIFOIdx = 0u;
 8005204:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
  pHandle->FirstCapt = 0u;
 8005208:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  pHandle->_Super.bSpeedErrorNumber = 0;
 800520c:	7003      	strb	r3, [r0, #0]
  pHandle->BufferFilled = 0u;
 800520e:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
  pHandle->_Super.hMecAccelUnitP = 0;
 8005212:	8243      	strh	r3, [r0, #18]
  pHandle->OVFCounter = 0u;
 8005214:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  pHandle->CompSpeed = 0;
 8005218:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
  pHandle->SensorIsReliable = true;
 800521c:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
  WRITE_REG(TIMx->PSC, Prescaler);
 8005220:	6294      	str	r4, [r2, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 8005222:	6253      	str	r3, [r2, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005224:	6813      	ldr	r3, [r2, #0]
 8005226:	430b      	orrs	r3, r1
 8005228:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 800522a:	68d3      	ldr	r3, [r2, #12]
 800522c:	f043 0302 	orr.w	r3, r3, #2
 8005230:	60d3      	str	r3, [r2, #12]
* @retval none
*/
static void HALL_Init_Electrical_Angle( HALL_Handle_t * pHandle )
{

  if ( pHandle->SensorPlacement == DEGREES_120 )
 8005232:	f890 3020 	ldrb.w	r3, [r0, #32]
 8005236:	bb0b      	cbnz	r3, 800527c <HALL_Clear+0x98>
  {
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 8005238:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 800523a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800523c:	6911      	ldr	r1, [r2, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 800523e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005240:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 8005242:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005244:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005246:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 800524a:	bf0c      	ite	eq
 800524c:	2401      	moveq	r4, #1
 800524e:	2400      	movne	r4, #0
 8005250:	43ab      	bics	r3, r5
 8005252:	bf0c      	ite	eq
 8005254:	2301      	moveq	r3, #1
 8005256:	2300      	movne	r3, #0
 8005258:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 8005260:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005262:	bf08      	it	eq
 8005264:	f043 0301 	orreq.w	r3, r3, #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
  }

  switch ( pHandle->HallState )
 8005268:	1e5a      	subs	r2, r3, #1
 800526a:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 800526e:	2a05      	cmp	r2, #5
 8005270:	d85c      	bhi.n	800532c <HALL_Clear+0x148>
 8005272:	e8df f002 	tbb	[pc, r2]
 8005276:	3329      	.short	0x3329
 8005278:	1f51473d 	.word	0x1f51473d
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 800527c:	6b82      	ldr	r2, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 800527e:	6c01      	ldr	r1, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005280:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005282:	6914      	ldr	r4, [r2, #16]
 8005284:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 8005286:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005288:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800528a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800528c:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 800528e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005290:	bf0c      	ite	eq
 8005292:	2101      	moveq	r1, #1
 8005294:	2100      	movne	r1, #0
 8005296:	43ab      	bics	r3, r5
 8005298:	bf0c      	ite	eq
 800529a:	2301      	moveq	r3, #1
 800529c:	2300      	movne	r3, #0
 800529e:	43a2      	bics	r2, r4
 80052a0:	bf0c      	ite	eq
 80052a2:	2201      	moveq	r2, #1
 80052a4:	2200      	movne	r2, #0
 80052a6:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80052a8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80052ac:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80052b0:	4313      	orrs	r3, r2
 80052b2:	e7d9      	b.n	8005268 <HALL_Clear+0x84>
    case STATE_2:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
                                              S16_60_PHASE_SHIFT / 2 );
      break;
    case STATE_6:
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 80052b4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80052b6:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 80052ba:	3b3f      	subs	r3, #63	; 0x3f
 80052bc:	b21b      	sxth	r3, r3
 80052be:	8083      	strh	r3, [r0, #4]
}
 80052c0:	bc30      	pop	{r4, r5}
      pHandle->SensorIsReliable = false;
      break;
  }

  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80052c2:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80052c6:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 80052c8:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80052ca:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80052ce:	333f      	adds	r3, #63	; 0x3f
 80052d0:	b21b      	sxth	r3, r3
}
 80052d2:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 80052d4:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80052d6:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80052da:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 80052dc:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80052de:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 80052e2:	3b2a      	subs	r3, #42	; 0x2a
 80052e4:	b21b      	sxth	r3, r3
}
 80052e6:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 80052e8:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80052ea:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 80052ee:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80052f0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80052f2:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 80052f6:	332a      	adds	r3, #42	; 0x2a
 80052f8:	b21b      	sxth	r3, r3
}
 80052fa:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 80052fc:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80052fe:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8005302:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8005304:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005306:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 800530a:	3b15      	subs	r3, #21
 800530c:	b21b      	sxth	r3, r3
}
 800530e:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8005310:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005312:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 8005316:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8005318:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800531a:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800531e:	3315      	adds	r3, #21
 8005320:	b21b      	sxth	r3, r3
}
 8005322:	bc30      	pop	{r4, r5}
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8005324:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8005326:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
}
 800532a:	4770      	bx	lr
      pHandle->SensorIsReliable = false;
 800532c:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800532e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 8005332:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 8005336:	e7c3      	b.n	80052c0 <HALL_Clear+0xdc>

08005338 <HALL_CalcElAngle>:
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8005338:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 800533c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005340:	429a      	cmp	r2, r3
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005342:	8883      	ldrh	r3, [r0, #4]
  if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8005344:	d00f      	beq.n	8005366 <HALL_CalcElAngle+0x2e>
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005346:	f8b0 c0aa 	ldrh.w	ip, [r0, #170]	; 0xaa
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 800534a:	f8a0 20a0 	strh.w	r2, [r0, #160]	; 0xa0
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 800534e:	b291      	uxth	r1, r2
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005350:	440b      	add	r3, r1
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005352:	4461      	add	r1, ip
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8005354:	f8b0 c0ac 	ldrh.w	ip, [r0, #172]	; 0xac
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8005358:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800535c:	4463      	add	r3, ip
 800535e:	b21b      	sxth	r3, r3
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8005360:	8083      	strh	r3, [r0, #4]
}
 8005362:	4618      	mov	r0, r3
 8005364:	4770      	bx	lr
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8005366:	f8b0 20a0 	ldrh.w	r2, [r0, #160]	; 0xa0
 800536a:	4413      	add	r3, r2
 800536c:	b21b      	sxth	r3, r3
 800536e:	8083      	strh	r3, [r0, #4]
}
 8005370:	4618      	mov	r0, r3
 8005372:	4770      	bx	lr

08005374 <HALL_CalcAvrgMecSpeedUnit>:
{
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	4604      	mov	r4, r0
  if ( pHandle->SensorIsReliable )
 8005378:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
{
 800537c:	460d      	mov	r5, r1
  if ( pHandle->SensorIsReliable )
 800537e:	b180      	cbz	r0, 80053a2 <HALL_CalcAvrgMecSpeedUnit+0x2e>
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005380:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 8005382:	f8b4 20ae 	ldrh.w	r2, [r4, #174]	; 0xae
  return (uint32_t)(READ_REG(TIMx->PSC));
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	429a      	cmp	r2, r3
 800538a:	d811      	bhi.n	80053b0 <HALL_CalcAvrgMecSpeedUnit+0x3c>
      pHandle->_Super.hElSpeedDpp = 0;
 800538c:	2300      	movs	r3, #0
 800538e:	81e3      	strh	r3, [r4, #14]
      *hMecSpeedUnit = 0;
 8005390:	800b      	strh	r3, [r1, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 8005392:	4629      	mov	r1, r5
 8005394:	4620      	mov	r0, r4
 8005396:	f001 fadf 	bl	8006958 <SPD_IsMecSpeedReliable>
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800539a:	f9b5 3000 	ldrsh.w	r3, [r5]
 800539e:	81a3      	strh	r3, [r4, #12]
}
 80053a0:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80053a2:	78e3      	ldrb	r3, [r4, #3]
 80053a4:	7023      	strb	r3, [r4, #0]
    *hMecSpeedUnit = 0;
 80053a6:	4603      	mov	r3, r0
    pHandle->_Super.hElSpeedDpp = 0;
 80053a8:	81e0      	strh	r0, [r4, #14]
    *hMecSpeedUnit = 0;
 80053aa:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80053ac:	81a3      	strh	r3, [r4, #12]
}
 80053ae:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 80053b0:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 80053b4:	81e3      	strh	r3, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 80053b6:	b31b      	cbz	r3, 8005400 <HALL_CalcAvrgMecSpeedUnit+0x8c>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 80053b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80053bc:	4293      	cmp	r3, r2
 80053be:	d01d      	beq.n	80053fc <HALL_CalcAvrgMecSpeedUnit+0x88>
          if (pHandle->HallMtpa == true)
 80053c0:	f894 20c7 	ldrb.w	r2, [r4, #199]	; 0xc7
 80053c4:	b9f2      	cbnz	r2, 8005404 <HALL_CalcAvrgMecSpeedUnit+0x90>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80053c6:	88a2      	ldrh	r2, [r4, #4]
 80053c8:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
 80053cc:	1a89      	subs	r1, r1, r2
 80053ce:	b209      	sxth	r1, r1
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 80053d0:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80053d4:	f8a4 10a8 	strh.w	r1, [r4, #168]	; 0xa8
            pHandle->CompSpeed = ( int16_t )
 80053d8:	fb91 f1f2 	sdiv	r1, r1, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80053dc:	8b62      	ldrh	r2, [r4, #26]
 80053de:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80053e6:	69e1      	ldr	r1, [r4, #28]
 80053e8:	7862      	ldrb	r2, [r4, #1]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80053ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80053ee:	005b      	lsls	r3, r3, #1
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80053f0:	fb01 f202 	mul.w	r2, r1, r2
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80053f4:	fb93 f3f2 	sdiv	r3, r3, r2
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 80053f8:	802b      	strh	r3, [r5, #0]
 80053fa:	e7ca      	b.n	8005392 <HALL_CalcAvrgMecSpeedUnit+0x1e>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 80053fc:	f8b4 30b0 	ldrh.w	r3, [r4, #176]	; 0xb0
 8005400:	802b      	strh	r3, [r5, #0]
 8005402:	e7c6      	b.n	8005392 <HALL_CalcAvrgMecSpeedUnit+0x1e>
            pHandle->CompSpeed = 0;
 8005404:	2100      	movs	r1, #0
 8005406:	e7e9      	b.n	80053dc <HALL_CalcAvrgMecSpeedUnit+0x68>

08005408 <HALL_TIMx_CC_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8005408:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 800540c:	2b00      	cmp	r3, #0
 800540e:	d047      	beq.n	80054a0 <HALL_TIMx_CC_IRQHandler+0x98>
{
 8005410:	b570      	push	{r4, r5, r6, lr}
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8005412:	f890 3020 	ldrb.w	r3, [r0, #32]
    bPrevHallState = pHandle->HallState;
 8005416:	f890 c0a6 	ldrb.w	ip, [r0, #166]	; 0xa6
    PrevDirection = pHandle->Direction;
 800541a:	f990 10a2 	ldrsb.w	r1, [r0, #162]	; 0xa2
    if ( pHandle->SensorPlacement == DEGREES_120 )
 800541e:	b333      	cbz	r3, 800546e <HALL_TIMx_CC_IRQHandler+0x66>
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8005420:	e9d0 340e 	ldrd	r3, r4, [r0, #56]	; 0x38
 8005424:	691d      	ldr	r5, [r3, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 8005426:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005428:	691a      	ldr	r2, [r3, #16]
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 800542a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800542c:	691e      	ldr	r6, [r3, #16]
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 800542e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005430:	4393      	bics	r3, r2
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8005432:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005434:	bf0c      	ite	eq
 8005436:	2201      	moveq	r2, #1
 8005438:	2200      	movne	r2, #0
 800543a:	43b3      	bics	r3, r6
 800543c:	bf0c      	ite	eq
 800543e:	2301      	moveq	r3, #1
 8005440:	2300      	movne	r3, #0
 8005442:	43ac      	bics	r4, r5
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8005444:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8005448:	bf0c      	ite	eq
 800544a:	2201      	moveq	r2, #1
 800544c:	2200      	movne	r2, #0
 800544e:	0092      	lsls	r2, r2, #2
 8005450:	f082 0204 	eor.w	r2, r2, #4
 8005454:	4313      	orrs	r3, r2
 8005456:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
    switch ( pHandle->HallState )
 800545a:	3b01      	subs	r3, #1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 800545c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    switch ( pHandle->HallState )
 800545e:	2b05      	cmp	r3, #5
 8005460:	f200 8174 	bhi.w	800574c <HALL_TIMx_CC_IRQHandler+0x344>
 8005464:	e8df f003 	tbb	[pc, r3]
 8005468:	4d5c6e80 	.word	0x4d5c6e80
 800546c:	1e3b      	.short	0x1e3b
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 800546e:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
 8005472:	6912      	ldr	r2, [r2, #16]
 8005474:	4393      	bics	r3, r2
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8005476:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005478:	691c      	ldr	r4, [r3, #16]
 800547a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800547c:	bf0c      	ite	eq
 800547e:	2201      	moveq	r2, #1
 8005480:	2200      	movne	r2, #0
 8005482:	43a3      	bics	r3, r4
 8005484:	bf0c      	ite	eq
 8005486:	2301      	moveq	r3, #1
 8005488:	2300      	movne	r3, #0
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8005490:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005492:	6914      	ldr	r4, [r2, #16]
 8005494:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005496:	43a2      	bics	r2, r4
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8005498:	bf08      	it	eq
 800549a:	f043 0301 	orreq.w	r3, r3, #1
 800549e:	e7da      	b.n	8005456 <HALL_TIMx_CC_IRQHandler+0x4e>
}
 80054a0:	2000      	movs	r0, #0
 80054a2:	4770      	bx	lr
        if ( bPrevHallState == STATE_2 )
 80054a4:	f1bc 0f02 	cmp.w	ip, #2
 80054a8:	f000 808b 	beq.w	80055c2 <HALL_TIMx_CC_IRQHandler+0x1ba>
        else if ( bPrevHallState == STATE_4 )
 80054ac:	f1bc 0f04 	cmp.w	ip, #4
 80054b0:	f000 80ac 	beq.w	800560c <HALL_TIMx_CC_IRQHandler+0x204>
    PrevDirection = pHandle->Direction;
 80054b4:	460b      	mov	r3, r1
    if (pHandle->HallMtpa == true)
 80054b6:	f890 20c7 	ldrb.w	r2, [r0, #199]	; 0xc7
 80054ba:	b112      	cbz	r2, 80054c2 <HALL_TIMx_CC_IRQHandler+0xba>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 80054bc:	f8b0 20aa 	ldrh.w	r2, [r0, #170]	; 0xaa
 80054c0:	8082      	strh	r2, [r0, #4]
    if ( pHandle->FirstCapt == 0u )
 80054c2:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
 80054c6:	2a00      	cmp	r2, #0
 80054c8:	f040 80ac 	bne.w	8005624 <HALL_TIMx_CC_IRQHandler+0x21c>
      pHandle->FirstCapt++;
 80054cc:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 80054d0:	3301      	adds	r3, #1
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
  return (uint32_t)(READ_REG(TIMx->CCR1));
 80054d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 80054da:	2000      	movs	r0, #0
 80054dc:	bd70      	pop	{r4, r5, r6, pc}
        if ( bPrevHallState == STATE_4 )
 80054de:	f1bc 0f04 	cmp.w	ip, #4
 80054e2:	d078      	beq.n	80055d6 <HALL_TIMx_CC_IRQHandler+0x1ce>
        else if ( bPrevHallState == STATE_1 )
 80054e4:	f1bc 0f01 	cmp.w	ip, #1
 80054e8:	d1e4      	bne.n	80054b4 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 80054ea:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80054ec:	f503 532a 	add.w	r3, r3, #10880	; 0x2a80
 80054f0:	332a      	adds	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 80054f2:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 80054f4:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 80054f8:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT );
 80054fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005500:	e04d      	b.n	800559e <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_6 )
 8005502:	f1bc 0f06 	cmp.w	ip, #6
 8005506:	d077      	beq.n	80055f8 <HALL_TIMx_CC_IRQHandler+0x1f0>
        else if ( bPrevHallState == STATE_5 )
 8005508:	f1bc 0f05 	cmp.w	ip, #5
 800550c:	d1d2      	bne.n	80054b4 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 800550e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005510:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8005514:	22ff      	movs	r2, #255	; 0xff
 8005516:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift );
 800551a:	f04f 33ff 	mov.w	r3, #4294967295
 800551e:	e03e      	b.n	800559e <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_1 )
 8005520:	f1bc 0f01 	cmp.w	ip, #1
 8005524:	d05e      	beq.n	80055e4 <HALL_TIMx_CC_IRQHandler+0x1dc>
        else if ( bPrevHallState == STATE_2 )
 8005526:	f1bc 0f02 	cmp.w	ip, #2
 800552a:	d1c3      	bne.n	80054b4 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 800552c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800552e:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8005532:	337f      	adds	r3, #127	; 0x7f
          pHandle->Direction = NEGATIVE;
 8005534:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005536:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 800553a:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 800553e:	f04f 33ff 	mov.w	r3, #4294967295
 8005542:	e02c      	b.n	800559e <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_3 )
 8005544:	f1bc 0f03 	cmp.w	ip, #3
 8005548:	d031      	beq.n	80055ae <HALL_TIMx_CC_IRQHandler+0x1a6>
        else if ( bPrevHallState == STATE_6 )
 800554a:	f1bc 0f06 	cmp.w	ip, #6
 800554e:	d1b1      	bne.n	80054b4 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005550:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005552:	f5a3 43aa 	sub.w	r3, r3, #21760	; 0x5500
 8005556:	3b55      	subs	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 8005558:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 800555a:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 800555e:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 8005562:	f04f 33ff 	mov.w	r3, #4294967295
 8005566:	e01a      	b.n	800559e <HALL_TIMx_CC_IRQHandler+0x196>
        if ( bPrevHallState == STATE_5 )
 8005568:	f1bc 0f05 	cmp.w	ip, #5
 800556c:	d00e      	beq.n	800558c <HALL_TIMx_CC_IRQHandler+0x184>
        else if ( bPrevHallState == STATE_3 )
 800556e:	f1bc 0f03 	cmp.w	ip, #3
 8005572:	d19f      	bne.n	80054b4 <HALL_TIMx_CC_IRQHandler+0xac>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8005574:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005576:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 800557a:	3355      	adds	r3, #85	; 0x55
          pHandle->Direction = NEGATIVE;
 800557c:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 800557e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 8005582:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 8005586:	f04f 33ff 	mov.w	r3, #4294967295
 800558a:	e008      	b.n	800559e <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 800558c:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 800558e:	f502 522a 	add.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 8005592:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 8005594:	322a      	adds	r2, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 8005596:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift + S16_60_PHASE_SHIFT;
 800559a:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
    if (pHandle->Direction != PrevDirection)
 800559e:	4299      	cmp	r1, r3
 80055a0:	d089      	beq.n	80054b6 <HALL_TIMx_CC_IRQHandler+0xae>
      pHandle->BufferFilled = 0 ;
 80055a2:	2200      	movs	r2, #0
 80055a4:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 80055a8:	f880 2098 	strb.w	r2, [r0, #152]	; 0x98
 80055ac:	e783      	b.n	80054b6 <HALL_TIMx_CC_IRQHandler+0xae>
                                                  + S16_60_PHASE_SHIFT );
 80055ae:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80055b0:	f502 42ff 	add.w	r2, r2, #32640	; 0x7f80
          pHandle->Direction = POSITIVE;
 80055b4:	2301      	movs	r3, #1
                                                  + S16_60_PHASE_SHIFT );
 80055b6:	327f      	adds	r2, #127	; 0x7f
          pHandle->Direction = POSITIVE;
 80055b8:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT
 80055bc:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 80055c0:	e7ed      	b.n	800559e <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80055c2:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80055c4:	f5a2 42aa 	sub.w	r2, r2, #21760	; 0x5500
          pHandle->Direction = POSITIVE;
 80055c8:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80055ca:	3a55      	subs	r2, #85	; 0x55
          pHandle->Direction = POSITIVE;
 80055cc:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT );
 80055d0:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 80055d4:	e7e3      	b.n	800559e <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80055d6:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80055d8:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
          pHandle->Direction = POSITIVE;
 80055dc:	2301      	movs	r3, #1
 80055de:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = pHandle->PhaseShift;
 80055e2:	e7dc      	b.n	800559e <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80055e4:	8c43      	ldrh	r3, [r0, #34]	; 0x22
          pHandle->Direction = POSITIVE;
 80055e6:	f880 c0a2 	strb.w	ip, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT );
 80055ea:	f503 43aa 	add.w	r3, r3, #21760	; 0x5500
 80055ee:	3355      	adds	r3, #85	; 0x55
 80055f0:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
 80055f4:	4663      	mov	r3, ip
 80055f6:	e7d2      	b.n	800559e <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 80055f8:	8c42      	ldrh	r2, [r0, #34]	; 0x22
 80055fa:	f5a2 522a 	sub.w	r2, r2, #10880	; 0x2a80
          pHandle->Direction = POSITIVE;
 80055fe:	2301      	movs	r3, #1
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005600:	3a2a      	subs	r2, #42	; 0x2a
          pHandle->Direction = POSITIVE;
 8005602:	f880 30a2 	strb.w	r3, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005606:	f8a0 20aa 	strh.w	r2, [r0, #170]	; 0xaa
 800560a:	e7c8      	b.n	800559e <HALL_TIMx_CC_IRQHandler+0x196>
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 800560c:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 800560e:	f5a3 532a 	sub.w	r3, r3, #10880	; 0x2a80
 8005612:	3b2a      	subs	r3, #42	; 0x2a
          pHandle->Direction = NEGATIVE;
 8005614:	22ff      	movs	r2, #255	; 0xff
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 8005616:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
          pHandle->Direction = NEGATIVE;
 800561a:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
          pHandle->MeasuredElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT );
 800561e:	f04f 33ff 	mov.w	r3, #4294967295
 8005622:	e7bc      	b.n	800559e <HALL_TIMx_CC_IRQHandler+0x196>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8005624:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 8005628:	f890 c026 	ldrb.w	ip, [r0, #38]	; 0x26
 800562c:	4562      	cmp	r2, ip
 800562e:	d205      	bcs.n	800563c <HALL_TIMx_CC_IRQHandler+0x234>
        pHandle->BufferFilled++;
 8005630:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
 8005634:	3201      	adds	r2, #1
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	f880 204d 	strb.w	r2, [r0, #77]	; 0x4d
 800563c:	6b66      	ldr	r6, [r4, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 800563e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8005640:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
      if ( pHandle->OVFCounter != 0u )
 8005644:	f890 504e 	ldrb.w	r5, [r0, #78]	; 0x4e
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8005648:	0412      	lsls	r2, r2, #16
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 800564a:	b289      	uxth	r1, r1
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 800564c:	fa12 f286 	uxtah	r2, r2, r6
      if ( pHandle->OVFCounter != 0u )
 8005650:	f005 0eff 	and.w	lr, r5, #255	; 0xff
 8005654:	2d00      	cmp	r5, #0
 8005656:	d043      	beq.n	80056e0 <HALL_TIMx_CC_IRQHandler+0x2d8>
        hAux = hPrscBuf + 1u;
 8005658:	3101      	adds	r1, #1
        wCaptBuf *= hAux;
 800565a:	b289      	uxth	r1, r1
 800565c:	fb01 f202 	mul.w	r2, r1, r2
        if ( pHandle->RatioInc )
 8005660:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 8005664:	2900      	cmp	r1, #0
 8005666:	d045      	beq.n	80056f4 <HALL_TIMx_CC_IRQHandler+0x2ec>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 8005668:	2100      	movs	r1, #0
 800566a:	f880 104b 	strb.w	r1, [r0, #75]	; 0x4b
        if ( wCaptBuf < pHandle->MinPeriod )
 800566e:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
 8005672:	4291      	cmp	r1, r2
 8005674:	d82f      	bhi.n	80056d6 <HALL_TIMx_CC_IRQHandler+0x2ce>
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8005676:	f890 1098 	ldrb.w	r1, [r0, #152]	; 0x98
          if ( wCaptBuf >= pHandle->MaxPeriod )
 800567a:	f8d0 50b8 	ldr.w	r5, [r0, #184]	; 0xb8
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800567e:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 8005682:	eb00 0e81 	add.w	lr, r0, r1, lsl #2
          if ( wCaptBuf >= pHandle->MaxPeriod )
 8005686:	4295      	cmp	r5, r2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8005688:	f8de 6050 	ldr.w	r6, [lr, #80]	; 0x50
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 800568c:	bf88      	it	hi
 800568e:	fb03 f502 	mulhi.w	r5, r3, r2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 8005692:	eba4 0406 	sub.w	r4, r4, r6
          pHandle->SpeedFIFOIdx++;
 8005696:	f101 0101 	add.w	r1, r1, #1
 800569a:	b2c9      	uxtb	r1, r1
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 800569c:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 80056a0:	bf8a      	itet	hi
 80056a2:	1964      	addhi	r4, r4, r5
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 80056a4:	435d      	mulls	r5, r3
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 80056a6:	f8c0 409c 	strhi.w	r4, [r0, #156]	; 0x9c
          if ( pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize )
 80056aa:	458c      	cmp	ip, r1
 80056ac:	f8ce 5050 	str.w	r5, [lr, #80]	; 0x50
            pHandle->SpeedFIFOIdx = 0u;
 80056b0:	bf08      	it	eq
 80056b2:	2100      	moveq	r1, #0
 80056b4:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
          if ( pHandle->SensorIsReliable) 
 80056b8:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
 80056bc:	b331      	cbz	r1, 800570c <HALL_TIMx_CC_IRQHandler+0x304>
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 80056be:	f890 104d 	ldrb.w	r1, [r0, #77]	; 0x4d
 80056c2:	458c      	cmp	ip, r1
 80056c4:	d937      	bls.n	8005736 <HALL_TIMx_CC_IRQHandler+0x32e>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 80056c6:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
 80056ca:	fbb1 f2f2 	udiv	r2, r1, r2
 80056ce:	fb12 f303 	smulbb	r3, r2, r3
 80056d2:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
      pHandle->OVFCounter = 0u;
 80056d6:	2300      	movs	r3, #0
 80056d8:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
}
 80056dc:	2000      	movs	r0, #0
 80056de:	bd70      	pop	{r4, r5, r6, pc}
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 80056e0:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
 80056e4:	b1ad      	cbz	r5, 8005712 <HALL_TIMx_CC_IRQHandler+0x30a>
          hAux = hPrscBuf + 2u;
 80056e6:	3102      	adds	r1, #2
          wCaptBuf *= hAux;
 80056e8:	b289      	uxth	r1, r1
          pHandle->RatioDec = false;
 80056ea:	f880 e04a 	strb.w	lr, [r0, #74]	; 0x4a
          wCaptBuf *= hAux;
 80056ee:	fb01 f202 	mul.w	r2, r1, r2
          pHandle->RatioDec = false;
 80056f2:	e7bc      	b.n	800566e <HALL_TIMx_CC_IRQHandler+0x266>
 80056f4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 80056f6:	f8b0 50ae 	ldrh.w	r5, [r0, #174]	; 0xae
 80056fa:	428d      	cmp	r5, r1
 80056fc:	d9b7      	bls.n	800566e <HALL_TIMx_CC_IRQHandler+0x266>
 80056fe:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 8005700:	3101      	adds	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 8005702:	62a1      	str	r1, [r4, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8005704:	2101      	movs	r1, #1
 8005706:	f880 104b 	strb.w	r1, [r0, #75]	; 0x4b
 800570a:	e7b0      	b.n	800566e <HALL_TIMx_CC_IRQHandler+0x266>
            pHandle->AvrElSpeedDpp = 0;
 800570c:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8005710:	e7e1      	b.n	80056d6 <HALL_TIMx_CC_IRQHandler+0x2ce>
          uint16_t hAux = hPrscBuf + 1u;
 8005712:	3101      	adds	r1, #1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8005714:	b2b6      	uxth	r6, r6
          wCaptBuf *= hAux;
 8005716:	b289      	uxth	r1, r1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8005718:	f5b6 4faa 	cmp.w	r6, #21760	; 0x5500
          wCaptBuf *= hAux;
 800571c:	fb01 f202 	mul.w	r2, r1, r2
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8005720:	d2a5      	bcs.n	800566e <HALL_TIMx_CC_IRQHandler+0x266>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8005722:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 8005724:	2900      	cmp	r1, #0
 8005726:	d0a2      	beq.n	800566e <HALL_TIMx_CC_IRQHandler+0x266>
 8005728:	6aa1      	ldr	r1, [r4, #40]	; 0x28
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 800572a:	3901      	subs	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 800572c:	62a1      	str	r1, [r4, #40]	; 0x28
              pHandle->RatioDec = true;
 800572e:	2101      	movs	r1, #1
 8005730:	f880 104a 	strb.w	r1, [r0, #74]	; 0x4a
 8005734:	e79b      	b.n	800566e <HALL_TIMx_CC_IRQHandler+0x266>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 8005736:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 800573a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
 800573e:	fb92 fcfc 	sdiv	ip, r2, ip
 8005742:	fb93 f3fc 	sdiv	r3, r3, ip
 8005746:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 800574a:	e7c4      	b.n	80056d6 <HALL_TIMx_CC_IRQHandler+0x2ce>
        pHandle->SensorIsReliable = false;
 800574c:	2300      	movs	r3, #0
 800574e:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
        break;
 8005752:	e6af      	b.n	80054b4 <HALL_TIMx_CC_IRQHandler+0xac>

08005754 <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 8005754:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8005758:	b1e3      	cbz	r3, 8005794 <HALL_TIMx_UP_IRQHandler+0x40>
{
 800575a:	b430      	push	{r4, r5}
    pHandle->OVFCounter++;
 800575c:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8005760:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    pHandle->OVFCounter++;
 8005762:	3301      	adds	r3, #1
 8005764:	b2db      	uxtb	r3, r3
 8005766:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
  return (uint32_t)(READ_REG(TIMx->PSC));
 800576a:	6a94      	ldr	r4, [r2, #40]	; 0x28
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 800576c:	f8b0 30c0 	ldrh.w	r3, [r0, #192]	; 0xc0
 8005770:	f8b0 20c2 	ldrh.w	r2, [r0, #194]	; 0xc2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8005774:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 8005778:	fb02 f303 	mul.w	r3, r2, r3
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 800577c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005780:	fb04 2202 	mla	r2, r4, r2, r2
 8005784:	fbb3 f3f2 	udiv	r3, r3, r2
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 8005788:	b29b      	uxth	r3, r3
 800578a:	4299      	cmp	r1, r3
 800578c:	d204      	bcs.n	8005798 <HALL_TIMx_UP_IRQHandler+0x44>
}
 800578e:	2000      	movs	r0, #0
 8005790:	bc30      	pop	{r4, r5}
 8005792:	4770      	bx	lr
 8005794:	2000      	movs	r0, #0
 8005796:	4770      	bx	lr
  if ( pHandle->SensorPlacement == DEGREES_120 )
 8005798:	f890 3020 	ldrb.w	r3, [r0, #32]
      pHandle->_Super.hElSpeedDpp = 0;
 800579c:	2200      	movs	r2, #0
 800579e:	81c2      	strh	r2, [r0, #14]
  if ( pHandle->SensorPlacement == DEGREES_120 )
 80057a0:	bb0b      	cbnz	r3, 80057e6 <HALL_TIMx_UP_IRQHandler+0x92>
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80057a2:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80057a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80057a6:	6911      	ldr	r1, [r2, #16]
    pHandle->HallState  = LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2
 80057a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80057aa:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80057ac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80057ae:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80057b0:	e9d0 120c 	ldrd	r1, r2, [r0, #48]	; 0x30
 80057b4:	bf0c      	ite	eq
 80057b6:	2401      	moveq	r4, #1
 80057b8:	2400      	movne	r4, #0
 80057ba:	43ab      	bics	r3, r5
 80057bc:	bf0c      	ite	eq
 80057be:	2301      	moveq	r3, #1
 80057c0:	2300      	movne	r3, #0
 80057c2:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 80057ca:	438a      	bics	r2, r1
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80057cc:	bf08      	it	eq
 80057ce:	f043 0301 	orreq.w	r3, r3, #1
  switch ( pHandle->HallState )
 80057d2:	1e5a      	subs	r2, r3, #1
 80057d4:	f880 30a6 	strb.w	r3, [r0, #166]	; 0xa6
 80057d8:	2a05      	cmp	r2, #5
 80057da:	d86f      	bhi.n	80058bc <HALL_TIMx_UP_IRQHandler+0x168>
 80057dc:	e8df f002 	tbb	[pc, r2]
 80057e0:	52596067 	.word	0x52596067
 80057e4:	1f4b      	.short	0x1f4b
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80057e6:	6b82      	ldr	r2, [r0, #56]	; 0x38
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 80057e8:	6c01      	ldr	r1, [r0, #64]	; 0x40
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80057ea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80057ec:	6914      	ldr	r4, [r2, #16]
 80057ee:	6909      	ldr	r1, [r1, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1
 80057f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80057f2:	691d      	ldr	r5, [r3, #16]
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 80057f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80057f6:	438a      	bics	r2, r1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 80057f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80057fa:	bf0c      	ite	eq
 80057fc:	2101      	moveq	r1, #1
 80057fe:	2100      	movne	r1, #0
 8005800:	43ab      	bics	r3, r5
 8005802:	bf0c      	ite	eq
 8005804:	2301      	moveq	r3, #1
 8005806:	2300      	movne	r3, #0
 8005808:	43a2      	bics	r2, r4
 800580a:	bf0c      	ite	eq
 800580c:	2201      	moveq	r2, #1
 800580e:	2200      	movne	r2, #0
 8005810:	0092      	lsls	r2, r2, #2
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 8005812:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    pHandle->HallState  = ( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2
 8005816:	f082 0204 	eor.w	r2, r2, #4
                          | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin );
 800581a:	4313      	orrs	r3, r2
 800581c:	e7d9      	b.n	80057d2 <HALL_TIMx_UP_IRQHandler+0x7e>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT -
 800581e:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005820:	f5a3 537f 	sub.w	r3, r3, #16320	; 0x3fc0
 8005824:	3b3f      	subs	r3, #63	; 0x3f
 8005826:	b21b      	sxth	r3, r3
 8005828:	8083      	strh	r3, [r0, #4]
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 800582a:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 800582e:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
      pHandle->OVFCounter = 0u;
 8005832:	2200      	movs	r2, #0
 8005834:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
      pHandle->FirstCapt = 0u;
 8005838:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 800583c:	b17c      	cbz	r4, 800585e <HALL_TIMx_UP_IRQHandler+0x10a>
 800583e:	1e62      	subs	r2, r4, #1
 8005840:	b2d3      	uxtb	r3, r2
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8005842:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
 8005846:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800584a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800584e:	f100 034c 	add.w	r3, r0, #76	; 0x4c
 8005852:	f843 1f04 	str.w	r1, [r3, #4]!
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8005856:	429a      	cmp	r2, r3
 8005858:	d1fb      	bne.n	8005852 <HALL_TIMx_UP_IRQHandler+0xfe>
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 800585a:	fb01 f404 	mul.w	r4, r1, r4
      pHandle->BufferFilled = 0 ;
 800585e:	2300      	movs	r3, #0
 8005860:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
      pHandle->SpeedFIFOIdx = 0;
 8005864:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 8005868:	f8c0 409c 	str.w	r4, [r0, #156]	; 0x9c
      pHandle->AvrElSpeedDpp = 0;
 800586c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
}
 8005870:	bc30      	pop	{r4, r5}
 8005872:	2000      	movs	r0, #0
 8005874:	4770      	bx	lr
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT / 2 );
 8005876:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005878:	f503 53aa 	add.w	r3, r3, #5440	; 0x1540
 800587c:	3315      	adds	r3, #21
 800587e:	b21b      	sxth	r3, r3
 8005880:	8083      	strh	r3, [r0, #4]
      break;
 8005882:	e7d2      	b.n	800582a <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_60_PHASE_SHIFT / 2 );
 8005884:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005886:	f5a3 53aa 	sub.w	r3, r3, #5440	; 0x1540
 800588a:	3b15      	subs	r3, #21
 800588c:	b21b      	sxth	r3, r3
 800588e:	8083      	strh	r3, [r0, #4]
      break;
 8005890:	e7cb      	b.n	800582a <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_120_PHASE_SHIFT +
 8005892:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 8005894:	f503 43d5 	add.w	r3, r3, #27264	; 0x6a80
 8005898:	332a      	adds	r3, #42	; 0x2a
 800589a:	b21b      	sxth	r3, r3
 800589c:	8083      	strh	r3, [r0, #4]
      break;
 800589e:	e7c4      	b.n	800582a <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift - S16_120_PHASE_SHIFT -
 80058a0:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80058a2:	f5a3 43d5 	sub.w	r3, r3, #27264	; 0x6a80
 80058a6:	3b2a      	subs	r3, #42	; 0x2a
 80058a8:	b21b      	sxth	r3, r3
 80058aa:	8083      	strh	r3, [r0, #4]
      break;
 80058ac:	e7bd      	b.n	800582a <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->_Super.hElAngle = ( int16_t )( pHandle->PhaseShift + S16_60_PHASE_SHIFT +
 80058ae:	8c43      	ldrh	r3, [r0, #34]	; 0x22
 80058b0:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80058b4:	333f      	adds	r3, #63	; 0x3f
 80058b6:	b21b      	sxth	r3, r3
 80058b8:	8083      	strh	r3, [r0, #4]
      break;
 80058ba:	e7b6      	b.n	800582a <HALL_TIMx_UP_IRQHandler+0xd6>
      pHandle->SensorIsReliable = false;
 80058bc:	2200      	movs	r2, #0
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80058be:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
      pHandle->SensorIsReliable = false;
 80058c2:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
      break;
 80058c6:	e7b0      	b.n	800582a <HALL_TIMx_UP_IRQHandler+0xd6>

080058c8 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 80058c8:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 80058ca:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 80058ce:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 80058d0:	2100      	movs	r1, #0
 80058d2:	f001 fb77 	bl	8006fc4 <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 80058d6:	2300      	movs	r3, #0
 80058d8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 80058dc:	bd10      	pop	{r4, pc}
 80058de:	bf00      	nop

080058e0 <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80058e0:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 80058e4:	1c53      	adds	r3, r2, #1
 80058e6:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 80058e8:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 80058ea:	bf88      	it	hi
 80058ec:	2300      	movhi	r3, #0
{
 80058ee:	b500      	push	{lr}
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80058f0:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 80058f4:	f100 0efe 	add.w	lr, r0, #254	; 0xfe
 80058f8:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 80058fc:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  int32_t wAux = 0;
 8005900:	2200      	movs	r2, #0
 8005902:	1e83      	subs	r3, r0, #2
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8005904:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8005908:	4573      	cmp	r3, lr
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 800590a:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800590c:	d1fa      	bne.n	8005904 <MPM_CalcElMotorPower+0x24>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 800590e:	2a00      	cmp	r2, #0
 8005910:	bfb8      	it	lt
 8005912:	327f      	addlt	r2, #127	; 0x7f
 8005914:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8005916:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 800591a:	4608      	mov	r0, r1
 800591c:	f85d fb04 	ldr.w	pc, [sp], #4

08005920 <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8005920:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop

08005928 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8005928:	8a03      	ldrh	r3, [r0, #16]
 800592a:	8b42      	ldrh	r2, [r0, #26]
 800592c:	429a      	cmp	r2, r3
 800592e:	d306      	bcc.n	800593e <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8005930:	8b82      	ldrh	r2, [r0, #28]
 8005932:	429a      	cmp	r2, r3
 8005934:	d901      	bls.n	800593a <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8005936:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8005938:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 800593a:	8ac0      	ldrh	r0, [r0, #22]
 800593c:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 800593e:	2008      	movs	r0, #8
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop

08005944 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8005944:	2300      	movs	r3, #0
 8005946:	8203      	strh	r3, [r0, #16]
}
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop

0800594c <NTC_Init>:
{
 800594c:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 800594e:	7803      	ldrb	r3, [r0, #0]
{
 8005950:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8005952:	b123      	cbz	r3, 800595e <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8005954:	8a43      	ldrh	r3, [r0, #18]
 8005956:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8005958:	2200      	movs	r2, #0
 800595a:	82c2      	strh	r2, [r0, #22]
}
 800595c:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 800595e:	3004      	adds	r0, #4
 8005960:	f7fc fb36 	bl	8001fd0 <RCM_RegisterRegConv>
 8005964:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8005968:	4620      	mov	r0, r4
 800596a:	f7ff ffeb 	bl	8005944 <NTC_Clear>
}
 800596e:	bd10      	pop	{r4, pc}

08005970 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8005970:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8005972:	7803      	ldrb	r3, [r0, #0]
{
 8005974:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8005976:	b113      	cbz	r3, 800597e <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8005978:	2000      	movs	r0, #0
 800597a:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 800597c:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800597e:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8005982:	f7fc fc01 	bl	8002188 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8005986:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800598a:	4298      	cmp	r0, r3
 800598c:	d007      	beq.n	800599e <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 800598e:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8005990:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8005992:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 8005994:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8005998:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 800599c:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 800599e:	4620      	mov	r0, r4
 80059a0:	f7ff ffc2 	bl	8005928 <NTC_SetFaultState>
 80059a4:	82e0      	strh	r0, [r4, #22]
}
 80059a6:	bd10      	pop	{r4, pc}

080059a8 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80059a8:	7803      	ldrb	r3, [r0, #0]
 80059aa:	b983      	cbnz	r3, 80059ce <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 80059ac:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 80059ae:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 80059b0:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80059b4:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 80059b6:	1a52      	subs	r2, r2, r1
    wTemp *= pHandle->hSensitivity;
 80059b8:	fb02 f303 	mul.w	r3, r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80059bc:	2b00      	cmp	r3, #0
 80059be:	bfbc      	itt	lt
 80059c0:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 80059c4:	33ff      	addlt	r3, #255	; 0xff
 80059c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 80059ca:	b200      	sxth	r0, r0
 80059cc:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 80059ce:	8a80      	ldrh	r0, [r0, #20]
}
 80059d0:	b200      	sxth	r0, r0
 80059d2:	4770      	bx	lr

080059d4 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 80059d4:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 80059d6:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 80059d8:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 80059da:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 80059dc:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 80059de:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 80059e0:	6283      	str	r3, [r0, #40]	; 0x28
}
 80059e2:	4770      	bx	lr

080059e4 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 80059e4:	8081      	strh	r1, [r0, #4]
}
 80059e6:	4770      	bx	lr

080059e8 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 80059e8:	80c1      	strh	r1, [r0, #6]
}
 80059ea:	4770      	bx	lr

080059ec <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 80059ec:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80059f0:	4770      	bx	lr
 80059f2:	bf00      	nop

080059f4 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 80059f4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop

080059fc <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 80059fc:	6081      	str	r1, [r0, #8]

  return;
}
 80059fe:	4770      	bx	lr

08005a00 <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8005a00:	8b00      	ldrh	r0, [r0, #24]
 8005a02:	4770      	bx	lr

08005a04 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8005a04:	8b40      	ldrh	r0, [r0, #26]
 8005a06:	4770      	bx	lr

08005a08 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8005a08:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8005a0a:	4770      	bx	lr

08005a0c <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8005a0c:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop

08005a14 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005a14:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8005a18:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8005a1c:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
{
 8005a20:	b510      	push	{r4, lr}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005a22:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8005a26:	f9b0 e016 	ldrsh.w	lr, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8005a2a:	b162      	cbz	r2, 8005a46 <PI_Controller+0x32>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8005a2c:	fb01 f202 	mul.w	r2, r1, r2
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8005a30:	6881      	ldr	r1, [r0, #8]

    if ( wIntegral_sum_temp < 0 )
 8005a32:	188c      	adds	r4, r1, r2
 8005a34:	d420      	bmi.n	8005a78 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8005a36:	2900      	cmp	r1, #0
 8005a38:	db2a      	blt.n	8005a90 <PI_Controller+0x7c>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8005a3a:	68c2      	ldr	r2, [r0, #12]
 8005a3c:	42a2      	cmp	r2, r4
 8005a3e:	db02      	blt.n	8005a46 <PI_Controller+0x32>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8005a40:	6902      	ldr	r2, [r0, #16]
 8005a42:	42a2      	cmp	r2, r4
 8005a44:	dd22      	ble.n	8005a8c <PI_Controller+0x78>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8005a46:	8b81      	ldrh	r1, [r0, #28]
 8005a48:	410b      	asrs	r3, r1
 8005a4a:	8bc1      	ldrh	r1, [r0, #30]
 8005a4c:	fa42 f101 	asr.w	r1, r2, r1
 8005a50:	440b      	add	r3, r1
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8005a52:	459c      	cmp	ip, r3
 8005a54:	da05      	bge.n	8005a62 <PI_Controller+0x4e>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8005a56:	ebac 0303 	sub.w	r3, ip, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8005a5a:	441a      	add	r2, r3
 8005a5c:	6082      	str	r2, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8005a5e:	4660      	mov	r0, ip
 8005a60:	bd10      	pop	{r4, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 8005a62:	459e      	cmp	lr, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8005a64:	bfc9      	itett	gt
 8005a66:	ebae 0303 	subgt.w	r3, lr, r3
  return ( ( int16_t )( wOutput_32 ) );
 8005a6a:	fa0f fc83 	sxthle.w	ip, r3
  pHandle->wIntegralTerm += wDischarge;
 8005a6e:	18d2      	addgt	r2, r2, r3
 8005a70:	46f4      	movgt	ip, lr
 8005a72:	6082      	str	r2, [r0, #8]
}
 8005a74:	4660      	mov	r0, ip
 8005a76:	bd10      	pop	{r4, pc}
      if ( pHandle->wIntegralTerm > 0 )
 8005a78:	2900      	cmp	r1, #0
 8005a7a:	ddde      	ble.n	8005a3a <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 8005a7c:	2a00      	cmp	r2, #0
 8005a7e:	dddc      	ble.n	8005a3a <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8005a80:	68c2      	ldr	r2, [r0, #12]
 8005a82:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a86:	428a      	cmp	r2, r1
 8005a88:	d1dd      	bne.n	8005a46 <PI_Controller+0x32>
          wIntegral_sum_temp = INT32_MAX;
 8005a8a:	4614      	mov	r4, r2
 8005a8c:	4622      	mov	r2, r4
 8005a8e:	e7da      	b.n	8005a46 <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 8005a90:	4902      	ldr	r1, [pc, #8]	; (8005a9c <PI_Controller+0x88>)
 8005a92:	ea34 0422 	bics.w	r4, r4, r2, asr #32
 8005a96:	bf28      	it	cs
 8005a98:	460c      	movcs	r4, r1
 8005a9a:	e7ce      	b.n	8005a3a <PI_Controller+0x26>
 8005a9c:	80000001 	.word	0x80000001

08005aa0 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8005aa0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
{
 8005aa4:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8005aa6:	8b11      	ldrh	r1, [r2, #24]
 8005aa8:	89d4      	ldrh	r4, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8005aaa:	8993      	ldrh	r3, [r2, #12]
 8005aac:	8ad2      	ldrh	r2, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8005aae:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
{
 8005ab2:	4605      	mov	r5, r0
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8005ab4:	fb14 f401 	smulbb	r4, r4, r1
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8005ab8:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8005abc:	fb13 4402 	smlabb	r4, r3, r2, r4
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8005ac0:	f7ff faa2 	bl	8005008 <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8005ac4:	1e23      	subs	r3, r4, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005ac6:	490f      	ldr	r1, [pc, #60]	; (8005b04 <PQD_CalcElMotorPower+0x64>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8005ac8:	fb06 f000 	mul.w	r0, r6, r0
  wAux /= 65536;
 8005acc:	bfb8      	it	lt
 8005ace:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005ad2:	ea4f 72e0 	mov.w	r2, r0, asr #31
  wAux /= 65536;
 8005ad6:	bfb8      	it	lt
 8005ad8:	33ff      	addlt	r3, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005ada:	fb81 1000 	smull	r1, r0, r1, r0
 8005ade:	ebc2 10a0 	rsb	r0, r2, r0, asr #6
  wAux /= 65536;
 8005ae2:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 8005ae4:	fb00 f303 	mul.w	r3, r0, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8005ae8:	4907      	ldr	r1, [pc, #28]	; (8005b08 <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8005aea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005aee:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8005af0:	fb81 2103 	smull	r2, r1, r1, r3
 8005af4:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8005af6:	4628      	mov	r0, r5
 8005af8:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8005afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8005b00:	f7ff beee 	b.w	80058e0 <MPM_CalcElMotorPower>
 8005b04:	1b4e81b5 	.word	0x1b4e81b5
 8005b08:	66666667 	.word	0x66666667

08005b0c <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8005b0c:	4b17      	ldr	r3, [pc, #92]	; (8005b6c <startTimers+0x60>)
 8005b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8005b10:	07d2      	lsls	r2, r2, #31
 8005b12:	d415      	bmi.n	8005b40 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 8005b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8005b1e:	b082      	sub	sp, #8
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005b20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005b24:	f002 0201 	and.w	r2, r2, #1
 8005b28:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8005b2a:	9a01      	ldr	r2, [sp, #4]
 8005b2c:	694a      	ldr	r2, [r1, #20]
 8005b2e:	f042 0201 	orr.w	r2, r2, #1
 8005b32:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8005b34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b36:	f022 0201 	bic.w	r2, r2, #1
 8005b3a:	641a      	str	r2, [r3, #64]	; 0x40
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8005b3c:	b002      	add	sp, #8
 8005b3e:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8005b40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b44:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005b46:	6859      	ldr	r1, [r3, #4]
 8005b48:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005b4c:	f041 0120 	orr.w	r1, r1, #32
 8005b50:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005b52:	6959      	ldr	r1, [r3, #20]
 8005b54:	f041 0101 	orr.w	r1, r1, #1
 8005b58:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005b5a:	6859      	ldr	r1, [r3, #4]
 8005b5c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005b60:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005b64:	430a      	orrs	r2, r1
 8005b66:	605a      	str	r2, [r3, #4]
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	40023800 	.word	0x40023800

08005b70 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8005b70:	b570      	push	{r4, r5, r6, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8005b72:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 8005b74:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 8005b78:	d11c      	bne.n	8005bb4 <waitForPolarizationEnd+0x44>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8005b7a:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8005b7c:	3201      	adds	r2, #1
 8005b7e:	0855      	lsrs	r5, r2, #1
 8005b80:	016d      	lsls	r5, r5, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005b82:	f06f 0602 	mvn.w	r6, #2
 8005b86:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8005b88:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8005b8a:	f893 c000 	ldrb.w	ip, [r3]
 8005b8e:	f1bc 0f0f 	cmp.w	ip, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8005b92:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8005b96:	d80c      	bhi.n	8005bb2 <waitForPolarizationEnd+0x42>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8005b98:	6904      	ldr	r4, [r0, #16]
 8005b9a:	07a4      	lsls	r4, r4, #30
 8005b9c:	d5f5      	bpl.n	8005b8a <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 8005b9e:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8005ba2:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005ba4:	6106      	str	r6, [r0, #16]
 8005ba6:	d8f0      	bhi.n	8005b8a <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 8005ba8:	781c      	ldrb	r4, [r3, #0]
 8005baa:	2c0f      	cmp	r4, #15
 8005bac:	d8ed      	bhi.n	8005b8a <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8005bb2:	bd70      	pop	{r4, r5, r6, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8005bb4:	2c60      	cmp	r4, #96	; 0x60
 8005bb6:	d1e1      	bne.n	8005b7c <waitForPolarizationEnd+0xc>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8005bb8:	3201      	adds	r2, #1
 8005bba:	0155      	lsls	r5, r2, #5
 8005bbc:	e7e1      	b.n	8005b82 <waitForPolarizationEnd+0x12>
 8005bbe:	bf00      	nop

08005bc0 <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8005bc0:	6843      	ldr	r3, [r0, #4]
 8005bc2:	4718      	bx	r3

08005bc4 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8005bc4:	b510      	push	{r4, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005bc6:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8005bca:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 8005bcc:	b082      	sub	sp, #8
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005bce:	ea4f 4c21 	mov.w	ip, r1, asr #16
{
 8005bd2:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005bd4:	fb04 fc0c 	mul.w	ip, r4, ip
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8005bd8:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005bda:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8005bde:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8005be2:	eb01 034c 	add.w	r3, r1, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005be6:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8005bea:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005bee:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8005bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8005bf6:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8005bfa:	ea4f 0e6e 	mov.w	lr, lr, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8005bfe:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8005c02:	db7d      	blt.n	8005d00 <PWMC_SetPhaseVoltage+0x13c>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8005c04:	f1b1 3fff 	cmp.w	r1, #4294967295
 8005c08:	db51      	blt.n	8005cae <PWMC_SetPhaseVoltage+0xea>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005c0a:	ebbe 0e02 	subs.w	lr, lr, r2
 8005c0e:	bf44      	itt	mi
 8005c10:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8005c14:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8005c18:	2900      	cmp	r1, #0
 8005c1a:	bfbc      	itt	lt
 8005c1c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8005c20:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	bfb8      	it	lt
 8005c28:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005c2c:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8005c30:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005c34:	bfb8      	it	lt
 8005c36:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8005c3a:	f04f 0c01 	mov.w	ip, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8005c3e:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005c42:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8005c46:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
 8005c4a:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8005c4c:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 8005c4e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8005c52:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8005c56:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8005c5a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8005c5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005c62:	b292      	uxth	r2, r2
 8005c64:	b289      	uxth	r1, r1
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8005c6a:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8005c6c:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8005c6e:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8005c70:	d118      	bne.n	8005ca4 <PWMC_SetPhaseVoltage+0xe0>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8005c72:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
 8005c76:	2c00      	cmp	r4, #0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8005c78:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8005c7c:	bfcc      	ite	gt
 8005c7e:	1912      	addgt	r2, r2, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8005c80:	1b12      	suble	r2, r2, r4
 8005c82:	b292      	uxth	r2, r2
 8005c84:	8642      	strh	r2, [r0, #50]	; 0x32
    }

    if ( pHandle->Ib > 0 )
 8005c86:	f9b0 204a 	ldrsh.w	r2, [r0, #74]	; 0x4a
 8005c8a:	2a00      	cmp	r2, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8005c8c:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
      pHandle->CntPhB += pHandle->DTCompCnt;
 8005c90:	bfcc      	ite	gt
 8005c92:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8005c94:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8005c96:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8005c98:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8005c9a:	bfcc      	ite	gt
 8005c9c:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8005c9e:	1b1b      	suble	r3, r3, r4
 8005ca0:	8681      	strh	r1, [r0, #52]	; 0x34
 8005ca2:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8005ca4:	6983      	ldr	r3, [r0, #24]
}
 8005ca6:	b002      	add	sp, #8
 8005ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8005cac:	4718      	bx	r3
      if ( wX <= 0 )
 8005cae:	f1bc 0f00 	cmp.w	ip, #0
 8005cb2:	dd4b      	ble.n	8005d4c <PWMC_SetPhaseVoltage+0x188>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005cb4:	ebbc 0e02 	subs.w	lr, ip, r2
 8005cb8:	bf44      	itt	mi
 8005cba:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8005cbe:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8005cc2:	2900      	cmp	r1, #0
 8005cc4:	bfb8      	it	lt
 8005cc6:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8005cca:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8005cce:	bfb8      	it	lt
 8005cd0:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8005cd4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005cd8:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 8005cda:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005cde:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005ce2:	bfb8      	it	lt
 8005ce4:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8005ce8:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005cec:	bfb8      	it	lt
 8005cee:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8005cf2:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 8005cf6:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8005cf8:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8005cfa:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8005cfe:	e7a8      	b.n	8005c52 <PWMC_SetPhaseVoltage+0x8e>
    if ( wZ < 0 )
 8005d00:	f1b1 3fff 	cmp.w	r1, #4294967295
 8005d04:	db6f      	blt.n	8005de6 <PWMC_SetPhaseVoltage+0x222>
      if ( wX <= 0 )
 8005d06:	f1bc 0f00 	cmp.w	ip, #0
 8005d0a:	dd46      	ble.n	8005d9a <PWMC_SetPhaseVoltage+0x1d6>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005d0c:	ebbe 0e0c 	subs.w	lr, lr, ip
 8005d10:	bf48      	it	mi
 8005d12:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8005d16:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005d1a:	bf48      	it	mi
 8005d1c:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	bfb8      	it	lt
 8005d24:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8005d28:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005d2c:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8005d30:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8005d34:	bfb8      	it	lt
 8005d36:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8005d3a:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8005d3e:	eb03 416c 	add.w	r1, r3, ip, asr #17
        pHandle->lowDuty = wTimePhB;
 8005d42:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8005d44:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8005d46:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8005d4a:	e782      	b.n	8005c52 <PWMC_SetPhaseVoltage+0x8e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005d4c:	ebbe 0e0c 	subs.w	lr, lr, ip
 8005d50:	bf44      	itt	mi
 8005d52:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8005d56:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	bfb8      	it	lt
 8005d5e:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8005d62:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8005d66:	bfb8      	it	lt
 8005d68:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8005d6c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8005d70:	f1bc 0100 	subs.w	r1, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8005d74:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8005d78:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8005d7c:	bfb8      	it	lt
 8005d7e:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8005d82:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8005d86:	bfb8      	it	lt
 8005d88:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8005d8c:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->lowDuty = wTimePhA;
 8005d90:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8005d92:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 8005d94:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8005d98:	e75b      	b.n	8005c52 <PWMC_SetPhaseVoltage+0x8e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005d9a:	ebbc 0e02 	subs.w	lr, ip, r2
 8005d9e:	bf44      	itt	mi
 8005da0:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8005da4:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8005da8:	2900      	cmp	r1, #0
 8005daa:	bfb8      	it	lt
 8005dac:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8005db0:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8005db4:	bfb8      	it	lt
 8005db6:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8005dba:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005dbe:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 8005dc0:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8005dc4:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005dc8:	bfb8      	it	lt
 8005dca:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8005dce:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8005dd2:	bfb8      	it	lt
 8005dd4:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8005dd8:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 8005ddc:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8005dde:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8005de0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8005de4:	e735      	b.n	8005c52 <PWMC_SetPhaseVoltage+0x8e>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005de6:	ebbe 0e02 	subs.w	lr, lr, r2
 8005dea:	bf44      	itt	mi
 8005dec:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8005df0:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8005df4:	2900      	cmp	r1, #0
 8005df6:	bfbc      	itt	lt
 8005df8:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8005dfc:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bfb8      	it	lt
 8005e04:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8005e08:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8005e0c:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005e10:	bfb8      	it	lt
 8005e12:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8005e16:	f04f 0c04 	mov.w	ip, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8005e1a:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8005e1e:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8005e22:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8005e26:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8005e28:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8005e2a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8005e2e:	e710      	b.n	8005c52 <PWMC_SetPhaseVoltage+0x8e>

08005e30 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8005e30:	6883      	ldr	r3, [r0, #8]
 8005e32:	4718      	bx	r3

08005e34 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8005e34:	b510      	push	{r4, lr}
 8005e36:	4604      	mov	r4, r0
 8005e38:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8005e3a:	b199      	cbz	r1, 8005e64 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8005e3c:	2901      	cmp	r1, #1
 8005e3e:	d002      	beq.n	8005e46 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8005e40:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8005e42:	b002      	add	sp, #8
 8005e44:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8005e46:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8005e4a:	b1cb      	cbz	r3, 8005e80 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	9101      	str	r1, [sp, #4]
 8005e52:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1f2      	bne.n	8005e40 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8005e5a:	6903      	ldr	r3, [r0, #16]
 8005e5c:	4798      	blx	r3
        retVal = true;
 8005e5e:	9901      	ldr	r1, [sp, #4]
 8005e60:	4608      	mov	r0, r1
 8005e62:	e7ee      	b.n	8005e42 <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8005e64:	f7ff ffe4 	bl	8005e30 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8005e68:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005e6c:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e5      	bne.n	8005e40 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8005e74:	4620      	mov	r0, r4
 8005e76:	6923      	ldr	r3, [r4, #16]
 8005e78:	4798      	blx	r3
      retVal = true;
 8005e7a:	2001      	movs	r0, #1
}
 8005e7c:	b002      	add	sp, #8
 8005e7e:	bd10      	pop	{r4, pc}
      retVal = true;
 8005e80:	4608      	mov	r0, r1
}
 8005e82:	b002      	add	sp, #8
 8005e84:	bd10      	pop	{r4, pc}
 8005e86:	bf00      	nop

08005e88 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8005e88:	69c3      	ldr	r3, [r0, #28]
 8005e8a:	4718      	bx	r3

08005e8c <R3_1_GetPhaseCurrents>:
  * @retval Ia and Ib current in ab_t format
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005e8c:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8005e8e:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005e90:	685c      	ldr	r4, [r3, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005e92:	6a22      	ldr	r2, [r4, #32]
 8005e94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e98:	6222      	str	r2, [r4, #32]
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = ( uint8_t )( pHandle->_Super.Sector );
 8005e9a:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a

  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8005e9e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8005ea2:	6d1c      	ldr	r4, [r3, #80]	; 0x50
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8005ea4:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005ea6:	682b      	ldr	r3, [r5, #0]
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8005ea8:	6824      	ldr	r4, [r4, #0]
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8005eaa:	005b      	lsls	r3, r3, #1
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8005eac:	ea4f 0c44 	mov.w	ip, r4, lsl #1
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8005eb0:	b29b      	uxth	r3, r3
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8005eb2:	fa1f fc8c 	uxth.w	ip, ip

  switch ( bSector )
 8005eb6:	2a05      	cmp	r2, #5
 8005eb8:	f200 80a6 	bhi.w	8006008 <R3_1_GetPhaseCurrents+0x17c>
 8005ebc:	e8df f002 	tbb	[pc, r2]
 8005ec0:	031c1c36 	.word	0x031c1c36
 8005ec4:	3603      	.short	0x3603
    case SECTOR_4:
    case SECTOR_5:
    {
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8005ec6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005ec8:	1ad3      	subs	r3, r2, r3
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8005eca:	4a53      	ldr	r2, [pc, #332]	; (8006018 <R3_1_GetPhaseCurrents+0x18c>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	db5a      	blt.n	8005f86 <R3_1_GetPhaseCurrents+0xfa>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8005ed0:	6e02      	ldr	r2, [r0, #96]	; 0x60

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 8005ed2:	4d51      	ldr	r5, [pc, #324]	; (8006018 <R3_1_GetPhaseCurrents+0x18c>)
      else  if ( wAux > INT16_MAX )
 8005ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8005ed8:	eba2 0c0c 	sub.w	ip, r2, ip
        pStator_Currents->a = INT16_MAX;
 8005edc:	bfa8      	it	ge
 8005ede:	f647 73ff 	movwge	r3, #32767	; 0x7fff
      if ( wAux < -INT16_MAX )
 8005ee2:	45ac      	cmp	ip, r5
        pStator_Currents->a = ( int16_t )wAux;
 8005ee4:	800b      	strh	r3, [r1, #0]
      if ( wAux < -INT16_MAX )
 8005ee6:	da55      	bge.n	8005f94 <R3_1_GetPhaseCurrents+0x108>
    default:
    {
    }
    break;
  }
  pHandle->_Super.Ia = pStator_Currents->a;
 8005ee8:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = -INT16_MAX;
 8005eec:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005eee:	fa1f f38e 	uxth.w	r3, lr
 8005ef2:	f248 0201 	movw	r2, #32769	; 0x8001
 8005ef6:	e031      	b.n	8005f5c <R3_1_GetPhaseCurrents+0xd0>
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8005ef8:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8005efa:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 8005efc:	4b46      	ldr	r3, [pc, #280]	; (8006018 <R3_1_GetPhaseCurrents+0x18c>)
 8005efe:	429c      	cmp	r4, r3
 8005f00:	db3b      	blt.n	8005f7a <R3_1_GetPhaseCurrents+0xee>
      else  if ( wAux > INT16_MAX )
 8005f02:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8005f06:	db6f      	blt.n	8005fe8 <R3_1_GetPhaseCurrents+0x15c>
        pStator_Currents->a = INT16_MAX;
 8005f08:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	800a      	strh	r2, [r1, #0]
 8005f10:	4614      	mov	r4, r2
 8005f12:	4696      	mov	lr, r2
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 8005f14:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8005f16:	ebac 0202 	sub.w	r2, ip, r2
 8005f1a:	1b12      	subs	r2, r2, r4
      if ( wAux > INT16_MAX )
 8005f1c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005f20:	db4d      	blt.n	8005fbe <R3_1_GetPhaseCurrents+0x132>
        pStator_Currents->b = INT16_MAX;
 8005f22:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005f26:	804a      	strh	r2, [r1, #2]
 8005f28:	4615      	mov	r5, r2
 8005f2a:	e017      	b.n	8005f5c <R3_1_GetPhaseCurrents+0xd0>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8005f2c:	6e04      	ldr	r4, [r0, #96]	; 0x60
      if ( wAux < -INT16_MAX )
 8005f2e:	4a3a      	ldr	r2, [pc, #232]	; (8006018 <R3_1_GetPhaseCurrents+0x18c>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8005f30:	1ae3      	subs	r3, r4, r3
      if ( wAux < -INT16_MAX )
 8005f32:	4293      	cmp	r3, r2
 8005f34:	db1b      	blt.n	8005f6e <R3_1_GetPhaseCurrents+0xe2>
      else  if ( wAux > INT16_MAX )
 8005f36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f3a:	db47      	blt.n	8005fcc <R3_1_GetPhaseCurrents+0x140>
        pStator_Currents->b = INT16_MAX;
 8005f3c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005f40:	461a      	mov	r2, r3
 8005f42:	804b      	strh	r3, [r1, #2]
 8005f44:	461d      	mov	r5, r3
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8005f46:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8005f48:	ebac 0404 	sub.w	r4, ip, r4
 8005f4c:	1ae3      	subs	r3, r4, r3
      if ( wAux > INT16_MAX )
 8005f4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f52:	db2c      	blt.n	8005fae <R3_1_GetPhaseCurrents+0x122>
        pStator_Currents->a = INT16_MAX;
 8005f54:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005f58:	800b      	strh	r3, [r1, #0]
 8005f5a:	469e      	mov	lr, r3
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005f5c:	4413      	add	r3, r2
 8005f5e:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 8005f60:	f8a0 e048 	strh.w	lr, [r0, #72]	; 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 8005f64:	f8a0 504a 	strh.w	r5, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005f68:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8005f6c:	bd30      	pop	{r4, r5, pc}
        pStator_Currents->b = -INT16_MAX;
 8005f6e:	4613      	mov	r3, r2
 8005f70:	804a      	strh	r2, [r1, #2]
 8005f72:	461d      	mov	r5, r3
 8005f74:	f248 0201 	movw	r2, #32769	; 0x8001
 8005f78:	e7e5      	b.n	8005f46 <R3_1_GetPhaseCurrents+0xba>
        pStator_Currents->a = -INT16_MAX;
 8005f7a:	461c      	mov	r4, r3
 8005f7c:	800b      	strh	r3, [r1, #0]
 8005f7e:	46a6      	mov	lr, r4
 8005f80:	f248 0301 	movw	r3, #32769	; 0x8001
 8005f84:	e7c6      	b.n	8005f14 <R3_1_GetPhaseCurrents+0x88>
        pStator_Currents->a = -INT16_MAX;
 8005f86:	800a      	strh	r2, [r1, #0]
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8005f88:	6e02      	ldr	r2, [r0, #96]	; 0x60
      if ( wAux < -INT16_MAX )
 8005f8a:	4d23      	ldr	r5, [pc, #140]	; (8006018 <R3_1_GetPhaseCurrents+0x18c>)
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8005f8c:	eba2 0c0c 	sub.w	ip, r2, ip
      if ( wAux < -INT16_MAX )
 8005f90:	45ac      	cmp	ip, r5
 8005f92:	dba9      	blt.n	8005ee8 <R3_1_GetPhaseCurrents+0x5c>
      else  if ( wAux > INT16_MAX )
 8005f94:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
 8005f98:	db1c      	blt.n	8005fd4 <R3_1_GetPhaseCurrents+0x148>
        pStator_Currents->b = INT16_MAX;
 8005f9a:	f647 73ff 	movw	r3, #32767	; 0x7fff
  pHandle->_Super.Ia = pStator_Currents->a;
 8005f9e:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = INT16_MAX;
 8005fa2:	804b      	strh	r3, [r1, #2]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4615      	mov	r5, r2
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005fa8:	fa1f f38e 	uxth.w	r3, lr
 8005fac:	e7d6      	b.n	8005f5c <R3_1_GetPhaseCurrents+0xd0>
      else  if ( wAux < -INT16_MAX )
 8005fae:	4c1a      	ldr	r4, [pc, #104]	; (8006018 <R3_1_GetPhaseCurrents+0x18c>)
 8005fb0:	42a3      	cmp	r3, r4
 8005fb2:	da1f      	bge.n	8005ff4 <R3_1_GetPhaseCurrents+0x168>
        pStator_Currents->a = -INT16_MAX;
 8005fb4:	800c      	strh	r4, [r1, #0]
 8005fb6:	f248 0301 	movw	r3, #32769	; 0x8001
 8005fba:	46a6      	mov	lr, r4
 8005fbc:	e7ce      	b.n	8005f5c <R3_1_GetPhaseCurrents+0xd0>
      else  if ( wAux < -INT16_MAX )
 8005fbe:	4d16      	ldr	r5, [pc, #88]	; (8006018 <R3_1_GetPhaseCurrents+0x18c>)
 8005fc0:	42aa      	cmp	r2, r5
 8005fc2:	da1d      	bge.n	8006000 <R3_1_GetPhaseCurrents+0x174>
        pStator_Currents->b = -INT16_MAX;
 8005fc4:	804d      	strh	r5, [r1, #2]
 8005fc6:	f248 0201 	movw	r2, #32769	; 0x8001
 8005fca:	e7c7      	b.n	8005f5c <R3_1_GetPhaseCurrents+0xd0>
        pStator_Currents->b = ( int16_t )wAux;
 8005fcc:	b21d      	sxth	r5, r3
 8005fce:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	e7b8      	b.n	8005f46 <R3_1_GetPhaseCurrents+0xba>
  pHandle->_Super.Ia = pStator_Currents->a;
 8005fd4:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = ( int16_t )wAux;
 8005fd8:	fa0f f58c 	sxth.w	r5, ip
 8005fdc:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005fde:	fa1f f38e 	uxth.w	r3, lr
 8005fe2:	fa1f f28c 	uxth.w	r2, ip
 8005fe6:	e7b9      	b.n	8005f5c <R3_1_GetPhaseCurrents+0xd0>
        pStator_Currents->a = ( int16_t )wAux;
 8005fe8:	fa0f fe84 	sxth.w	lr, r4
 8005fec:	f8a1 e000 	strh.w	lr, [r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005ff0:	b2a3      	uxth	r3, r4
 8005ff2:	e78f      	b.n	8005f14 <R3_1_GetPhaseCurrents+0x88>
        pStator_Currents->a = ( int16_t )wAux;
 8005ff4:	fa0f fe83 	sxth.w	lr, r3
 8005ff8:	f8a1 e000 	strh.w	lr, [r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	e7ad      	b.n	8005f5c <R3_1_GetPhaseCurrents+0xd0>
        pStator_Currents->b = ( int16_t )wAux;
 8006000:	b215      	sxth	r5, r2
 8006002:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006004:	b292      	uxth	r2, r2
 8006006:	e7a9      	b.n	8005f5c <R3_1_GetPhaseCurrents+0xd0>
  pHandle->_Super.Ia = pStator_Currents->a;
 8006008:	f9b1 e000 	ldrsh.w	lr, [r1]
  pHandle->_Super.Ib = pStator_Currents->b;
 800600c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006010:	880b      	ldrh	r3, [r1, #0]
 8006012:	884a      	ldrh	r2, [r1, #2]
 8006014:	e7a2      	b.n	8005f5c <R3_1_GetPhaseCurrents+0xd0>
 8006016:	bf00      	nop
 8006018:	ffff8001 	.word	0xffff8001

0800601c <R3_1_HFCurrentsCalibrationAB>:
 * @retval It always returns {0,0} in ab_t format
 */
void R3_1_HFCurrentsCalibrationAB(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800601c:	6f83      	ldr	r3, [r0, #120]	; 0x78
{  
 800601e:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006020:	685c      	ldr	r4, [r3, #4]
 8006022:	6a22      	ldr	r2, [r4, #32]
 8006024:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006028:	6222      	str	r2, [r4, #32]
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800602a:	f890 2073 	ldrb.w	r2, [r0, #115]	; 0x73
 800602e:	2a0f      	cmp	r2, #15
 8006030:	d813      	bhi.n	800605a <R3_1_HFCurrentsCalibrationAB+0x3e>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 8006032:	f890 4072 	ldrb.w	r4, [r0, #114]	; 0x72
 8006036:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006038:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800603c:	6b9c      	ldr	r4, [r3, #56]	; 0x38
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 800603e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 8006040:	6824      	ldr	r4, [r4, #0]
 8006042:	4422      	add	r2, r4
 8006044:	65c2      	str	r2, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8006046:	681c      	ldr	r4, [r3, #0]
    pHandle->PolarizationCounter++;
 8006048:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 800604c:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle->PolarizationCounter++;
 800604e:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8006050:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8006052:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8006054:	6602      	str	r2, [r0, #96]	; 0x60
    pHandle->PolarizationCounter++;
 8006056:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 800605a:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 800605c:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8006060:	600b      	str	r3, [r1, #0]
}
 8006062:	4770      	bx	lr

08006064 <R3_1_HFCurrentsCalibrationC>:
  *         the offset computation.
  * @param pHdl: handler of the current instance of the PWM component
  * @retval It always returns {0,0} in ab_t format
  */
__weak void R3_1_HFCurrentsCalibrationC(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
 8006064:	b410      	push	{r4}
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006066:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8006068:	6862      	ldr	r2, [r4, #4]
 800606a:	6a13      	ldr	r3, [r2, #32]
 800606c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006070:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006072:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
 8006076:	2b0f      	cmp	r3, #15
 8006078:	d80e      	bhi.n	8006098 <R3_1_HFCurrentsCalibrationC+0x34>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 800607a:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 800607e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8006080:	3214      	adds	r2, #20
 8006082:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006086:	6812      	ldr	r2, [r2, #0]
 8006088:	441a      	add	r2, r3
    pHandle->PolarizationCounter++;
 800608a:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 800608e:	6642      	str	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 8006090:	3301      	adds	r3, #1
 8006092:	b2db      	uxtb	r3, r3
 8006094:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8006098:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 800609a:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 800609e:	600b      	str	r3, [r1, #0]
}
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop

080060a4 <R3_1_TurnOnLowSides>:
  * @retval none
  */
__weak void R3_1_TurnOnLowSides(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80060a4:	6f81      	ldr	r1, [r0, #120]	; 0x78

  pHandle->_Super.TurnOnLowSidesAction = true;
 80060a6:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80060aa:	684a      	ldr	r2, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 80060ac:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 80060b0:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80060b2:	f06f 0001 	mvn.w	r0, #1
 80060b6:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80060b8:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80060ba:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80060bc:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80060be:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0 );
  LL_TIM_OC_SetCompareCH2( TIMx, 0 );
  LL_TIM_OC_SetCompareCH3( TIMx, 0 );

  /* Wait until next update */
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 80060c0:	07db      	lsls	r3, r3, #31
 80060c2:	d5fc      	bpl.n	80060be <R3_1_TurnOnLowSides+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80060c4:	f06f 0301 	mvn.w	r3, #1
 80060c8:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80060ca:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80060cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d0:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
  
  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 80060d2:	f891 306e 	ldrb.w	r3, [r1, #110]	; 0x6e
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d000      	beq.n	80060dc <R3_1_TurnOnLowSides+0x38>
 80060da:	4770      	bx	lr
{
 80060dc:	b410      	push	{r4}
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80060de:	e9d1 2002 	ldrd	r2, r0, [r1, #8]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80060e2:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80060e6:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80060e8:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 80060ec:	6184      	str	r4, [r0, #24]
  }
  return; 
}
 80060ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060f2:	619a      	str	r2, [r3, #24]
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop

080060f8 <R3_1_SwitchOnPWM>:
  * @param pHdl handler of the current instance of the PWM component
  */
__weak void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80060f8:	6f81      	ldr	r1, [r0, #120]	; 0x78

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80060fa:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80060fe:	684b      	ldr	r3, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006100:	f04f 0c00 	mov.w	ip, #0
{  
 8006104:	b430      	push	{r4, r5}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006106:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800610a:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800610c:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 800610e:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006110:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006112:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006114:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006118:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800611a:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800611c:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800611e:	07d2      	lsls	r2, r2, #31
 8006120:	d5fc      	bpl.n	800611c <R3_1_SwitchOnPWM+0x24>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006122:	f06f 0201 	mvn.w	r2, #1
 8006126:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800612a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800612e:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006132:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006136:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006138:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 800613c:	2a02      	cmp	r2, #2
 800613e:	d008      	beq.n	8006152 <R3_1_SwitchOnPWM+0x5a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006140:	f06f 0201 	mvn.w	r2, #1
 8006144:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	f042 0201 	orr.w	r2, r2, #1
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 800614c:	bc30      	pop	{r4, r5}
 800614e:	60da      	str	r2, [r3, #12]
 8006150:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8006152:	6a18      	ldr	r0, [r3, #32]
 8006154:	f240 5255 	movw	r2, #1365	; 0x555
 8006158:	4210      	tst	r0, r2
 800615a:	d009      	beq.n	8006170 <R3_1_SwitchOnPWM+0x78>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800615c:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8006160:	e9d1 2504 	ldrd	r2, r5, [r1, #16]
 8006164:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8006166:	e9d1 4106 	ldrd	r4, r1, [r1, #24]
 800616a:	6184      	str	r4, [r0, #24]
 800616c:	6191      	str	r1, [r2, #24]
}
 800616e:	e7e7      	b.n	8006140 <R3_1_SwitchOnPWM+0x48>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006170:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8006174:	688d      	ldr	r5, [r1, #8]
 8006176:	69ca      	ldr	r2, [r1, #28]
 8006178:	0424      	lsls	r4, r4, #16
 800617a:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800617c:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
 8006180:	0400      	lsls	r0, r0, #16
 8006182:	0412      	lsls	r2, r2, #16
 8006184:	61a8      	str	r0, [r5, #24]
 8006186:	61a2      	str	r2, [r4, #24]
}
 8006188:	e7da      	b.n	8006140 <R3_1_SwitchOnPWM+0x48>
 800618a:	bf00      	nop

0800618c <R3_1_SwitchOffPWM>:
  * @param pHdl handler of the current instance of the PWM component
  */
__weak void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800618c:	6f81      	ldr	r1, [r0, #120]	; 0x78
 800618e:	684a      	ldr	r2, [r1, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006190:	68d3      	ldr	r3, [r2, #12]
 8006192:	f023 0301 	bic.w	r3, r3, #1
 8006196:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006198:	6c53      	ldr	r3, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 800619a:	f04f 0c00 	mov.w	ip, #0
 800619e:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (pHandle->BrakeActionLock == true)
 80061a2:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
 80061a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061aa:	6453      	str	r3, [r2, #68]	; 0x44
 80061ac:	b918      	cbnz	r0, 80061b6 <R3_1_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80061ae:	f891 306e 	ldrb.w	r3, [r1, #110]	; 0x6e
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d009      	beq.n	80061ca <R3_1_SwitchOffPWM+0x3e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80061b6:	f06f 0301 	mvn.w	r3, #1
 80061ba:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80061bc:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 80061be:	07db      	lsls	r3, r3, #31
 80061c0:	d5fc      	bpl.n	80061bc <R3_1_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80061c2:	f06f 0301 	mvn.w	r3, #1
 80061c6:	6113      	str	r3, [r2, #16]
 80061c8:	4770      	bx	lr
{
 80061ca:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80061cc:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80061d0:	688d      	ldr	r5, [r1, #8]
 80061d2:	69cb      	ldr	r3, [r1, #28]
 80061d4:	0424      	lsls	r4, r4, #16
 80061d6:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80061d8:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
 80061dc:	041b      	lsls	r3, r3, #16
 80061de:	0400      	lsls	r0, r0, #16
 80061e0:	61a8      	str	r0, [r5, #24]
 80061e2:	61a3      	str	r3, [r4, #24]
 80061e4:	f06f 0301 	mvn.w	r3, #1
 80061e8:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80061ea:	6913      	ldr	r3, [r2, #16]
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 80061ec:	07d9      	lsls	r1, r3, #31
 80061ee:	d5fc      	bpl.n	80061ea <R3_1_SwitchOffPWM+0x5e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80061f0:	f06f 0301 	mvn.w	r3, #1
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 80061f4:	bc30      	pop	{r4, r5}
 80061f6:	6113      	str	r3, [r2, #16]
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop

080061fc <R3_1_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param pHdl: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
void R3_1_RLGetPhaseCurrents(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{
 80061fc:	b410      	push	{r4}

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80061fe:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8006200:	6862      	ldr	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006202:	6a13      	ldr	r3, [r2, #32]
 8006204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006208:	6213      	str	r3, [r2, #32]
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 800620a:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 800620e:	6e03      	ldr	r3, [r0, #96]	; 0x60
  
  /* Check saturation */
  if (wAux > -INT16_MAX)
 8006210:	480d      	ldr	r0, [pc, #52]	; (8006248 <R3_1_RLGetPhaseCurrents+0x4c>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 8006212:	3214      	adds	r2, #20
 8006214:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006218:	6812      	ldr	r2, [r2, #0]
 800621a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
  if (wAux > -INT16_MAX)
 800621e:	4283      	cmp	r3, r0
 8006220:	db05      	blt.n	800622e <R3_1_RLGetPhaseCurrents+0x32>
  {
    if (wAux < INT16_MAX)
 8006222:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006226:	4293      	cmp	r3, r2
 8006228:	dc0b      	bgt.n	8006242 <R3_1_RLGetPhaseCurrents+0x46>
  else
  {
    wAux = -INT16_MAX;
  }
  /* First value read of Phase B*/
  pStator_Currents->a = ( int16_t )( wAux );
 800622a:	b21b      	sxth	r3, r3
 800622c:	e000      	b.n	8006230 <R3_1_RLGetPhaseCurrents+0x34>
 800622e:	4b07      	ldr	r3, [pc, #28]	; (800624c <R3_1_RLGetPhaseCurrents+0x50>)
  pStator_Currents->b = ( int16_t )( wAux );

}
 8006230:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = ( int16_t )( wAux );
 8006234:	2200      	movs	r2, #0
 8006236:	f363 020f 	bfi	r2, r3, #0, #16
 800623a:	f363 421f 	bfi	r2, r3, #16, #16
 800623e:	600a      	str	r2, [r1, #0]
}
 8006240:	4770      	bx	lr
 8006242:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006246:	e7f3      	b.n	8006230 <R3_1_RLGetPhaseCurrents+0x34>
 8006248:	ffff8002 	.word	0xffff8002
 800624c:	ffff8001 	.word	0xffff8001

08006250 <R3_1_RLTurnOnLowSides>:
  * @retval none
  */
void R3_1_RLTurnOnLowSides(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006250:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8006252:	684a      	ldr	r2, [r1, #4]
{  
 8006254:	b410      	push	{r4}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006256:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800625a:	2400      	movs	r4, #0
 800625c:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800625e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006260:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8006262:	07db      	lsls	r3, r3, #31
 8006264:	d5fc      	bpl.n	8006260 <R3_1_RLTurnOnLowSides+0x10>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006266:	f06f 0301 	mvn.w	r3, #1
 800626a:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800626c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800626e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006272:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006274:	f891 306e 	ldrb.w	r3, [r1, #110]	; 0x6e
 8006278:	2b02      	cmp	r3, #2
 800627a:	d10a      	bne.n	8006292 <R3_1_RLTurnOnLowSides+0x42>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800627c:	6888      	ldr	r0, [r1, #8]
 800627e:	694c      	ldr	r4, [r1, #20]
 8006280:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006284:	6184      	str	r4, [r0, #24]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8006286:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800628a:	0412      	lsls	r2, r2, #16
 800628c:	041b      	lsls	r3, r3, #16
 800628e:	6182      	str	r2, [r0, #24]
 8006290:	618b      	str	r3, [r1, #24]
  }
  return; 
}
 8006292:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006296:	4770      	bx	lr

08006298 <R3_1_RLSwitchOnPWM>:
  * @retval none
  */
void R3_1_RLSwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006298:	6f81      	ldr	r1, [r0, #120]	; 0x78
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 800629a:	2200      	movs	r2, #0
{
 800629c:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800629e:	e9d1 4300 	ldrd	r4, r3, [r1]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80062a2:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  /* The following while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	06d2      	lsls	r2, r2, #27
 80062aa:	d4fc      	bmi.n	80062a6 <R3_1_RLSwitchOnPWM+0xe>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	06d5      	lsls	r5, r2, #27
 80062b0:	d5fc      	bpl.n	80062ac <R3_1_RLSwitchOnPWM+0x14>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 80062b2:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
  WRITE_REG(TIMx->CCR1, CompareValue);
 80062b6:	2001      	movs	r0, #1
 80062b8:	3a05      	subs	r2, #5
 80062ba:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 80062bc:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80062be:	f06f 0201 	mvn.w	r2, #1
 80062c2:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80062c4:	691a      	ldr	r2, [r3, #16]
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80062c6:	07d2      	lsls	r2, r2, #31
 80062c8:	d5fc      	bpl.n	80062c4 <R3_1_RLSwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80062ca:	f06f 0201 	mvn.w	r2, #1
 80062ce:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80062d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062d6:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80062d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062de:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80062e0:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 80062e4:	2a02      	cmp	r2, #2
 80062e6:	d00b      	beq.n	8006300 <R3_1_RLSwitchOnPWM+0x68>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80062e8:	f06f 0201 	mvn.w	r2, #1
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80062ec:	f06f 0104 	mvn.w	r1, #4
 80062f0:	6021      	str	r1, [r4, #0]
 80062f2:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	f042 0201 	orr.w	r2, r2, #1

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 80062fa:	bc30      	pop	{r4, r5}
 80062fc:	60da      	str	r2, [r3, #12]
 80062fe:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8006300:	6a18      	ldr	r0, [r3, #32]
 8006302:	f240 5255 	movw	r2, #1365	; 0x555
 8006306:	4210      	tst	r0, r2
 8006308:	d00a      	beq.n	8006320 <R3_1_RLSwitchOnPWM+0x88>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800630a:	688a      	ldr	r2, [r1, #8]
 800630c:	6948      	ldr	r0, [r1, #20]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800630e:	6190      	str	r0, [r2, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8006310:	68ca      	ldr	r2, [r1, #12]
 8006312:	6988      	ldr	r0, [r1, #24]
 8006314:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006316:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8006318:	6909      	ldr	r1, [r1, #16]
 800631a:	0412      	lsls	r2, r2, #16
 800631c:	618a      	str	r2, [r1, #24]
}
 800631e:	e7e3      	b.n	80062e8 <R3_1_RLSwitchOnPWM+0x50>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006320:	e9d1 0205 	ldrd	r0, r2, [r1, #20]
 8006324:	688d      	ldr	r5, [r1, #8]
 8006326:	0400      	lsls	r0, r0, #16
 8006328:	61a8      	str	r0, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800632a:	68c8      	ldr	r0, [r1, #12]
 800632c:	0412      	lsls	r2, r2, #16
 800632e:	6182      	str	r2, [r0, #24]
 8006330:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8006332:	6909      	ldr	r1, [r1, #16]
 8006334:	0412      	lsls	r2, r2, #16
 8006336:	618a      	str	r2, [r1, #24]
}
 8006338:	e7d6      	b.n	80062e8 <R3_1_RLSwitchOnPWM+0x50>
 800633a:	bf00      	nop

0800633c <R3_1_Init>:
{
 800633c:	b430      	push	{r4, r5}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800633e:	6f84      	ldr	r4, [r0, #120]	; 0x78
  ADC_TypeDef* ADCx  = pHandle->pParams_str->ADCx;
 8006340:	6823      	ldr	r3, [r4, #0]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006342:	6862      	ldr	r2, [r4, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8006344:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8006346:	f06f 0502 	mvn.w	r5, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 800634a:	f021 0120 	bic.w	r1, r1, #32
 800634e:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8006350:	601d      	str	r5, [r3, #0]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8006352:	6859      	ldr	r1, [r3, #4]
 8006354:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006358:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800635a:	f06f 0104 	mvn.w	r1, #4
 800635e:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006360:	6811      	ldr	r1, [r2, #0]
 8006362:	f021 0101 	bic.w	r1, r1, #1
 8006366:	6011      	str	r1, [r2, #0]
    if ( TIMx == TIM1 )
 8006368:	491a      	ldr	r1, [pc, #104]	; (80063d4 <R3_1_Init+0x98>)
 800636a:	428a      	cmp	r2, r1
 800636c:	d02c      	beq.n	80063c8 <R3_1_Init+0x8c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800636e:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8006372:	6111      	str	r1, [r2, #16]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 8006374:	f894 106c 	ldrb.w	r1, [r4, #108]	; 0x6c
 8006378:	b119      	cbz	r1, 8006382 <R3_1_Init+0x46>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800637a:	68d1      	ldr	r1, [r2, #12]
 800637c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8006380:	60d1      	str	r1, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 8006382:	6a11      	ldr	r1, [r2, #32]
 8006384:	f441 61aa 	orr.w	r1, r1, #1360	; 0x550
 8006388:	f041 0105 	orr.w	r1, r1, #5
 800638c:	6211      	str	r1, [r2, #32]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	f042 0201 	orr.w	r2, r2, #1
 8006394:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006398:	f06f 0404 	mvn.w	r4, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800639c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80063a0:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80063a2:	601c      	str	r4, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063aa:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 80063ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    pHandle->OverCurrentFlag = false;
 80063ae:	2100      	movs	r1, #0
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80063b0:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 80063b4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80063b8:	66c4      	str	r4, [r0, #108]	; 0x6c
 80063ba:	639a      	str	r2, [r3, #56]	; 0x38
}
 80063bc:	bc30      	pop	{r4, r5}
    pHandle->OverCurrentFlag = false;
 80063be:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
    pHandle->_Super.DTTest = 0u;
 80063c2:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
}
 80063c6:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80063c8:	4d03      	ldr	r5, [pc, #12]	; (80063d8 <R3_1_Init+0x9c>)
 80063ca:	68e9      	ldr	r1, [r5, #12]
 80063cc:	f041 0101 	orr.w	r1, r1, #1
 80063d0:	60e9      	str	r1, [r5, #12]
}
 80063d2:	e7cc      	b.n	800636e <R3_1_Init+0x32>
 80063d4:	40010000 	.word	0x40010000
 80063d8:	e0042000 	.word	0xe0042000

080063dc <R3_1_CurrentReadingCalibration>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80063dc:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 80063de:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80063e0:	685d      	ldr	r5, [r3, #4]
  pHandle->PhaseAOffset = 0u;
 80063e2:	2600      	movs	r6, #0
  pHandle->PolarizationCounter = 0u;
 80063e4:	f880 6073 	strb.w	r6, [r0, #115]	; 0x73
  CLEAR_BIT(TIMx->CCER, Channels);
 80063e8:	6a2b      	ldr	r3, [r5, #32]
  pHandle->PhaseAOffset = 0u;
 80063ea:	65c6      	str	r6, [r0, #92]	; 0x5c
 80063ec:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 80063f0:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseCOffset = 0u;
 80063f4:	e9c0 6618 	strd	r6, r6, [r0, #96]	; 0x60
 80063f8:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 80063fa:	4b34      	ldr	r3, [pc, #208]	; (80064cc <R3_1_CurrentReadingCalibration+0xf0>)
 80063fc:	6043      	str	r3, [r0, #4]
{
 80063fe:	4604      	mov	r4, r0
  pHandle->CalibSector = SECTOR_5;
 8006400:	2704      	movs	r7, #4
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8006402:	4b33      	ldr	r3, [pc, #204]	; (80064d0 <R3_1_CurrentReadingCalibration+0xf4>)
 8006404:	6183      	str	r3, [r0, #24]
{
 8006406:	b083      	sub	sp, #12
  pHandle->CalibSector = SECTOR_5;
 8006408:	f880 7072 	strb.w	r7, [r0, #114]	; 0x72
  pHandle->_Super.Sector = SECTOR_5; 
 800640c:	f880 703a 	strb.w	r7, [r0, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8006410:	f7ff fe72 	bl	80060f8 <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8006414:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006416:	f104 0138 	add.w	r1, r4, #56	; 0x38
 800641a:	f893 206d 	ldrb.w	r2, [r3, #109]	; 0x6d
 800641e:	4628      	mov	r0, r5
 8006420:	f104 0373 	add.w	r3, r4, #115	; 0x73
 8006424:	e9cd 1300 	strd	r1, r3, [sp]
 8006428:	f7ff fba2 	bl	8005b70 <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 800642c:	4620      	mov	r0, r4
 800642e:	f7ff fead 	bl	800618c <R3_1_SwitchOffPWM>
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8006432:	4a28      	ldr	r2, [pc, #160]	; (80064d4 <R3_1_CurrentReadingCalibration+0xf8>)
 8006434:	6062      	str	r2, [r4, #4]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8006436:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 8006438:	f884 6073 	strb.w	r6, [r4, #115]	; 0x73
  pHandle->CalibSector = SECTOR_1;
 800643c:	f884 6072 	strb.w	r6, [r4, #114]	; 0x72
  pHandle->_Super.Sector = SECTOR_1; 
 8006440:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8006444:	f7ff fe58 	bl	80060f8 <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8006448:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800644a:	e9dd 1300 	ldrd	r1, r3, [sp]
 800644e:	f892 206d 	ldrb.w	r2, [r2, #109]	; 0x6d
 8006452:	4628      	mov	r0, r5
 8006454:	f7ff fb8c 	bl	8005b70 <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 8006458:	4620      	mov	r0, r4
 800645a:	f7ff fe97 	bl	800618c <R3_1_SwitchOffPWM>
  pHandle->PhaseAOffset >>= 3;
 800645e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8006460:	08db      	lsrs	r3, r3, #3
 8006462:	65e3      	str	r3, [r4, #92]	; 0x5c
  pHandle->PhaseBOffset >>= 3;
 8006464:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8006466:	08db      	lsrs	r3, r3, #3
 8006468:	6623      	str	r3, [r4, #96]	; 0x60
  pHandle->PhaseCOffset >>= 3;
 800646a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800646c:	08db      	lsrs	r3, r3, #3
 800646e:	6663      	str	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8006470:	4b19      	ldr	r3, [pc, #100]	; (80064d8 <R3_1_CurrentReadingCalibration+0xfc>)
 8006472:	6063      	str	r3, [r4, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 8006474:	4b19      	ldr	r3, [pc, #100]	; (80064dc <R3_1_CurrentReadingCalibration+0x100>)
 8006476:	61a3      	str	r3, [r4, #24]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006478:	69ab      	ldr	r3, [r5, #24]
 800647a:	f023 0308 	bic.w	r3, r3, #8
 800647e:	61ab      	str	r3, [r5, #24]
 8006480:	69ab      	ldr	r3, [r5, #24]
 8006482:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006486:	61ab      	str	r3, [r5, #24]
 8006488:	69eb      	ldr	r3, [r5, #28]
 800648a:	f023 0308 	bic.w	r3, r3, #8
 800648e:	61eb      	str	r3, [r5, #28]
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->Half_PWMPeriod);
 8006490:	f8b4 3070 	ldrh.w	r3, [r4, #112]	; 0x70
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006494:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006496:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006498:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800649a:	69ab      	ldr	r3, [r5, #24]
 800649c:	f043 0308 	orr.w	r3, r3, #8
 80064a0:	61ab      	str	r3, [r5, #24]
 80064a2:	69ab      	ldr	r3, [r5, #24]
 80064a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80064a8:	61ab      	str	r3, [r5, #24]
 80064aa:	69eb      	ldr	r3, [r5, #28]
 80064ac:	f043 0308 	orr.w	r3, r3, #8
 80064b0:	61eb      	str	r3, [r5, #28]
  pHandle->_Super.Sector = SECTOR_5;
 80064b2:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
  SET_BIT(TIMx->CCER, Channels);
 80064b6:	6a2b      	ldr	r3, [r5, #32]
 80064b8:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 80064bc:	f043 0305 	orr.w	r3, r3, #5
 80064c0:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 80064c2:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
}
 80064c6:	b003      	add	sp, #12
 80064c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ca:	bf00      	nop
 80064cc:	0800601d 	.word	0x0800601d
 80064d0:	0800650d 	.word	0x0800650d
 80064d4:	08006065 	.word	0x08006065
 80064d8:	08005e8d 	.word	0x08005e8d
 80064dc:	0800652d 	.word	0x0800652d

080064e0 <R3_1_WriteTIMRegisters>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80064e0:	6f83      	ldr	r3, [r0, #120]	; 0x78
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->_Super.CntPhB);
 80064e2:	8e82      	ldrh	r2, [r0, #52]	; 0x34
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80064e4:	685b      	ldr	r3, [r3, #4]
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->_Super.CntPhC);
 80064e6:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
{
 80064e8:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->_Super.CntPhA);
 80064ea:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 80064ec:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80064ee:	639a      	str	r2, [r3, #56]	; 0x38
  if ( pHandle->_Super.SWerror == 1u )
 80064f0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80064f2:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80064f4:	6a1b      	ldr	r3, [r3, #32]
}
 80064f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  if ( pHandle->_Super.SWerror == 1u )
 80064fa:	2a01      	cmp	r2, #1
    hAux = MC_FOC_DURATION;
 80064fc:	bf12      	itee	ne
 80064fe:	f3c3 3200 	ubfxne	r2, r3, #12, #1
    pHandle->_Super.SWerror = 0u;
 8006502:	2300      	moveq	r3, #0
 8006504:	8703      	strheq	r3, [r0, #56]	; 0x38
}
 8006506:	4610      	mov	r0, r2
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop

0800650c <R3_1_SetADCSampPointCalibration>:
{
 800650c:	b510      	push	{r4, lr}
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 800650e:	f8b0 1070 	ldrh.w	r1, [r0, #112]	; 0x70
  pHandle->_Super.Sector = pHandle->CalibSector;
 8006512:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 8006516:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800651a:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 800651e:	3901      	subs	r1, #1
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006520:	66c4      	str	r4, [r0, #108]	; 0x6c
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8006522:	b289      	uxth	r1, r1
 8006524:	f7ff ffdc 	bl	80064e0 <R3_1_WriteTIMRegisters>
}
 8006528:	bd10      	pop	{r4, pc}
 800652a:	bf00      	nop

0800652c <R3_1_SetADCSampPointSectX>:
{
 800652c:	b510      	push	{r4, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 800652e:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8006530:	f8b0 e070 	ldrh.w	lr, [r0, #112]	; 0x70
 8006534:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8006536:	ebae 0201 	sub.w	r2, lr, r1
 800653a:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 800653e:	b292      	uxth	r2, r2
 8006540:	429a      	cmp	r2, r3
 8006542:	d908      	bls.n	8006556 <R3_1_SetADCSampPointSectX+0x2a>
    pHandle->_Super.Sector = SECTOR_5;
 8006544:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006546:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 800654a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 800654e:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8006550:	f7ff ffc6 	bl	80064e0 <R3_1_WriteTIMRegisters>
}
 8006554:	bd10      	pop	{r4, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 8006556:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 800655a:	eba1 0c0c 	sub.w	ip, r1, ip
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 800655e:	fa1f fc8c 	uxth.w	ip, ip
 8006562:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8006566:	d906      	bls.n	8006576 <R3_1_SetADCSampPointSectX+0x4a>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 8006568:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800656c:	1ac9      	subs	r1, r1, r3
 800656e:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8006570:	f7ff ffb6 	bl	80064e0 <R3_1_WriteTIMRegisters>
}
 8006574:	bd10      	pop	{r4, pc}
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 8006576:	440b      	add	r3, r1
 8006578:	b299      	uxth	r1, r3
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 800657a:	458e      	cmp	lr, r1
 800657c:	d8e8      	bhi.n	8006550 <R3_1_SetADCSampPointSectX+0x24>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800657e:	43c9      	mvns	r1, r1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8006580:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8006584:	eb01 014e 	add.w	r1, r1, lr, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8006588:	66c3      	str	r3, [r0, #108]	; 0x6c
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800658a:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 800658c:	f7ff ffa8 	bl	80064e0 <R3_1_WriteTIMRegisters>
}
 8006590:	bd10      	pop	{r4, pc}
 8006592:	bf00      	nop

08006594 <R3_1_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006594:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 8006596:	b430      	push	{r4, r5}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006598:	e9d1 2400 	ldrd	r2, r4, [r1]
{
 800659c:	4603      	mov	r3, r0
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 800659e:	6890      	ldr	r0, [r2, #8]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 80065a0:	6edd      	ldr	r5, [r3, #108]	; 0x6c
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 80065a2:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 80065a6:	6090      	str	r0, [r2, #8]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 80065a8:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
 80065ac:	3008      	adds	r0, #8
 80065ae:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80065b2:	6391      	str	r1, [r2, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 80065b4:	6a20      	ldr	r0, [r4, #32]
 80065b6:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 80065ba:	6220      	str	r0, [r4, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 80065bc:	6891      	ldr	r1, [r2, #8]
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80065be:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 80065c2:	4329      	orrs	r1, r5
 80065c4:	6091      	str	r1, [r2, #8]
}
 80065c6:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80065ca:	66dc      	str	r4, [r3, #108]	; 0x6c
}
 80065cc:	bc30      	pop	{r4, r5}
 80065ce:	4770      	bx	lr

080065d0 <R3_1_BRK_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 80065d0:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
 80065d4:	b923      	cbnz	r3, 80065e0 <R3_1_BRK_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80065d6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80065d8:	f893 206e 	ldrb.w	r2, [r3, #110]	; 0x6e
 80065dc:	2a02      	cmp	r2, #2
 80065de:	d004      	beq.n	80065ea <R3_1_BRK_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 80065e0:	2301      	movs	r3, #1
 80065e2:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
}
 80065e6:	3046      	adds	r0, #70	; 0x46
 80065e8:	4770      	bx	lr
{
 80065ea:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80065ec:	e9d3 4105 	ldrd	r4, r1, [r3, #20]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80065f0:	689d      	ldr	r5, [r3, #8]
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	0424      	lsls	r4, r4, #16
 80065f6:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80065f8:	e9d3 5403 	ldrd	r5, r4, [r3, #12]
 80065fc:	0409      	lsls	r1, r1, #16
 80065fe:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 8006600:	2301      	movs	r3, #1
 8006602:	61a9      	str	r1, [r5, #24]
}
 8006604:	3046      	adds	r0, #70	; 0x46
 8006606:	61a2      	str	r2, [r4, #24]
  pHandle->OverCurrentFlag = true;
 8006608:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
}
 800660c:	bc30      	pop	{r4, r5}
 800660e:	4770      	bx	lr

08006610 <R3_1_IsOverCurrentOccurred>:
  if (pHandle->OverCurrentFlag == true )
 8006610:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8006614:	b90b      	cbnz	r3, 800661a <R3_1_IsOverCurrentOccurred+0xa>
  uint16_t retVal = MC_NO_FAULTS;
 8006616:	4618      	mov	r0, r3
}
 8006618:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 800661a:	2300      	movs	r3, #0
 800661c:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    retVal |= MC_BREAK_IN;
 8006620:	2040      	movs	r0, #64	; 0x40
 8006622:	4770      	bx	lr

08006624 <R3_1_RLDetectionModeEnable>:
  if (pHandle->_Super.RLDetectionMode == false)
 8006624:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 8006628:	b430      	push	{r4, r5}
  if (pHandle->_Super.RLDetectionMode == false)
 800662a:	2900      	cmp	r1, #0
 800662c:	d134      	bne.n	8006698 <R3_1_RLDetectionModeEnable+0x74>
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800662e:	6f85      	ldr	r5, [r0, #120]	; 0x78
 8006630:	686b      	ldr	r3, [r5, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006632:	699a      	ldr	r2, [r3, #24]
 8006634:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006638:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800663c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800663e:	6a1a      	ldr	r2, [r3, #32]
 8006640:	f042 0201 	orr.w	r2, r2, #1
 8006644:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006646:	6a1a      	ldr	r2, [r3, #32]
 8006648:	f022 0204 	bic.w	r2, r2, #4
 800664c:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800664e:	6359      	str	r1, [r3, #52]	; 0x34
    if ((pHandle->pParams_str->LowSideOutputs)== LS_PWM_TIMER)
 8006650:	f895 206e 	ldrb.w	r2, [r5, #110]	; 0x6e
 8006654:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006656:	f103 0418 	add.w	r4, r3, #24
 800665a:	d02a      	beq.n	80066b2 <R3_1_RLDetectionModeEnable+0x8e>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800665c:	2a02      	cmp	r2, #2
 800665e:	d10d      	bne.n	800667c <R3_1_RLDetectionModeEnable+0x58>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006660:	699a      	ldr	r2, [r3, #24]
 8006662:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8006666:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800666a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800666c:	6a1a      	ldr	r2, [r3, #32]
 800666e:	f042 0210 	orr.w	r2, r2, #16
 8006672:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006674:	6a1a      	ldr	r2, [r3, #32]
 8006676:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800667a:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800667c:	6862      	ldr	r2, [r4, #4]
 800667e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006682:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8006686:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006688:	6a1a      	ldr	r2, [r3, #32]
 800668a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800668e:	621a      	str	r2, [r3, #32]
 8006690:	6a1a      	ldr	r2, [r3, #32]
 8006692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006696:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8006698:	4b0d      	ldr	r3, [pc, #52]	; (80066d0 <R3_1_RLDetectionModeEnable+0xac>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 800669a:	490e      	ldr	r1, [pc, #56]	; (80066d4 <R3_1_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800669c:	4a0e      	ldr	r2, [pc, #56]	; (80066d8 <R3_1_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800669e:	4c0f      	ldr	r4, [pc, #60]	; (80066dc <R3_1_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 80066a0:	6143      	str	r3, [r0, #20]
  pHandle->_Super.RLDetectionMode = true;
 80066a2:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 80066a4:	6044      	str	r4, [r0, #4]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80066a6:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 80066aa:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 80066ac:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 80066b0:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80066b2:	699a      	ldr	r2, [r3, #24]
 80066b4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80066b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066bc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 80066be:	6a1a      	ldr	r2, [r3, #32]
 80066c0:	f022 0210 	bic.w	r2, r2, #16
 80066c4:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 80066c6:	6a1a      	ldr	r2, [r3, #32]
 80066c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066cc:	621a      	str	r2, [r3, #32]
}
 80066ce:	e7d5      	b.n	800667c <R3_1_RLDetectionModeEnable+0x58>
 80066d0:	08006251 	.word	0x08006251
 80066d4:	08006299 	.word	0x08006299
 80066d8:	0800618d 	.word	0x0800618d
 80066dc:	080061fd 	.word	0x080061fd

080066e0 <R3_1_RLDetectionModeDisable>:
  if (pHandle->_Super.RLDetectionMode == true)
 80066e0:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d048      	beq.n	800677a <R3_1_RLDetectionModeDisable+0x9a>
{
 80066e8:	b410      	push	{r4}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80066ea:	6f81      	ldr	r1, [r0, #120]	; 0x78
 80066ec:	684b      	ldr	r3, [r1, #4]
    while ((TIMx->CR1 & DIR_MASK) == 0u)
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	06d4      	lsls	r4, r2, #27
 80066f2:	d5fc      	bpl.n	80066ee <R3_1_RLDetectionModeDisable+0xe>
    while ((TIMx->CR1 & DIR_MASK) == DIR_MASK)
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	06d2      	lsls	r2, r2, #27
 80066f8:	d4fc      	bmi.n	80066f4 <R3_1_RLDetectionModeDisable+0x14>
    TIMx->RCR = pHandle->pParams_str->RepetitionCounter;
 80066fa:	f891 206d 	ldrb.w	r2, [r1, #109]	; 0x6d
 80066fe:	631a      	str	r2, [r3, #48]	; 0x30
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006700:	699a      	ldr	r2, [r3, #24]
 8006702:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006706:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800670a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800670c:	6a1a      	ldr	r2, [r3, #32]
 800670e:	f042 0201 	orr.w	r2, r2, #1
 8006712:	621a      	str	r2, [r3, #32]
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 8006714:	f891 206e 	ldrb.w	r2, [r1, #110]	; 0x6e
 8006718:	2a01      	cmp	r2, #1
 800671a:	d02f      	beq.n	800677c <R3_1_RLDetectionModeDisable+0x9c>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800671c:	2a02      	cmp	r2, #2
 800671e:	d053      	beq.n	80067c8 <R3_1_RLDetectionModeDisable+0xe8>
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8006720:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
 8006724:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006726:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006728:	699c      	ldr	r4, [r3, #24]
 800672a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 800672e:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8006732:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006734:	6a1c      	ldr	r4, [r3, #32]
 8006736:	f044 0410 	orr.w	r4, r4, #16
 800673a:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800673c:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800673e:	69dc      	ldr	r4, [r3, #28]
 8006740:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8006744:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8006748:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800674a:	6a1c      	ldr	r4, [r3, #32]
 800674c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8006750:	621c      	str	r4, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont(pHandle->pParams_str->ADCx,
 8006752:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006754:	63da      	str	r2, [r3, #60]	; 0x3c
  MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
 8006756:	684b      	ldr	r3, [r1, #4]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8006758:	4a2e      	ldr	r2, [pc, #184]	; (8006814 <R3_1_RLDetectionModeDisable+0x134>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800675a:	4c2f      	ldr	r4, [pc, #188]	; (8006818 <R3_1_RLDetectionModeDisable+0x138>)
 800675c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006760:	604b      	str	r3, [r1, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 8006762:	492e      	ldr	r1, [pc, #184]	; (800681c <R3_1_RLDetectionModeDisable+0x13c>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8006764:	6042      	str	r2, [r0, #4]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006766:	4a2e      	ldr	r2, [pc, #184]	; (8006820 <R3_1_RLDetectionModeDisable+0x140>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8006768:	6144      	str	r4, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 800676a:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800676c:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8006770:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8006774:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8006778:	4770      	bx	lr
 800677a:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800677c:	6a1c      	ldr	r4, [r3, #32]
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 800677e:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
 8006782:	f044 0404 	orr.w	r4, r4, #4
 8006786:	0852      	lsrs	r2, r2, #1
 8006788:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800678a:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800678c:	699c      	ldr	r4, [r3, #24]
 800678e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8006792:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8006796:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006798:	6a1c      	ldr	r4, [r3, #32]
 800679a:	f044 0410 	orr.w	r4, r4, #16
 800679e:	621c      	str	r4, [r3, #32]
 80067a0:	6a1c      	ldr	r4, [r3, #32]
 80067a2:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80067a6:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80067a8:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80067aa:	69dc      	ldr	r4, [r3, #28]
 80067ac:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80067b0:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 80067b4:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80067b6:	6a1c      	ldr	r4, [r3, #32]
 80067b8:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80067bc:	621c      	str	r4, [r3, #32]
 80067be:	6a1c      	ldr	r4, [r3, #32]
 80067c0:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80067c4:	621c      	str	r4, [r3, #32]
}
 80067c6:	e7c4      	b.n	8006752 <R3_1_RLDetectionModeDisable+0x72>
  CLEAR_BIT(TIMx->CCER, Channels);
 80067c8:	6a1c      	ldr	r4, [r3, #32]
 80067ca:	f8b0 2070 	ldrh.w	r2, [r0, #112]	; 0x70
 80067ce:	f024 0404 	bic.w	r4, r4, #4
 80067d2:	0852      	lsrs	r2, r2, #1
 80067d4:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80067d6:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80067d8:	699c      	ldr	r4, [r3, #24]
 80067da:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80067de:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 80067e2:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80067e4:	6a1c      	ldr	r4, [r3, #32]
 80067e6:	f044 0410 	orr.w	r4, r4, #16
 80067ea:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80067ec:	6a1c      	ldr	r4, [r3, #32]
 80067ee:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 80067f2:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80067f4:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80067f6:	69dc      	ldr	r4, [r3, #28]
 80067f8:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80067fc:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8006800:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006802:	6a1c      	ldr	r4, [r3, #32]
 8006804:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8006808:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800680a:	6a1c      	ldr	r4, [r3, #32]
 800680c:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8006810:	621c      	str	r4, [r3, #32]
}
 8006812:	e79e      	b.n	8006752 <R3_1_RLDetectionModeDisable+0x72>
 8006814:	08005e8d 	.word	0x08005e8d
 8006818:	080060a5 	.word	0x080060a5
 800681c:	080060f9 	.word	0x080060f9
 8006820:	0800618d 	.word	0x0800618d

08006824 <R3_1_RLDetectionModeSetDuty>:
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006824:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006828:	6f82      	ldr	r2, [r0, #120]	; 0x78
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800682a:	fb03 f101 	mul.w	r1, r3, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800682e:	6852      	ldr	r2, [r2, #4]
  if (pHandle->_Super.SWerror == 1u)
 8006830:	8f03      	ldrh	r3, [r0, #56]	; 0x38
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006832:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 8006834:	f04f 0c03 	mov.w	ip, #3
 8006838:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 800683c:	8641      	strh	r1, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 800683e:	6351      	str	r1, [r2, #52]	; 0x34
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006840:	6a12      	ldr	r2, [r2, #32]
  if (pHandle->_Super.SWerror == 1u)
 8006842:	2b01      	cmp	r3, #1
    hAux = MC_FOC_DURATION;
 8006844:	bf12      	itee	ne
 8006846:	f3c2 3300 	ubfxne	r3, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 800684a:	2200      	moveq	r2, #0
 800684c:	8702      	strheq	r2, [r0, #56]	; 0x38
}
 800684e:	4618      	mov	r0, r3
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop

08006854 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8006854:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8006858:	8b82      	ldrh	r2, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800685a:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800685c:	4494      	add	ip, r2
{
 800685e:	b410      	push	{r4}
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8006860:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006864:	b14b      	cbz	r3, 800687a <RVBS_Clear+0x26>
  {
    pHandle->aBuffer[index] = aux;
 8006866:	6a04      	ldr	r4, [r0, #32]
 8006868:	2300      	movs	r3, #0
 800686a:	b29a      	uxth	r2, r3
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800686c:	3301      	adds	r3, #1
    pHandle->aBuffer[index] = aux;
 800686e:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8006872:	8b01      	ldrh	r1, [r0, #24]
 8006874:	b29a      	uxth	r2, r3
 8006876:	4291      	cmp	r1, r2
 8006878:	d8f7      	bhi.n	800686a <RVBS_Clear+0x16>
  }
  pHandle->_Super.LatestConv = aux;
 800687a:	2300      	movs	r3, #0
 800687c:	f36c 030f 	bfi	r3, ip, #0, #16
 8006880:	f36c 431f 	bfi	r3, ip, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8006884:	2200      	movs	r2, #0
}
 8006886:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.LatestConv = aux;
 800688a:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 800688c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop

08006894 <RVBS_Init>:
{
 8006894:	b510      	push	{r4, lr}
 8006896:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8006898:	300c      	adds	r0, #12
 800689a:	f7fb fb99 	bl	8001fd0 <RCM_RegisterRegConv>
 800689e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 80068a2:	4620      	mov	r0, r4
 80068a4:	f7ff ffd6 	bl	8006854 <RVBS_Clear>
}
 80068a8:	bd10      	pop	{r4, pc}
 80068aa:	bf00      	nop

080068ac <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 80068ac:	88c3      	ldrh	r3, [r0, #6]
 80068ae:	8b42      	ldrh	r2, [r0, #26]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d305      	bcc.n	80068c0 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 80068b4:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 80068b6:	4298      	cmp	r0, r3
 80068b8:	bf8c      	ite	hi
 80068ba:	2004      	movhi	r0, #4
 80068bc:	2000      	movls	r0, #0
 80068be:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 80068c0:	2002      	movs	r0, #2
  }
  return fault;
}
 80068c2:	4770      	bx	lr

080068c4 <RVBS_CalcAvVbus>:
{
 80068c4:	b570      	push	{r4, r5, r6, lr}
 80068c6:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80068c8:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80068cc:	f7fb fc5c 	bl	8002188 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 80068d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068d4:	4298      	cmp	r0, r3
 80068d6:	d01b      	beq.n	8006910 <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 80068d8:	6a26      	ldr	r6, [r4, #32]
 80068da:	f894 e025 	ldrb.w	lr, [r4, #37]	; 0x25
 80068de:	f826 001e 	strh.w	r0, [r6, lr, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80068e2:	8b25      	ldrh	r5, [r4, #24]
 80068e4:	b1cd      	cbz	r5, 800691a <RVBS_CalcAvVbus+0x56>
 80068e6:	2300      	movs	r3, #0
    wtemp = 0;
 80068e8:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 80068ea:	f836 c013 	ldrh.w	ip, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80068ee:	3301      	adds	r3, #1
 80068f0:	b2d9      	uxtb	r1, r3
 80068f2:	42a9      	cmp	r1, r5
      wtemp += pHandle->aBuffer[i];
 80068f4:	4462      	add	r2, ip
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 80068f6:	460b      	mov	r3, r1
 80068f8:	d3f7      	bcc.n	80068ea <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 80068fa:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 80068fe:	1e6b      	subs	r3, r5, #1
 8006900:	459e      	cmp	lr, r3
    pHandle->_Super.LatestConv = hAux;
 8006902:	80a0      	strh	r0, [r4, #4]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8006904:	80e2      	strh	r2, [r4, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8006906:	da0a      	bge.n	800691e <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 8006908:	f10e 0e01 	add.w	lr, lr, #1
 800690c:	f884 e025 	strb.w	lr, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8006910:	4620      	mov	r0, r4
 8006912:	f7ff ffcb 	bl	80068ac <RVBS_CheckFaultState>
 8006916:	8120      	strh	r0, [r4, #8]
}
 8006918:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800691a:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 800691c:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 800691e:	2300      	movs	r3, #0
 8006920:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8006924:	4620      	mov	r0, r4
 8006926:	f7ff ffc1 	bl	80068ac <RVBS_CheckFaultState>
 800692a:	8120      	strh	r0, [r4, #8]
}
 800692c:	bd70      	pop	{r4, r5, r6, pc}
 800692e:	bf00      	nop

08006930 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8006930:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8006932:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8006934:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8006938:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 800693c:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800693e:	4770      	bx	lr

08006940 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8006940:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop

08006948 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8006948:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop

08006950 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8006950:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop

08006958 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8006958:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800695c:	8a81      	ldrh	r1, [r0, #20]
{
 800695e:	b500      	push	{lr}
  if ( *pMecSpeedUnit < 0 )
 8006960:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 8006962:	bfb8      	it	lt
 8006964:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8006966:	f8b0 e016 	ldrh.w	lr, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800696a:	f890 c003 	ldrb.w	ip, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800696e:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8006970:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8006972:	459e      	cmp	lr, r3
 8006974:	d819      	bhi.n	80069aa <SPD_IsMecSpeedReliable+0x52>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8006976:	4299      	cmp	r1, r3
 8006978:	bf2c      	ite	cs
 800697a:	2300      	movcs	r3, #0
 800697c:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800697e:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8006982:	f8b0 e018 	ldrh.w	lr, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8006986:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8006988:	bfb8      	it	lt
 800698a:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 800698c:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800698e:	458e      	cmp	lr, r1
 8006990:	d300      	bcc.n	8006994 <SPD_IsMecSpeedReliable+0x3c>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8006992:	b163      	cbz	r3, 80069ae <SPD_IsMecSpeedReliable+0x56>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8006994:	4594      	cmp	ip, r2
 8006996:	d901      	bls.n	800699c <SPD_IsMecSpeedReliable+0x44>
    {
      bSpeedErrorNumber++;
 8006998:	3201      	adds	r2, #1
 800699a:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800699c:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 800699e:	ebb2 000c 	subs.w	r0, r2, ip
 80069a2:	bf18      	it	ne
 80069a4:	2001      	movne	r0, #1
 80069a6:	f85d fb04 	ldr.w	pc, [sp], #4
    SpeedError = true;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e7e7      	b.n	800697e <SPD_IsMecSpeedReliable+0x26>
      bSpeedErrorNumber = 0u;
 80069ae:	4594      	cmp	ip, r2
 80069b0:	bf88      	it	hi
 80069b2:	2200      	movhi	r2, #0
  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80069b4:	7002      	strb	r2, [r0, #0]
}
 80069b6:	ebb2 000c 	subs.w	r0, r2, ip
 80069ba:	bf18      	it	ne
 80069bc:	2001      	movne	r0, #1
 80069be:	f85d fb04 	ldr.w	pc, [sp], #4
 80069c2:	bf00      	nop

080069c4 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 80069c4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80069c8:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 80069cc:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80069d0:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 80069d4:	b200      	sxth	r0, r0
 80069d6:	4770      	bx	lr

080069d8 <STC_Init>:
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80069d8:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
  pHandle->PISpeed = pPI;
 80069dc:	6101      	str	r1, [r0, #16]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80069de:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
  pHandle->SPD = SPD_Handle;
 80069e2:	6142      	str	r2, [r0, #20]
{
 80069e4:	b410      	push	{r4}
  pHandle->Mode = pHandle->ModeDefault;
 80069e6:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 80069ea:	7004      	strb	r4, [r0, #0]
  pHandle->TargetFinal = 0;
 80069ec:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80069ee:	ea4f 440c 	mov.w	r4, ip, lsl #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80069f2:	0409      	lsls	r1, r1, #16
 80069f4:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->TargetFinal = 0;
 80069f8:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 80069fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->RampRemainingStep = 0u;
 80069fe:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8006a00:	6183      	str	r3, [r0, #24]
}
 8006a02:	4770      	bx	lr

08006a04 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8006a04:	6940      	ldr	r0, [r0, #20]
 8006a06:	4770      	bx	lr

08006a08 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8006a08:	7803      	ldrb	r3, [r0, #0]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d000      	beq.n	8006a10 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8006a0e:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8006a10:	6900      	ldr	r0, [r0, #16]
 8006a12:	2100      	movs	r1, #0
 8006a14:	f7fe bff2 	b.w	80059fc <PID_SetIntegralTerm>

08006a18 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8006a18:	6840      	ldr	r0, [r0, #4]
 8006a1a:	2800      	cmp	r0, #0
 8006a1c:	bfbc      	itt	lt
 8006a1e:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006a22:	30ff      	addlt	r0, #255	; 0xff
}
 8006a24:	1400      	asrs	r0, r0, #16
 8006a26:	4770      	bx	lr

08006a28 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8006a28:	6880      	ldr	r0, [r0, #8]
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	bfbc      	itt	lt
 8006a2e:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006a32:	30ff      	addlt	r0, #255	; 0xff
}
 8006a34:	1400      	asrs	r0, r0, #16
 8006a36:	4770      	bx	lr

08006a38 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006a38:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 8006a3a:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006a3c:	60c3      	str	r3, [r0, #12]
}
 8006a3e:	4770      	bx	lr

08006a40 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8006a40:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006a42:	7803      	ldrb	r3, [r0, #0]
{
 8006a44:	4604      	mov	r4, r0
 8006a46:	460d      	mov	r5, r1
 8006a48:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006a4a:	b323      	cbz	r3, 8006a96 <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006a4c:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006a4e:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006a50:	2800      	cmp	r0, #0
 8006a52:	bfbc      	itt	lt
 8006a54:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8006a58:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006a5a:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8006a5c:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8006a60:	dd01      	ble.n	8006a66 <STC_ExecRamp+0x26>
      AllowedRange = false;
 8006a62:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8006a64:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8006a66:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8006a6a:	428b      	cmp	r3, r1
 8006a6c:	dcf9      	bgt.n	8006a62 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8006a6e:	8c23      	ldrh	r3, [r4, #32]
 8006a70:	4299      	cmp	r1, r3
 8006a72:	da03      	bge.n	8006a7c <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8006a74:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8006a78:	428b      	cmp	r3, r1
 8006a7a:	dbf2      	blt.n	8006a62 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 8006a7c:	b9ae      	cbnz	r6, 8006aaa <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8006a7e:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8006a80:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8006a82:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8006a84:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8006a88:	bf0c      	ite	eq
 8006a8a:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 8006a8c:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 8006a8e:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8006a90:	61a3      	str	r3, [r4, #24]
 8006a92:	2001      	movs	r0, #1
}
 8006a94:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8006a96:	f7ff ffc7 	bl	8006a28 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8006a9a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006a9c:	429d      	cmp	r5, r3
 8006a9e:	dce0      	bgt.n	8006a62 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8006aa0:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8006aa4:	42ab      	cmp	r3, r5
 8006aa6:	dcdc      	bgt.n	8006a62 <STC_ExecRamp+0x22>
 8006aa8:	e7e8      	b.n	8006a7c <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006aaa:	8ba3      	ldrh	r3, [r4, #28]
      pHandle->TargetFinal = hTargetFinal;
 8006aac:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 8006aae:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 8006ab2:	4e06      	ldr	r6, [pc, #24]	; (8006acc <STC_ExecRamp+0x8c>)
 8006ab4:	fba6 2303 	umull	r2, r3, r6, r3
 8006ab8:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 8006aba:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 8006abc:	1a28      	subs	r0, r5, r0
 8006abe:	0400      	lsls	r0, r0, #16
      pHandle->RampRemainingStep++;
 8006ac0:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 8006ac2:	fb90 f0f3 	sdiv	r0, r0, r3
      pHandle->IncDecAmount = wAux1;
 8006ac6:	61a0      	str	r0, [r4, #24]
 8006ac8:	2001      	movs	r0, #1
}
 8006aca:	bd70      	pop	{r4, r5, r6, pc}
 8006acc:	10624dd3 	.word	0x10624dd3

08006ad0 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8006ad4:	6183      	str	r3, [r0, #24]
}
 8006ad6:	4770      	bx	lr

08006ad8 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006ad8:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 8006ada:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8006ade:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8006ae0:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8006ae2:	2a00      	cmp	r2, #0
 8006ae4:	bf08      	it	eq
 8006ae6:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 8006ae8:	2b01      	cmp	r3, #1
{
 8006aea:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 8006aec:	d90c      	bls.n	8006b08 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 8006aee:	6981      	ldr	r1, [r0, #24]
 8006af0:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8006af2:	3b01      	subs	r3, #1
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006af4:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 8006af6:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006af8:	4630      	mov	r0, r6
 8006afa:	db09      	blt.n	8006b10 <STC_CalcTorqueReference+0x38>
 8006afc:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 8006afe:	2a01      	cmp	r2, #1
 8006b00:	d00a      	beq.n	8006b18 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8006b02:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8006b04:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 8006b06:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8006b08:	d012      	beq.n	8006b30 <STC_CalcTorqueReference+0x58>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8006b0a:	2e00      	cmp	r6, #0
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	daf5      	bge.n	8006afc <STC_CalcTorqueReference+0x24>
 8006b10:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 8006b14:	30ff      	adds	r0, #255	; 0xff
 8006b16:	e7f1      	b.n	8006afc <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8006b18:	6960      	ldr	r0, [r4, #20]
 8006b1a:	f7ff ff15 	bl	8006948 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8006b1e:	1a29      	subs	r1, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8006b20:	b209      	sxth	r1, r1
 8006b22:	6920      	ldr	r0, [r4, #16]
 8006b24:	f7fe ff76 	bl	8005a14 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8006b28:	0403      	lsls	r3, r0, #16
 8006b2a:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006b30:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8006b34:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8006b36:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8006b38:	60c3      	str	r3, [r0, #12]
 8006b3a:	e7e0      	b.n	8006afe <STC_CalcTorqueReference+0x26>

08006b3c <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 8006b3c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop

08006b44 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8006b44:	8bc0      	ldrh	r0, [r0, #30]
 8006b46:	4770      	bx	lr

08006b48 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8006b48:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop

08006b50 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8006b50:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8006b54:	2200      	movs	r2, #0
 8006b56:	b299      	uxth	r1, r3
 8006b58:	f361 020f 	bfi	r2, r1, #0, #16
 8006b5c:	0c1b      	lsrs	r3, r3, #16
 8006b5e:	f363 421f 	bfi	r2, r3, #16, #16
{
 8006b62:	b082      	sub	sp, #8
}
 8006b64:	4610      	mov	r0, r2
 8006b66:	b002      	add	sp, #8
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop

08006b6c <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8006b70:	6940      	ldr	r0, [r0, #20]
 8006b72:	f7ff fee9 	bl	8006948 <SPD_GetAvrgMecSpeedUnit>
 8006b76:	0400      	lsls	r0, r0, #16
 8006b78:	6060      	str	r0, [r4, #4]
}
 8006b7a:	bd10      	pop	{r4, pc}

08006b7c <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8006b80:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop

08006b88 <STM_FaultProcessing>:
                             hResetErrors )
{
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006b88:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8006b8a:	f8b0 c004 	ldrh.w	ip, [r0, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006b8e:	430b      	orrs	r3, r1
 8006b90:	ea23 0202 	bic.w	r2, r3, r2
  State_t LocalState =  pHandle->bState;
 8006b94:	7803      	ldrb	r3, [r0, #0]
  pHandle->hFaultOccurred |= hSetErrors;
 8006b96:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006b9a:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 8006b9c:	2b0a      	cmp	r3, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8006b9e:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8006ba0:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 8006ba2:	d006      	beq.n	8006bb2 <STM_FaultProcessing+0x2a>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8006ba4:	b90a      	cbnz	r2, 8006baa <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 8006baa:	230a      	movs	r3, #10
 8006bac:	7003      	strb	r3, [r0, #0]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 8006bb2:	2a00      	cmp	r2, #0
 8006bb4:	d1f7      	bne.n	8006ba6 <STM_FaultProcessing+0x1e>
      pHandle->bState = FAULT_OVER;
 8006bb6:	230b      	movs	r3, #11
 8006bb8:	7003      	strb	r3, [r0, #0]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop

08006bc0 <STM_NextState>:
{
 8006bc0:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 8006bc2:	7803      	ldrb	r3, [r0, #0]
 8006bc4:	2b14      	cmp	r3, #20
 8006bc6:	d810      	bhi.n	8006bea <STM_NextState+0x2a>
 8006bc8:	e8df f003 	tbb	[pc, r3]
 8006bcc:	200d3457 	.word	0x200d3457
 8006bd0:	500d532a 	.word	0x500d532a
 8006bd4:	0f0f484d 	.word	0x0f0f484d
 8006bd8:	455e0b1b 	.word	0x455e0b1b
 8006bdc:	3b3f6342 	.word	0x3b3f6342
 8006be0:	31          	.byte	0x31
 8006be1:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8006be2:	290e      	cmp	r1, #14
 8006be4:	d00f      	beq.n	8006c06 <STM_NextState+0x46>
      if ( bState == ANY_STOP )
 8006be6:	2907      	cmp	r1, #7
 8006be8:	d00d      	beq.n	8006c06 <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006bea:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d014      	beq.n	8006c1c <STM_NextState+0x5c>
 8006bf2:	2907      	cmp	r1, #7
 8006bf4:	d012      	beq.n	8006c1c <STM_NextState+0x5c>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2180      	movs	r1, #128	; 0x80
 8006bfa:	f7ff ffc5 	bl	8006b88 <STM_FaultProcessing>
 8006bfe:	2000      	movs	r0, #0
}
 8006c00:	bd08      	pop	{r3, pc}
      if ( bState == IDLE )
 8006c02:	2900      	cmp	r1, #0
 8006c04:	d1f1      	bne.n	8006bea <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 8006c06:	7001      	strb	r1, [r0, #0]
 8006c08:	2001      	movs	r0, #1
}
 8006c0a:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8006c0c:	2911      	cmp	r1, #17
 8006c0e:	d8f2      	bhi.n	8006bf6 <STM_NextState+0x36>
 8006c10:	4b23      	ldr	r3, [pc, #140]	; (8006ca0 <STM_NextState+0xe0>)
 8006c12:	40cb      	lsrs	r3, r1
 8006c14:	07da      	lsls	r2, r3, #31
 8006c16:	d4f6      	bmi.n	8006c06 <STM_NextState+0x46>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006c18:	2903      	cmp	r1, #3
 8006c1a:	d1ec      	bne.n	8006bf6 <STM_NextState+0x36>
 8006c1c:	2000      	movs	r0, #0
}
 8006c1e:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8006c20:	2913      	cmp	r1, #19
 8006c22:	d0f0      	beq.n	8006c06 <STM_NextState+0x46>
 8006c24:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8006c28:	2b05      	cmp	r3, #5
 8006c2a:	d1e0      	bne.n	8006bee <STM_NextState+0x2e>
 8006c2c:	e7eb      	b.n	8006c06 <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8006c2e:	2912      	cmp	r1, #18
 8006c30:	d1d9      	bne.n	8006be6 <STM_NextState+0x26>
 8006c32:	e7e8      	b.n	8006c06 <STM_NextState+0x46>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8006c34:	2907      	cmp	r1, #7
 8006c36:	d0e6      	beq.n	8006c06 <STM_NextState+0x46>
 8006c38:	f1a1 030d 	sub.w	r3, r1, #13
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d8d4      	bhi.n	8006bea <STM_NextState+0x2a>
 8006c40:	e7e1      	b.n	8006c06 <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8006c42:	1f0b      	subs	r3, r1, #4
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d8ce      	bhi.n	8006be6 <STM_NextState+0x26>
 8006c48:	e7dd      	b.n	8006c06 <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8006c4a:	2904      	cmp	r1, #4
 8006c4c:	d1cb      	bne.n	8006be6 <STM_NextState+0x26>
 8006c4e:	e7da      	b.n	8006c06 <STM_NextState+0x46>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8006c50:	2911      	cmp	r1, #17
 8006c52:	d1c8      	bne.n	8006be6 <STM_NextState+0x26>
 8006c54:	e7d7      	b.n	8006c06 <STM_NextState+0x46>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8006c56:	2902      	cmp	r1, #2
 8006c58:	d1c5      	bne.n	8006be6 <STM_NextState+0x26>
 8006c5a:	e7d4      	b.n	8006c06 <STM_NextState+0x46>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 8006c5c:	2900      	cmp	r1, #0
 8006c5e:	d0d2      	beq.n	8006c06 <STM_NextState+0x46>
 8006c60:	290c      	cmp	r1, #12
 8006c62:	d1c2      	bne.n	8006bea <STM_NextState+0x2a>
 8006c64:	e7cf      	b.n	8006c06 <STM_NextState+0x46>
      if ( bState == STOP_IDLE )
 8006c66:	2909      	cmp	r1, #9
 8006c68:	d1bf      	bne.n	8006bea <STM_NextState+0x2a>
 8006c6a:	e7cc      	b.n	8006c06 <STM_NextState+0x46>
      if ( bState == STOP )
 8006c6c:	2908      	cmp	r1, #8
 8006c6e:	d1bc      	bne.n	8006bea <STM_NextState+0x2a>
 8006c70:	e7c9      	b.n	8006c06 <STM_NextState+0x46>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8006c72:	1f8b      	subs	r3, r1, #6
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d8b8      	bhi.n	8006bea <STM_NextState+0x2a>
 8006c78:	e7c5      	b.n	8006c06 <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8006c7a:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d0c1      	beq.n	8006c06 <STM_NextState+0x46>
           || ( bState == ICLWAIT ) )
 8006c82:	290c      	cmp	r1, #12
 8006c84:	d1b5      	bne.n	8006bf2 <STM_NextState+0x32>
 8006c86:	e7be      	b.n	8006c06 <STM_NextState+0x46>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8006c88:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 8006c8c:	2b07      	cmp	r3, #7
 8006c8e:	d1ac      	bne.n	8006bea <STM_NextState+0x2a>
 8006c90:	e7b9      	b.n	8006c06 <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8006c92:	2914      	cmp	r1, #20
 8006c94:	d8a9      	bhi.n	8006bea <STM_NextState+0x2a>
 8006c96:	4b03      	ldr	r3, [pc, #12]	; (8006ca4 <STM_NextState+0xe4>)
 8006c98:	40cb      	lsrs	r3, r1
 8006c9a:	07db      	lsls	r3, r3, #31
 8006c9c:	d4b3      	bmi.n	8006c06 <STM_NextState+0x46>
 8006c9e:	e7a4      	b.n	8006bea <STM_NextState+0x2a>
 8006ca0:	00030092 	.word	0x00030092
 8006ca4:	00140080 	.word	0x00140080

08006ca8 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8006ca8:	7800      	ldrb	r0, [r0, #0]
 8006caa:	4770      	bx	lr

08006cac <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 8006cac:	7803      	ldrb	r3, [r0, #0]
 8006cae:	2b0b      	cmp	r3, #11
 8006cb0:	d001      	beq.n	8006cb6 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 8006cb2:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 8006cb4:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 8006cb6:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8006cb8:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 8006cba:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 8006cbc:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 8006cbe:	2001      	movs	r0, #1
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop

08006cc4 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 8006cc4:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 8006cc6:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 8006cc8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop

08006cd0 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8006cd0:	f7fe b9d0 	b.w	8005074 <FCP_Init>

08006cd4 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8006cd4:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
 8006cd8:	b16b      	cbz	r3, 8006cf6 <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8006cda:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8006cde:	4602      	mov	r2, r0
 8006ce0:	b1a3      	cbz	r3, 8006d0c <UFCP_TX_IRQ_Handler+0x38>
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d108      	bne.n	8006cf8 <UFCP_TX_IRQ_Handler+0x24>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 8006ce6:	7d41      	ldrb	r1, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8006ce8:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8006cec:	6041      	str	r1, [r0, #4]

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 8006cee:	3301      	adds	r3, #1
 8006cf0:	f882 3098 	strb.w	r3, [r2, #152]	; 0x98
 8006cf4:	4770      	bx	lr
 8006cf6:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8006cf8:	7d41      	ldrb	r1, [r0, #21]
 8006cfa:	3101      	adds	r1, #1
 8006cfc:	428b      	cmp	r3, r1
 8006cfe:	dc07      	bgt.n	8006d10 <UFCP_TX_IRQ_Handler+0x3c>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8006d00:	18c1      	adds	r1, r0, r3
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8006d02:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 8006d06:	7d09      	ldrb	r1, [r1, #20]
 8006d08:	6041      	str	r1, [r0, #4]
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8006d0a:	e7f0      	b.n	8006cee <UFCP_TX_IRQ_Handler+0x1a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8006d0c:	7d01      	ldrb	r1, [r0, #20]
        break;
 8006d0e:	e7eb      	b.n	8006ce8 <UFCP_TX_IRQ_Handler+0x14>
{
 8006d10:	b410      	push	{r4}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8006d12:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
 8006d16:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
 8006d1a:	604b      	str	r3, [r1, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8006d1c:	310c      	adds	r1, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1e:	e851 3f00 	ldrex	r3, [r1]
 8006d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d26:	e841 3400 	strex	r4, r3, [r1]
 8006d2a:	2c00      	cmp	r4, #0
 8006d2c:	d1f7      	bne.n	8006d1e <UFCP_TX_IRQ_Handler+0x4a>
    }
    else
    {
      LL_USART_DisableIT_TXE(pHandle->USARTx);
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8006d2e:	f882 4097 	strb.w	r4, [r2, #151]	; 0x97

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8006d32:	e9d2 0300 	ldrd	r0, r3, [r2]
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8006d36:	f85d 4b04 	ldr.w	r4, [sp], #4
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8006d3a:	4718      	bx	r3

08006d3c <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8006d3c:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8006d40:	b97b      	cbnz	r3, 8006d62 <UFCP_Receive+0x26>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006d42:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8006d46:	2301      	movs	r3, #1
 8006d48:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
 8006d4c:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4e:	e852 3f00 	ldrex	r3, [r2]
 8006d52:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d56:	e842 3100 	strex	r1, r3, [r2]
 8006d5a:	2900      	cmp	r1, #0
 8006d5c:	d1f7      	bne.n	8006d4e <UFCP_Receive+0x12>

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8006d5e:	2002      	movs	r0, #2
 8006d60:	4770      	bx	lr
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8006d62:	2001      	movs	r0, #1
  }

  return ret_val;
}
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop

08006d68 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8006d68:	b570      	push	{r4, r5, r6, lr}
 8006d6a:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8006d6c:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8006d70:	2800      	cmp	r0, #0
 8006d72:	d148      	bne.n	8006e06 <UFCP_Send+0x9e>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 8006d74:	1e58      	subs	r0, r3, #1
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8006d76:	f104 0616 	add.w	r6, r4, #22
    pHandle->TxFrame.Code = code;
 8006d7a:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8006d7c:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8006d7e:	b2c0      	uxtb	r0, r0
 8006d80:	b343      	cbz	r3, 8006dd4 <UFCP_Send+0x6c>
 8006d82:	1c51      	adds	r1, r2, #1
 8006d84:	1a75      	subs	r5, r6, r1
 8006d86:	2d02      	cmp	r5, #2
 8006d88:	d93f      	bls.n	8006e0a <UFCP_Send+0xa2>
 8006d8a:	2807      	cmp	r0, #7
 8006d8c:	d93d      	bls.n	8006e0a <UFCP_Send+0xa2>
 8006d8e:	089d      	lsrs	r5, r3, #2
 8006d90:	3d01      	subs	r5, #1
 8006d92:	b2e9      	uxtb	r1, r5
 8006d94:	1d15      	adds	r5, r2, #4
 8006d96:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8006d9a:	46b4      	mov	ip, r6
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	f851 eb04 	ldr.w	lr, [r1], #4
 8006da2:	f84c eb04 	str.w	lr, [ip], #4
 8006da6:	42a9      	cmp	r1, r5
 8006da8:	d1f9      	bne.n	8006d9e <UFCP_Send+0x36>
 8006daa:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 8006dae:	1a40      	subs	r0, r0, r1
 8006db0:	428b      	cmp	r3, r1
 8006db2:	b2c0      	uxtb	r0, r0
 8006db4:	eb02 0c01 	add.w	ip, r2, r1
 8006db8:	eb06 0501 	add.w	r5, r6, r1
 8006dbc:	d00a      	beq.n	8006dd4 <UFCP_Send+0x6c>
 8006dbe:	5c53      	ldrb	r3, [r2, r1]
 8006dc0:	5473      	strb	r3, [r6, r1]
 8006dc2:	b138      	cbz	r0, 8006dd4 <UFCP_Send+0x6c>
 8006dc4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8006dc8:	706b      	strb	r3, [r5, #1]
 8006dca:	2801      	cmp	r0, #1
 8006dcc:	d002      	beq.n	8006dd4 <UFCP_Send+0x6c>
 8006dce:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8006dd2:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8006dd4:	f104 0014 	add.w	r0, r4, #20
 8006dd8:	f7fe f960 	bl	800509c <FCP_CalcCRC>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8006ddc:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
 8006de0:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96

    pHandle->TxFrameLevel = 0;
 8006de4:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8006de6:	2301      	movs	r3, #1
    pHandle->TxFrameLevel = 0;
 8006de8:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8006dec:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
 8006df0:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	e852 3f00 	ldrex	r3, [r2]
 8006df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfa:	e842 3100 	strex	r1, r3, [r2]
 8006dfe:	2900      	cmp	r1, #0
 8006e00:	d1f7      	bne.n	8006df2 <UFCP_Send+0x8a>
 8006e02:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 8006e04:	bd70      	pop	{r4, r5, r6, pc}
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8006e06:	2001      	movs	r0, #1
}
 8006e08:	bd70      	pop	{r4, r5, r6, pc}
 8006e0a:	f104 0015 	add.w	r0, r4, #21
 8006e0e:	4413      	add	r3, r2
 8006e10:	e000      	b.n	8006e14 <UFCP_Send+0xac>
 8006e12:	3101      	adds	r1, #1
    while ( size-- ) *dest++ = *buffer++;
 8006e14:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8006e18:	f800 2f01 	strb.w	r2, [r0, #1]!
 8006e1c:	4299      	cmp	r1, r3
 8006e1e:	d1f8      	bne.n	8006e12 <UFCP_Send+0xaa>
 8006e20:	e7d8      	b.n	8006dd4 <UFCP_Send+0x6c>
 8006e22:	bf00      	nop

08006e24 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8006e24:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8006e28:	b90b      	cbnz	r3, 8006e2e <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006e2a:	4831      	ldr	r0, [pc, #196]	; (8006ef0 <UFCP_RX_IRQ_Handler+0xcc>)
}
 8006e2c:	4770      	bx	lr
{
 8006e2e:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8006e30:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 8006e34:	b083      	sub	sp, #12
 8006e36:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8006e38:	fa5f fc81 	uxtb.w	ip, r1
    switch ( pBaseHandle->RxFrameLevel )
 8006e3c:	b39b      	cbz	r3, 8006ea6 <UFCP_RX_IRQ_Handler+0x82>
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d03b      	beq.n	8006eba <UFCP_RX_IRQ_Handler+0x96>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8006e42:	f890 209a 	ldrb.w	r2, [r0, #154]	; 0x9a
 8006e46:	3201      	adds	r2, #1
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	dc08      	bgt.n	8006e5e <UFCP_RX_IRQ_Handler+0x3a>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8006e4c:	18c2      	adds	r2, r0, r3
          pBaseHandle->RxFrameLevel++;
 8006e4e:	3301      	adds	r3, #1
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006e50:	4827      	ldr	r0, [pc, #156]	; (8006ef0 <UFCP_RX_IRQ_Handler+0xcc>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8006e52:	f882 c099 	strb.w	ip, [r2, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 8006e56:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8006e5a:	b003      	add	sp, #12
 8006e5c:	bd30      	pop	{r4, r5, pc}
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006e5e:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8006e62:	f880 c11b 	strb.w	ip, [r0, #283]	; 0x11b
          pBaseHandle->RxTimeoutCountdown = 0;
 8006e66:	2300      	movs	r3, #0
 8006e68:	8243      	strh	r3, [r0, #18]
 8006e6a:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	e852 3f00 	ldrex	r3, [r2]
 8006e70:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e74:	e842 3100 	strex	r1, r3, [r2]
 8006e78:	2900      	cmp	r1, #0
 8006e7a:	d1f7      	bne.n	8006e6c <UFCP_RX_IRQ_Handler+0x48>
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8006e7c:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8006e80:	f104 0099 	add.w	r0, r4, #153	; 0x99
 8006e84:	f7fe f90a 	bl	800509c <FCP_CalcCRC>
 8006e88:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8006e8c:	4283      	cmp	r3, r0
 8006e8e:	d122      	bne.n	8006ed6 <UFCP_RX_IRQ_Handler+0xb2>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8006e90:	6820      	ldr	r0, [r4, #0]
 8006e92:	68a5      	ldr	r5, [r4, #8]
 8006e94:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8006e98:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 8006e9c:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 8006ea0:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8006ea2:	4814      	ldr	r0, [pc, #80]	; (8006ef4 <UFCP_RX_IRQ_Handler+0xd0>)
 8006ea4:	e7d9      	b.n	8006e5a <UFCP_RX_IRQ_Handler+0x36>
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8006ea6:	8a02      	ldrh	r2, [r0, #16]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8006ea8:	4813      	ldr	r0, [pc, #76]	; (8006ef8 <UFCP_RX_IRQ_Handler+0xd4>)
        pBaseHandle->RxFrame.Code = rx_byte;
 8006eaa:	f884 c099 	strb.w	ip, [r4, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 8006eae:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8006eb0:	8262      	strh	r2, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 8006eb2:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8006eb6:	b003      	add	sp, #12
 8006eb8:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8006eba:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 8006ebc:	f880 c09a 	strb.w	ip, [r0, #154]	; 0x9a
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8006ec0:	d404      	bmi.n	8006ecc <UFCP_RX_IRQ_Handler+0xa8>
        pBaseHandle->RxFrameLevel++;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006ec8:	4809      	ldr	r0, [pc, #36]	; (8006ef0 <UFCP_RX_IRQ_Handler+0xcc>)
 8006eca:	e7c6      	b.n	8006e5a <UFCP_RX_IRQ_Handler+0x36>
          pBaseHandle->RxFrameLevel =0 ;
 8006ecc:	2300      	movs	r3, #0
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8006ece:	4808      	ldr	r0, [pc, #32]	; (8006ef0 <UFCP_RX_IRQ_Handler+0xcc>)
          pBaseHandle->RxFrameLevel =0 ;
 8006ed0:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
 8006ed4:	e7c1      	b.n	8006e5a <UFCP_RX_IRQ_Handler+0x36>
            error_code = FCP_MSG_RX_BAD_CRC;
 8006ed6:	250a      	movs	r5, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006ed8:	2301      	movs	r3, #1
 8006eda:	f10d 0207 	add.w	r2, sp, #7
 8006ede:	21ff      	movs	r1, #255	; 0xff
 8006ee0:	4620      	mov	r0, r4
            error_code = FCP_MSG_RX_BAD_CRC;
 8006ee2:	f88d 5007 	strb.w	r5, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006ee6:	f7ff ff3f 	bl	8006d68 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8006eea:	4802      	ldr	r0, [pc, #8]	; (8006ef4 <UFCP_RX_IRQ_Handler+0xd0>)
  return ret_val;
 8006eec:	e7b5      	b.n	8006e5a <UFCP_RX_IRQ_Handler+0x36>
 8006eee:	bf00      	nop
 8006ef0:	080072cc 	.word	0x080072cc
 8006ef4:	080072d0 	.word	0x080072d0
 8006ef8:	080072ce 	.word	0x080072ce

08006efc <UFCP_OVR_IRQ_Handler>:
{
 8006efc:	b500      	push	{lr}
 8006efe:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 8006f00:	f04f 0c08 	mov.w	ip, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006f04:	2301      	movs	r3, #1
 8006f06:	f10d 0207 	add.w	r2, sp, #7
 8006f0a:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8006f0c:	f88d c007 	strb.w	ip, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8006f10:	f7ff ff2a 	bl	8006d68 <UFCP_Send>
}
 8006f14:	b003      	add	sp, #12
 8006f16:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f1a:	bf00      	nop

08006f1c <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 8006f22:	4770      	bx	lr

08006f24 <RUC_SetPhaseDurationms>:
 8006f24:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006f28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006f2c:	818a      	strh	r2, [r1, #12]
 8006f2e:	4770      	bx	lr

08006f30 <RUC_SetPhaseFinalMecSpeedUnit>:
 8006f30:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006f34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006f38:	81ca      	strh	r2, [r1, #14]
 8006f3a:	4770      	bx	lr

08006f3c <RUC_SetPhaseFinalTorque>:
 8006f3c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006f40:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006f44:	820a      	strh	r2, [r1, #16]
 8006f46:	4770      	bx	lr

08006f48 <RUC_GetPhaseDurationms>:
 8006f48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006f4c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006f50:	8988      	ldrh	r0, [r1, #12]
 8006f52:	4770      	bx	lr

08006f54 <RUC_GetPhaseFinalMecSpeedUnit>:
 8006f54:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006f58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006f5c:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop

08006f64 <RUC_GetPhaseFinalTorque>:
 8006f64:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006f68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006f6c:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop

08006f74 <RUC_GetNumberOfPhases>:
 8006f74:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop

08006f7c <__libc_init_array>:
 8006f7c:	b570      	push	{r4, r5, r6, lr}
 8006f7e:	4d0d      	ldr	r5, [pc, #52]	; (8006fb4 <__libc_init_array+0x38>)
 8006f80:	4c0d      	ldr	r4, [pc, #52]	; (8006fb8 <__libc_init_array+0x3c>)
 8006f82:	1b64      	subs	r4, r4, r5
 8006f84:	10a4      	asrs	r4, r4, #2
 8006f86:	2600      	movs	r6, #0
 8006f88:	42a6      	cmp	r6, r4
 8006f8a:	d109      	bne.n	8006fa0 <__libc_init_array+0x24>
 8006f8c:	4d0b      	ldr	r5, [pc, #44]	; (8006fbc <__libc_init_array+0x40>)
 8006f8e:	4c0c      	ldr	r4, [pc, #48]	; (8006fc0 <__libc_init_array+0x44>)
 8006f90:	f000 f820 	bl	8006fd4 <_init>
 8006f94:	1b64      	subs	r4, r4, r5
 8006f96:	10a4      	asrs	r4, r4, #2
 8006f98:	2600      	movs	r6, #0
 8006f9a:	42a6      	cmp	r6, r4
 8006f9c:	d105      	bne.n	8006faa <__libc_init_array+0x2e>
 8006f9e:	bd70      	pop	{r4, r5, r6, pc}
 8006fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fa4:	4798      	blx	r3
 8006fa6:	3601      	adds	r6, #1
 8006fa8:	e7ee      	b.n	8006f88 <__libc_init_array+0xc>
 8006faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fae:	4798      	blx	r3
 8006fb0:	3601      	adds	r6, #1
 8006fb2:	e7f2      	b.n	8006f9a <__libc_init_array+0x1e>
 8006fb4:	080072dc 	.word	0x080072dc
 8006fb8:	080072dc 	.word	0x080072dc
 8006fbc:	080072dc 	.word	0x080072dc
 8006fc0:	080072e0 	.word	0x080072e0

08006fc4 <memset>:
 8006fc4:	4402      	add	r2, r0
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d100      	bne.n	8006fce <memset+0xa>
 8006fcc:	4770      	bx	lr
 8006fce:	f803 1b01 	strb.w	r1, [r3], #1
 8006fd2:	e7f9      	b.n	8006fc8 <memset+0x4>

08006fd4 <_init>:
 8006fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fd6:	bf00      	nop
 8006fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fda:	bc08      	pop	{r3}
 8006fdc:	469e      	mov	lr, r3
 8006fde:	4770      	bx	lr

08006fe0 <_fini>:
 8006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe2:	bf00      	nop
 8006fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe6:	bc08      	pop	{r3}
 8006fe8:	469e      	mov	lr, r3
 8006fea:	4770      	bx	lr
